
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass.exe -o D:\GitHub\QwakCX16\qwak.prg --no-caret-diag --dump-labels -l qwak.tass -L qwak.list --verbose-list --line-numbers -Wimmediate -a --mw65c02 D:\GitHub\QwakCX16\qwak.asm
; Mon Dec 09 00:29:11 2019

;Line	;Offset	;Hex		;Monitor	;Source

:1	;******  Processing input file: D:\GitHub\QwakCX16\qwak.asm



3						;@name macro Call Function Table
4						;@param table
5						;@param index
6						;@desc does a stack return, BDD safe
7						;@parent MISC
8						; yes 65c02 has the wonderful jmp (place,x)
9						; however my code uses y a lot and wants to preserve x
10						; which makes this a lot harder to just change, I would
11						; need to change how my code works in order to allow for
12						; this optimisation to be used.
13						mCallFunctionTable .macro
19						.endm
20						;@end
21						;@name macro Make Function Table
22						;@param addresses
23						;@desc makes a lo hi table for use with mCallFunctionTable
24						;@parent MISC
25						mMakeFunctionTable .macro
28						.endm
29						;@end
30						;@name macro Make Table
31						;@param addresses
32						;@desc makes a lo hi table, of the address, not -1
33						;@parent MISC
34						mMakeTable .macro
37						.endm
38						;@end
39						;@name HiLo Word
40						;@desc makes union with a word and a lo, hi struct
41						;@parent MISC
42	.0000					HLWord .union
43	>0000					 .word ?
44						 .struct
45	>0000					 	lo .byte ?
46	>0001					 	hi .byte ?
47						 .ends
48						.endu
49						;@end

51						;----------------------------
52						; FONT encoding
53						;----------------------------
54						; {{{
55						.enc "qwak" ;define an ascii->petscii encoding
56						.cdef "@@", 128
57						.cdef "AZ", 129
58						.cdef "[[", 155
59						.cdef "Â£Â£", 156
60						.cdef "]]", 157
61						.cdef "^^", 158
62						.cdef "||", 159;->
63						.cdef "  ", 160
64						.cdef "!!", 161
65						.cdef "``", 162;"
66						.cdef "##", 163
67						.cdef "~~", 164 ;heart
68						.cdef "%%", 165
69						.cdef "&&", 166
70						.cdef "''", 167
71						.cdef "((", 168
72						.cdef "))", 169
73						.cdef "**", 170
74						.cdef "++", 171
75						.cdef ",,", 172
76						.cdef "--", 173
77						.cdef "..", 174
78						.cdef "//", 175
79						.cdef "09", 176
80						.cdef "::", 186
81						.cdef ";;", 187
82						.cdef "<<", 188
83						.cdef "==", 189
84						.cdef ">>", 190
85						.cdef "??", 191
86						; }}}
87						;----------------------------
88						; Constants Region
89						;----------------------------
90	=16					kTileXCount = 16
91	=12					kTileYCount = 12
92	=192					kLevelSizeMax = kTileXCount*kTileYCount
93	=128					kSprBase = 128
94	=1					kBulletSpriteOffset = 1
95	=2					kEntsSpriteOffset = 2
96	=1					kBulletCollisionbox = 1
97	.0000					kSprites .block
98	=208						fish = kSprBase+80
99	=200						spiderLeft = kSprBase+72
100	=202						spiderRight = kSprBase+74
101	=168						springNormal = kSprBase+40
102	=169						springCompress = kSprBase+41
103	=170						springExpand = kSprBase+42
104	=171						springFull = kSprBase+43
105	=172						springFall = kSprBase+44
106	=252						bubbles = kSprBase+124
107	=248						bulletSprite = kSprBase+120
108	=244						Q = kSprBase+116
109	=245						W = kSprBase+117
110	=246						A = kSprBase+118
111	=247						K = kSprBase+119
112	=251						splat = kSprBase+123
113						.bend
114	.0000					kSpiderValues .block
115	=2						yFallDelta = 2
116	=209						rightStartWiggle = 255-32-14 ; 32 pixels but compenstating for the sprite width
117	=225						rightStartFall = 255-16-14 ; 16 pixels
118	=46						leftStartWiggle = 32+14
119	=30						leftStartFall = 16+14
120	=32						pauseEndFallFrames = 32
121	=3						riseDelayTime = 3
122						.bend
123	.0000					kBounds .block
124	=0						screenMinX = 0
125							;screenMinY = 0
126							;screenMaxX = ( kTileXCount * 16 )
127	=192						screenMaxY = ( kTileYCount * 16 )
128						.bend
129	.0000					kTimers .block
130	=$8						dissBlocksValue = $8
131						;	jumpUpValue = $38 ; 3.5 tile
132						;	jumpUpSpringValue = $48 ; 4.5 tiles
133	=$50						floatTimer = $50
134	=10						DoorAnimeRate = 10
135	=30						spawnBubble = 30
136						.bend
137	.0000					kEntity .block
138	=$00						heli = $00
139	=$01						spring = $01
140	=$02						worm = $02
141	=$03						bat = $03
142	=$04						ghost = $04
143	=$05						spider = $05
144	=$06						fish = $06
145	=$07						circler = $07
146	=$08						bear = $08
147	=$09						octopuss = $09
148	=$0a						bearBody = $0A
149	=$0b						octopussBody = $0B
150	=$0c						bubble = $0C
151	=$0d						bossDummy = $0D
152	=25						maxEntities = 25
153	=8						maxBubbleMakers = 8
154	=2						maxNumBubblesPerMaker = 2
155						.bend
156	.0000					kBoss .block
157	=7						hitPoints = 7
158	=9						hitPointsOctopuss = 9
159	=25						deathAnimTime = 25
160	=0						normal = 0
161	=1						dead = 1
162						.bend
163	.0000					kFishLimits .block
164	=181						startTwo = 250-21-(8*6) ; 165
165	=197						maxY = 255-8-50
166						.bend
167	.0000					kPlayerParams .block
168	=254						jumpStartDelta = 255-1
169	=19						jumpDeltaAccum = 19
170	=4						jumpDeltaAccumFloat = 4
171	=4						maxFallSpeed = 4
172						.bend
173	.0000					kJumpIndexs .block
174	=0						normal = 0
175	=1						floaty = 1
176						.bend
177	.0000					kPlayerAnimsIndex .block
178	=0						standRight = 0
179	=1						standLeft = 1
180	=2						standWalkRight = 2
181	=3						standWalkLeft = 3
182	=4						jumpRight = 4
183	=5						jumpLeft = 5
184	=6						flapRight = 6
185	=7						flapLeft = 7
186	=8						dead = 8
187	=9						exit = 9
188						.bend
189	.0000					kSBC .block ; kStatusBorderChars
190	=205						M	= 205
191	=206						TL	= 203+3
192	=207						T	= 204+3
193	=209						TR	= 206+3
194	=208						L	= 205+3
195	=210						R	= 207+3
196	=250						BL	= 250
197	=251						B	= 251
198	=252						BR	= 252
199	=211						QWAKT = 208+3
200	=217						QWAKB = 214+3
201	=223						Score = 220+3
202	=229						High = 226+3
203	=232						QwakP = 232
204	=204						X = 204
205	=236						Flower = 236
206						.bend
207	.0000					mplex .block
208	=$1f						kMaxSpr = $1f
209						.bend
210	.0000					kPlayerState .block
211	=0						appear = 0
212	=1						normal = 1
213	=2						flap = 2
214	=3						jump = 3
215	=4						exit = 4
216	=5						dead = 5
217						.bend
218	.0000					kPlayerStateExit .block
219	=0						waitForAnimation = 0
220						.bend
221	.0000					kPlayerStateDeath .block
222	=0						animate = 0
223						.bend
224	.0000					kIntermission .block
225	=80						firstExit = kTileXCount*5
226	=95						secondExit = (kTileXCount*6)-1
227						.bend
228	.0000					kHideScreen .block
229	=$ef						hide = %11101111
230	=$ff						show = %11111111
231						.bend
232	.0000					VIC .block
233	.0000						Colours .block
234	=0								black = 0
235	=1								white = 1
236	=2								red = 2
237	=3								cyan = 3
238	=4								purple = 4
239	=5								green = 5
240	=6								blue = 6
241	=7								yellow = 7
242	=8								orange = 8
243	=9								brown = 9
244	=10								pink = 10
245	=11								dark_grey = 11
246	=12								med_grey = 12
247	=13								light_green = 13
248	=14								light_blue = 14
249	=15								light_grey = 15
250							.bend
251						.bend
252	.0000					kVERA .block
253	=$9f20						ADDR_Lo = $9f20
254	=$9f21						ADDR_Mid = $9f21
255	=$9f22						ADDR_Hi = $9f22
256	=$9f23						DATA_0 = $9f23
257	=$9f24						DATA_1 = $9f24
258	=$9f25						CTRL = $9f25
259	=$9f26						IEN = $9f26
260	=$9f27						ISR = $9f27
261	=$100000					inc_1 = $100000
262	=$200000					inc_2 = $200000
263	=$300000					inc_4 = $300000
264	=$400000					inc_8 = $400000
265	.0000						DisplayComposer .block
266	=$f0000							video = $f0000
267	=$f0001							hScale = $f0001
268	=$f0002							vScale = $f0002
269	=$f0003							borderColour = $f0003
270	=$f0004							hStart = $f0004
271	=$f0005							hStop = $f0005
272	=$f0006							vStart = $f0006
273	=$f0007							vStop = $f0007
274	=$f0008							vStartStop = $f0008
275	=$f0009							IRQLineL = $f0009
276	=$f000a							IRQLineH = $f000a
277							.bend
278	.0000						Layer0 .block
279	=$f2000							ctrl0 = $f2000
280	=$f2001							ctrl1 = $f2001
281							.bend
282	.0000						Layer1 .block
283	=$f3000							ctrl0 = $f3000
284	=$f3001							ctrl1 = $f3001
285							.bend
286	=$f4000						SpriteRegisters = $f4000
287	=$f5000						SpriteAttributes = $f5000
288						.bend
289						getVeraSpriteAddress32x32 .function number
290						.endf (number*512)>>5
291						getTitleScreenCharPos .function xpos,ypos
292						.endf kVRAM.titleScreen+(ypos*128)+(xpos*2)
293						getGameScreenCharPos .function xpos,ypos
294						.endf kVRAM.gameScreen+(ypos*128)+(xpos*2)

296	=[]					VeraDESTAddressLUT := []
297	={}					VeraDESTAddressLUTLookup := {}

299						appendVeraAddress .segment addr
309						.endm

311	=$ff06					GETJOY = $ff06
312	=$02bc					JOY1 = $02BC

314						.include "qwak_structs.asm"

:2	;******  Processing file: D:\GitHub\QwakCX16\qwak_structs.asm

1	.0000					sGameData .struct
2	>0000					lives .byte ?
3	>0001					flowers .byte ?
4	>0002					score .byte ?,?,?,?,?,?
5	>0008					high .byte ?,?,?,?,?,?
6	>000e					currLevel .byte ?
7	>000f					exitOpen .byte ?
8	>0010					musicMode .byte ?
9						.ends

11	.0000					sLevelData .struct
12	>0000					numKeys .byte ?
13	>0001					totalKeys .byte ?
14	>0002					playerIndex .byte ?
15	>0003					exitIndex .byte ?,?
16	>0005					exitFrame .byte ?
17	>0006					levelGraphicsSet .byte ?
18						.ends

20	.0000					sTimerTickDowns .struct
21	>0000					dissBlocks 	.byte ?
22	>0001					playerAnim 	.byte ?
23	>0002					doorAnim	.byte ?
24	>0003					bulletLifeTimer .byte ?
25	>0004					shieldFlashTimer .byte ?
26	>0005					shieldFlashTimerSpeedUp .byte ?
27	>0006					bubbleTimer .fill kEntity.maxBubbleMakers
28						.ends

30	.0000					sPlayerData .struct
31	>0000					dead .byte ?
32	>0001					hasShield .byte ?
33	>0002					canFloat .byte ?
34	>0003					hasSpring .byte ?
35	>0004					onGround .byte ?
36	>0005					hasJumped .byte ?
37	>0006					isFalling .byte ?
38	>0007					floatTimer .byte ?
39	>0008					facingRight .byte ?
40	>0009					yDeltaAccum .word ?
41	>000b					baseSprite .byte ?
42	>000c					frameOffset .byte ?
43	>000d					frameCount .byte ?
44	>000e					frameTimer .byte ?
45	>000f					movingLR .byte ?
46	>0010					startedJumpLR .byte ?
47	>0011					slowMove	.byte ?
48	>0012					currAnim .byte ?
49	>0013					state .byte ?
50	>0014					minorState .byte ?
51	>0015					bulletActive .byte ?
52	>0016					bulletUD .byte ?
53	>0017					bulletLR .byte ?
54	>0018					bulletBurst .byte ?
55	>0019					bulletEgg	.byte ?
56	>001a					exitAtIndex .byte ?
57	>001b					hitBubbleNum .byte ?
58	>001c					forceJump .byte ?
59	>001d					baseFlashTimeDelta .byte ?
60						.ends

62	.0000					sEntityData .struct
63	>0000					number		.byte ?
64	>0001					type		.fill kEntity.maxEntities
65	>001a					direction	.fill kEntity.maxEntities
66	>0033					active		.fill kEntity.maxEntities
67	>004c					movTimer	.fill kEntity.maxEntities
68	>0065					animTimer	.fill kEntity.maxEntities
69	>007e					animBase 	.fill kEntity.maxEntities
70	>0097					animFrame	.fill kEntity.maxEntities
71	>00b0					originalY	.fill kEntity.maxEntities
72	>00c9					entState	.fill kEntity.maxEntities
73	>00e2					collisionX1 .fill kEntity.maxEntities
74	>00fb					collisionX2 .fill kEntity.maxEntities
75	>0114					collisionY1 .fill kEntity.maxEntities
76	>012d					collisionY2 .fill kEntity.maxEntities
77	>0146					speed		.fill kEntity.maxEntities
78	>015f					ignoreColl	.fill kEntity.maxEntities
79	>0178					numPipes	.byte ?
80	>0179					pipeIndex 	.fill kEntity.maxBubbleMakers
81	>0181					lastPipeUsed .byte ?
82	>0182					pipeBubbleStart .byte ?
83						.ends

85	.0000					sCSTCCParams .struct
86	>0000					xDeltaCheck .byte ? ; pixels
87	>0001					yDeltaCheck .byte ?  ; pixels
88	>0002					xDeltaBackup .byte ? ; pixels
89	>0003					yDeltaBackup .byte ? ; pixels
90						.ends

92	.0000					sMplexZP .struct
93	>0000					lsbtod .byte ?
94						.ends

96	.0000					sMplexBuffer .struct
97	>0000					sprp  .fill mplex.kMaxSpr+1		;sprite pointer frame buffer
98	>0020					sprph	.fill mplex.kMaxSpr+1
99	>0040					xpos  .fill mplex.kMaxSpr+1		;sprite x position frame buffer
100	>0060					xmsb  .fill mplex.kMaxSpr+1		;sprite x msb frame buffer
101	>0080					ypos  .fill mplex.kMaxSpr+1		;sprite y position frame buffer
102						;yposh .fill mplex.kMaxSpr+1
103						;sprc .fill mplex.kMaxSpr+1	;sprite color frame buffer
104						.ends


:1	;******  Return to file: D:\GitHub\QwakCX16\qwak.asm


316						;----------------------------
317						; ZP Regeion
318						;----------------------------
319						*= $00
320						.dsection ZP
321						.section ZP
322	.0000					ZP_START
323	>0000					EntityDataPointer	.word ?
324	>0002					CurrentEntity		.byte ?
325	>0003					CollidedEntity		.byte ?
326	>0004					EntNum				.byte ?
327	>0005					CollisionResult		.byte ?
328	.0006					Pointer1			.dunion HLWord
43	>0006					 .word ?
44						 .struct
45	>0006					 	lo .byte ?
46	>0007					 	hi .byte ?
47						 .ends
48						.endu
329	.0008					Pointer2			.dunion HLWord
43	>0008					 .word ?
44						 .struct
45	>0008					 	lo .byte ?
46	>0009					 	hi .byte ?
47						 .ends
48						.endu
330	.000a					Pointer3			.dunion HLWord
43	>000a					 .word ?
44						 .struct
45	>000a					 	lo .byte ?
46	>000b					 	hi .byte ?
47						 .ends
48						.endu
331	.000c					Pointer4			.dunion HLWord
43	>000c					 .word ?
44						 .struct
45	>000c					 	lo .byte ?
46	>000d					 	hi .byte ?
47						 .ends
48						.endu
332	>000e					playerTempCol		.byte ?
333	>000f					ZPTemp				.byte ?
334	>0010					ZPTemp2				.byte ?
335	>0011					ZPTemp3				.byte ?
336	>0012					ZPTemp4				.byte ?
337	>0013					ZPTemp5				.byte ?
338	>0014					TempX				.byte ?
339	>0015					ActiveTileIndex		.byte ?
340	>0016					ActiveTile			.byte ?
341	>0017					TestingSprX1		.byte ?
342	>0018					TestingSprX2		.byte ?
343	>0019					TestingSprY1		.byte ?
344	>001a					TestingSprY2		.byte ?
345	>001b					GameStatePointer	.word ?

347	>001d					CollideSpriteToCheck .byte ?
348	>001e					CollideSpriteBoxIndex .byte ?
349	>001f					CollideCharTLI .byte ?
350	>0020					CollideCharTLC .byte ?
351	>0021					CollideCharTRI .byte ?
352	>0022					CollideCharTRC .byte ?
353	>0023					CollideCharBLI .byte ?
354	>0024					CollideCharBLC .byte ?
355	>0025					CollideCharBRI .byte ?
356	>0026					CollideCharBRC .byte ?
357	>0027					CollideInternalSprTLX .byte ?  ; these 4 MUST be in the same order as below
358	>0028					CollideInternalSprBRX .byte ?
359	>0029					CollideInternalSprTLY .byte ?
360	>002a					CollideInternalSprBRY .byte ?
361	>002b					CollideInternalTTLX .byte ?
362	>002c					CollideInternalTBRX .byte ?
363	>002d					CollideInternalTTLY .byte ?
364	>002e					CollideInternalTBRY .byte ?
365	>002f					DidClipX			.byte ?  ; this is if the add X with MSB function did clip the Y
366	>0030					HideScreen			.byte ?
367	.0031					ZP_END
368						.send ZP
369						.cerror * > $7F, "Too many ZP variables"



373						;----------------------------
374						; Variables
375						;----------------------------

377						* = $A000
378						.dsection VARIABLES
379						.section VARIABLES
380	=$a000					variables = *
381	>a000					joyLeft	 		.byte ?
382	>a001					joyRight 		.byte ?
383	>a002					joyUp	 			.byte ?
384	>a003					joyDown	 		.byte ?
385	>a004					joyFire	 		.byte ?
386	>a005					oldJoyLeft		.byte ?
387	>a006					oldJoyRight 	.byte ?
388	>a007					oldJoyUp			.byte ?
389	>a008					oldJoyDown		.byte ?
390	>a009					oldJoyFire		.byte ?
391	>a00a					joyUpStart  	.byte ?
392	>a00b					joyUpStop		.byte ?
393	>a00c					joyFireEvent 	.byte ?
394	.a00d					GameData 		.dstruct sGameData
2:2	>a00d					lives .byte ?
3	>a00e					flowers .byte ?
4	>a00f					score .byte ?,?,?,?,?,?
5	>a015					high .byte ?,?,?,?,?,?
6	>a01b					currLevel .byte ?
7	>a01c					exitOpen .byte ?
8	>a01d					musicMode .byte ?
9						.ends
395:1	.a01e					LevelData 		.dstruct sLevelData
12:2	>a01e					numKeys .byte ?
13	>a01f					totalKeys .byte ?
14	>a020					playerIndex .byte ?
15	>a021					exitIndex .byte ?,?
16	>a023					exitFrame .byte ?
17	>a024					levelGraphicsSet .byte ?
18						.ends
396:1	.a025					PlayerData 		.dstruct sPlayerData
31:2	>a025					dead .byte ?
32	>a026					hasShield .byte ?
33	>a027					canFloat .byte ?
34	>a028					hasSpring .byte ?
35	>a029					onGround .byte ?
36	>a02a					hasJumped .byte ?
37	>a02b					isFalling .byte ?
38	>a02c					floatTimer .byte ?
39	>a02d					facingRight .byte ?
40	>a02e					yDeltaAccum .word ?
41	>a030					baseSprite .byte ?
42	>a031					frameOffset .byte ?
43	>a032					frameCount .byte ?
44	>a033					frameTimer .byte ?
45	>a034					movingLR .byte ?
46	>a035					startedJumpLR .byte ?
47	>a036					slowMove	.byte ?
48	>a037					currAnim .byte ?
49	>a038					state .byte ?
50	>a039					minorState .byte ?
51	>a03a					bulletActive .byte ?
52	>a03b					bulletUD .byte ?
53	>a03c					bulletLR .byte ?
54	>a03d					bulletBurst .byte ?
55	>a03e					bulletEgg	.byte ?
56	>a03f					exitAtIndex .byte ?
57	>a040					hitBubbleNum .byte ?
58	>a041					forceJump .byte ?
59	>a042					baseFlashTimeDelta .byte ?
60						.ends
397:1	=$a043					TICK_DOWN_START = *
398	.a043					TickDowns 		.dstruct sTimerTickDowns
21:2	>a043					dissBlocks 	.byte ?
22	>a044					playerAnim 	.byte ?
23	>a045					doorAnim	.byte ?
24	>a046					bulletLifeTimer .byte ?
25	>a047					shieldFlashTimer .byte ?
26	>a048					shieldFlashTimerSpeedUp .byte ?
27	>a049					bubbleTimer .fill kEntity.maxBubbleMakers
28						.ends
399:1	=$a051					TICK_DOWN_END = *
400	.a051					EntityData 		.dstruct sEntityData
63:2	>a051					number		.byte ?
64	>a052					type		.fill kEntity.maxEntities
65	>a06b					direction	.fill kEntity.maxEntities
66	>a084					active		.fill kEntity.maxEntities
67	>a09d					movTimer	.fill kEntity.maxEntities
68	>a0b6					animTimer	.fill kEntity.maxEntities
69	>a0cf					animBase 	.fill kEntity.maxEntities
70	>a0e8					animFrame	.fill kEntity.maxEntities
71	>a101					originalY	.fill kEntity.maxEntities
72	>a11a					entState	.fill kEntity.maxEntities
73	>a133					collisionX1 .fill kEntity.maxEntities
74	>a14c					collisionX2 .fill kEntity.maxEntities
75	>a165					collisionY1 .fill kEntity.maxEntities
76	>a17e					collisionY2 .fill kEntity.maxEntities
77	>a197					speed		.fill kEntity.maxEntities
78	>a1b0					ignoreColl	.fill kEntity.maxEntities
79	>a1c9					numPipes	.byte ?
80	>a1ca					pipeIndex 	.fill kEntity.maxBubbleMakers
81	>a1d2					lastPipeUsed .byte ?
82	>a1d3					pipeBubbleStart .byte ?
83						.ends
401:1	.a1d4					PasswordTemp .block
402	>a1d4						lives .byte ?
403	>a1d5						flowers .byte ?
404	>a1d6						score .byte ?,?,?,?,?,?
405	>a1dc						high .byte ?,?,?,?,?,?
406	>a1e2						currLevel .byte ?
407						.bend ;PasswordTemp
408	>a1e3					ActivePassword 			.fill 12
409	>a1ef					PasswordEntryIndex 		.byte ?
410	>a1f0					ValidPassword 				.byte ?
411	>a1f1					PasswordInfiLives 		.byte ?
412	>a1f2					PasswordRedBullets 		.byte ?
413	>a1f3					PasswordHaveSpring 		.byte ?
414	>a1f4					PasswordLevelSkip 		.byte ?
415	.a1f5					checkSpriteToCharData 	.dstruct sCSTCCParams
86:2	>a1f5					xDeltaCheck .byte ? ; pixels
87	>a1f6					yDeltaCheck .byte ?  ; pixels
88	>a1f7					xDeltaBackup .byte ? ; pixels
89	>a1f8					yDeltaBackup .byte ? ; pixels
90						.ends
416:1	.a1f9					mplexZP 						.dstruct sMplexZP
93:2	>a1f9					lsbtod .byte ?
94						.ends
417:1	.a1fa					VARIABLES_END
418						.send VARIABLES
419						.cerror * > $A200, "Too many variables"


422						; ----- @Map Temp Store@ -----
423						* = $A200
424	>a200					tileMapTemp .fill 240

426	.a2f0					MAP_TEMP_STORE_END
427	.a2f0					mplexBuffer     .dstruct sMplexBuffer
97:2	>a2f0					sprp  .fill mplex.kMaxSpr+1		;sprite pointer frame buffer
98	>a310					sprph	.fill mplex.kMaxSpr+1
99	>a330					xpos  .fill mplex.kMaxSpr+1		;sprite x position frame buffer
100	>a350					xmsb  .fill mplex.kMaxSpr+1		;sprite x msb frame buffer
101	>a370					ypos  .fill mplex.kMaxSpr+1		;sprite y position frame buffer
102						;yposh .fill mplex.kMaxSpr+1
103						;sprc .fill mplex.kMaxSpr+1	;sprite color frame buffer
104						.ends


430:1						;---------------------------
431						; MACROS
432						;---------------------------

434						mConvertXToEntSpriteX .macro
437						.endm

439						mRestoreEntSpriteX .macro
442						.endm
443						;}}}

445						; VRAM MAP
446						; $0:0000 64x32 4K TitleScreen
447						; $0:1000 64x32 4K Game Screen
448						; $0:2000 128 empty chars to keep font aligned
449						; $0:2400 64 1 bit chars "font" 512Bytes
450						; $0:2600 256 4bit chars "game" 8K
451						; $0:4600 END
452	.a390					kVRAM .block
453	=$00000						titleScreen 	= $00000
454	=$01000						gameScreen 		= $01000
455	=$02000						font				= $02000
456	=$02400						fontDest			= $02400
457	=$02600						gameChars		= $02600
458						.bend

460						copyDataFields.values := [
461															[fileFont,kVRAM.fontDest,2],
462															[LowerFixedChars,kVRAM.gameChars+52*4*8,5], ; this is over but oh well
463															[UpperFixedChars,kVRAM.gameChars+192*4*8,8], ; 2K worth
464															[font4bpp, kVRAM.gameChars+128*4*8,8]
465	=[[$544e,$02400,2],[$46f6,11392,5],[$4bb6,15872,8],[$5659,13824,8]]
														 ]

467						.enc "screen"
468						*= $0801
469	.0801					CODE_START
470	>0801	0b 08 d5 07				.word (+), 2005 ;pointer, line number
471	>0805	9e 32 30 36 34 00			.null $9e, format("%d",start)
472	>080b	00 00				+	.word 0	 ;basic line end


475						.enc "qwak"

477						*= $0810
478						.dsection STARTUP
479						.section STARTUP
480	.0810					start
481							; we need to VLOAD the sprites
482	.0810	9c 60 9f	stz $9f60		stz $9F60 ; enable the KERNAL
483	.0813	a9 02		lda #$02		lda #2
484	.0815	a2 01		ldx #$01		ldx #1
485	.0817	a0 00		ldy #$00		ldy #0 ; custom address
486	.0819	20 ba ff	jsr $ffba		jsr $ffba ; setlfs
487	.081c	a9 0b		lda #$0b		lda #size(spriteFileName)
488	.081e	a2 4e		ldx #$4e		ldx #<spriteFileName
489	.0820	a0 56		ldy #$56		ldy #>spriteFileName
490	.0822	20 bd ff	jsr $ffbd		jsr $ffbd ; setname
491	.0825	a9 03		lda #$03		lda #3 ; VLOAD bank1
492	.0827	a2 00		ldx #$00		ldx #0
493	.0829	a0 00		ldy #$00		ldy #0 ; $0000 VRAM
494	.082b	20 d5 ff	jsr $ffd5		jsr $ffd5 ; load
495	.082e	78		sei			sei
496	.082f	9c 26 9f	stz $9f26		stz kVERA.IEN ; disable VERA IRQs
497	.0832	a9 ff		lda #$ff		lda #$ff
498	.0834	8d 27 9f	sta $9f27		sta kVERA.ISR ; ack any pending IRQS
499	.0837	20 18 26	jsr $2618		jsr copyStuff ; install the lower bank of VRAMs data

501							; init the screen modes
300						.if int(kVERA.DisplayComposer.hScale|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.083a	a2 00		ldx #$00		ldx #len(VeraDESTAddressLUT)
304	={2031617:0}					VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVERA.DisplayComposer.hScale|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001]					VeraDESTAddressLUT ..=[kVERA.DisplayComposer.hScale|kVERA.inc_1]
306						.endif
307	.083c	20 16 2b	jsr $2b16	jsr setVERAAddressPort0_X

503	.083f	a9 40		lda #$40		lda #64
504	.0841	8d 23 9f	sta $9f23		sta kVERA.DATA_0
505	.0844	8d 23 9f	sta $9f23		sta kVERA.DATA_0 ; I want 320x200 mode

507	.0847	a2 00		ldx #$00		ldx #0
508	.0849	9e 00 a0	stz $a000,x	-	stz variables,x		; clear all the variables
509	.084c	9e 00 a1	stz $a100,x		stz variables+$100,x
510	.084f	9e 00 a2	stz $a200,x		stz tileMapTemp,x	; clear the tile map and after it so collisions is 00
511	.0852	e8		inx			inx
512	.0853	d0 f4		bne $0849		bne -

514							; since the title screen lives on its own screen, we can just plot it one
515	.0855	20 2b 13	jsr $132b		jsr emptyTitleScreen
516							; draw all the strings on the screen
517	.0858	a2 10		ldx #$10		ldx #16
518							;ldx #0
519	.085a	86 0f		stx $0f			stx ZPTemp
520	.085c	a6 0f		ldx $0f		-	ldx ZPTemp
521	.085e	20 4b 25	jsr $254b		jsr plotStringAAtIndexX
522	.0861	c6 0f		dec $0f			dec ZPTemp
523	.0863	10 f7		bpl $085c		bpl -

525							; init the sprite values, all sprites are 32x32 no flip, pallete 0
300						.if int(kVERA.SpriteAttributes+6|kVERA.inc_8) in VeraDESTAddressLUTLookup
302						.else
303	.0865	a2 01		ldx #$01		ldx #len(VeraDESTAddressLUT)
304	={2031617:0,5197830:1}				VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVERA.SpriteAttributes+6|kVERA.inc_8):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830]				VeraDESTAddressLUT ..=[kVERA.SpriteAttributes+6|kVERA.inc_8]
306						.endif
307	.0867	20 16 2b	jsr $2b16	jsr setVERAAddressPort0_X

527	.086a	a2 7f		ldx #$7f		ldx #127 ; for all 128 sprites
528	.086c	a9 0c		lda #$0c		lda #%00001100	; set all sprites on top of all no flip
529	.086e	8d 23 9f	sta $9f23	-	sta kVERA.DATA_0
530	.0871	ca		dex			dex
531	.0872	10 fa		bpl $086e		bpl -
300						.if int(kVERA.SpriteAttributes+7|kVERA.inc_8) in VeraDESTAddressLUTLookup
302						.else
303	.0874	a2 02		ldx #$02		ldx #len(VeraDESTAddressLUT)
304	={2031617:0,5197830:1,5197831:2}		VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVERA.SpriteAttributes+7|kVERA.inc_8):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831]			VeraDESTAddressLUT ..=[kVERA.SpriteAttributes+7|kVERA.inc_8]
306						.endif
307	.0876	20 16 2b	jsr $2b16	jsr setVERAAddressPort0_X

533	.0879	a2 7f		ldx #$7f		ldx #127 ; for all 128 sprites
534	.087b	a9 a0		lda #$a0		lda #%10100000 ; set all sprites to 32x32 pall 0
535	.087d	8d 23 9f	sta $9f23	-	sta kVERA.DATA_0
536	.0880	ca		dex			dex
537	.0881	10 fa		bpl $087d		bpl -
538							; make all sprites invisible so we don't get random ones just left arround from other things
300						.if int(kVERA.SpriteAttributes+3|kVERA.inc_8) in VeraDESTAddressLUTLookup
302						.else
303	.0883	a2 03		ldx #$03		ldx #len(VeraDESTAddressLUT)
304	={2031617:0,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVERA.SpriteAttributes+3|kVERA.inc_8):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827]		VeraDESTAddressLUT ..=[kVERA.SpriteAttributes+3|kVERA.inc_8]
306						.endif
307	.0885	20 16 2b	jsr $2b16	jsr setVERAAddressPort0_X

540	.0888	a2 7f		ldx #$7f		ldx #127 ; for all 128 sprites
541	.088a	a9 02		lda #$02		lda #2 ; set xmsb off the side of the screen
542	.088c	8d 23 9f	sta $9f23	-	sta kVERA.DATA_0
543	.088f	ca		dex			dex
544	.0890	10 fa		bpl $088c		bpl -
545							; enable them
300						.if int(kVERA.SpriteRegisters|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.0892	a2 04		ldx #$04		ldx #len(VeraDESTAddressLUT)
304	={2031617:0,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVERA.SpriteRegisters|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000]
							VeraDESTAddressLUT ..=[kVERA.SpriteRegisters|kVERA.inc_1]
306						.endif
307	.0894	20 16 2b	jsr $2b16	jsr setVERAAddressPort0_X

547	.0897	a9 01		lda #$01		lda #1 ; enable sprites
548	.0899	8d 23 9f	sta $9f23		sta kVERA.DATA_0

550							; safe to enable IRQ here
551							; all future VERA modifications need to be IRQ guarded

553	.089c	20 86 25	jsr $2586		jsr setirq ; clear all interupts and put out own in
554	.089f	a9 ef		lda #$ef		lda #kHideScreen.hide
555	.08a1	85 30		sta $30			sta HideScreen

557	.08a3	a9 b8		lda #$b8		lda #<titleScreenLoop
558	.08a5	85 1b		sta $1b			sta GameStatePointer
559	.08a7	a9 0b		lda #$0b		lda #>titleScreenLoop
560	.08a9	85 1c		sta $1c			sta GameStatePointer+1

562	.08ab	a9 01		lda #$01		lda #1
563	.08ad	8d 15 a0	sta $a015		sta GameData.high
564	.08b0	8d f9 a1	sta $a1f9		sta mplexZP.lsbtod
565	.08b3	a9 c0		lda #$c0		lda #$C0
566	.08b5	8d 1d a0	sta $a01d		sta GameData.musicMode

568								; main loop
569	.08b8					MAINLOOP
570	.08b8	ad f9 a1	lda $a1f9	-		lda mplexZP.lsbtod
571	.08bb	f0 fb		beq $08b8			beq -
572	.08bd	ce f9 a1	dec $a1f9			dec mplexZP.lsbtod
573	.08c0	6c 1b 00	jmp ($001b)			jmp (GameStatePointer)
574						.send STARTUP

576						;----------------------------
577						; GAME LOOP
578						;----------------------------
579						; {{{
580						.dsection GAME_LOOP
581						.section GAME_LOOP
582	.08c3					GAMELOOP
583	.08c3	20 b9 1b	jsr $1bb9			jsr updateTickdowns
584	.08c6	ae 38 a0	ldx $a038			ldx PlayerData.state
14	.08c9	bd d8 08	lda $08d8,x		lda PlayerCodeLUT.hi,x
15	.08cc	48		pha			pha
16	.08cd	bd d2 08	lda $08d2,x		lda PlayerCodeLUT.lo,x
17	.08d0	48		pha			pha
18	.08d1	60		rts			rts
586	.08d2					PlayerCodeLUT
26	>08d2	dd 0a 0a 0a e6 22		lo .byte <(PlayerAppear,PlayerNormal,PlayerNormal,PlayerNormal,PlayerExit,PlayerDead)-1
27	>08d8	08 09 09 09 09 0a		hi .byte >(PlayerAppear,PlayerNormal,PlayerNormal,PlayerNormal,PlayerExit,PlayerDead)-1

588	.08de					PlayerAppear
589	.08de	20 43 13	jsr $1343			jsr convertLevelToTileMap
590	.08e1	20 1f 14	jsr $141f			jsr addShadowsToMap
591	.08e4	a2 00		ldx #$00			ldx # <tileMapTemp
592	.08e6	a0 a2		ldy #$a2			ldy # >tileMapTemp
593	.08e8	20 0d 15	jsr $150d			jsr plotTileMap
594	.08eb	20 b5 1b	jsr $1bb5			jsr resetPlayerData
595	.08ee	20 96 1b	jsr $1b96			jsr setPlayerToSpawnPoint
596	.08f1	20 c7 1b	jsr $1bc7			jsr unpackEntityBytes
597	.08f4	20 e9 1c	jsr $1ce9			jsr setEntitySprites
598								; jsr pltLevel
599	.08f7	a9 01		lda #$01			lda #1
600	.08f9	8d f9 a1	sta $a1f9			sta mplexZP.lsbtod
601							;	lda #kPlayerState.normal ; == 1
602							.cerror kPlayerState.normal != 1, "need to add lda back"
603	.08fc	8d 38 a0	sta $a038			sta PlayerData.state
604	.08ff	20 2d 10	jsr $102d			jsr changePlayerAnimForCurrentDir
605	.0902	9c 1c a0	stz $a01c			stz GameData.exitOpen
606	.0905	a9 ff		lda #$ff			lda #kHideScreen.show
607	.0907	85 30		sta $30				sta HideScreen
608	.0909	80 ad		bra $08b8			gra MAINLOOP

610	.090b					PlayerNormal
611	.090b	20 81 1d	jsr $1d81			jsr BuildEntCollisionTable
612	.090e	20 6e 24	jsr $246e			jsr collidePlayerAgainstRest
613	.0911	86 03		stx $03				stx CollidedEntity
614	.0913	ad 40 a0	lda $a040			lda PlayerData.hitBubbleNum
615	.0916	85 10		sta $10				sta ZPTemp2
616	.0918	a9 00		lda #$00			lda #0
617	.091a	8d 40 a0	sta $a040			sta PlayerData.hitBubbleNum
618	.091d	2a		rol a				rol a ; pull is carry set
619	.091e	85 0f		sta $0f				sta ZPTemp
620	.0920	f0 4c		beq $096e			beq _noSpriteCollision
621	.0922	a6 03		ldx $03					ldx CollidedEntity
622	.0924	bd 52 a0	lda $a052,x				lda EntityData.type,x
623	.0927	20 9d 12	jsr $129d				jsr isTypeBossBounceDetect
624	.092a	b0 2a		bcs $0956				bcs _bossBounce
625	.092c	20 8d 12	jsr $128d					jsr isTypeBoss
626	.092f	b0 34		bcs $0965					bcs _checkBossDeath
627	.0931	ec d3 a1	cpx $a1d3						cpx EntityData.pipeBubbleStart
628	.0934	90 36		bcc $096c						bcc _normalEnt
629												; so it was a bubble
630	.0936	ad 29 a0	lda $a029							lda PlayerData.onGround
631	.0939	0d 2b a0	ora $a02b							ora PlayerData.isFalling ; don't collide if I'm jumping up
632	.093c	f0 14		beq $0952							beq _skipDeath
633	.093e	a6 03		ldx $03									ldx CollidedEntity
634	.0940	bd 72 a3	lda $a372,x								lda mplexBuffer.ypos+kEntsSpriteOffset,x
635	.0943	cd 70 a3	cmp $a370								cmp mplexBuffer.ypos
636	.0946	90 0a		bcc $0952								bcc _skipDeath
637	.0948	8e 40 a0	stx $a040									stx PlayerData.hitBubbleNum
638	.094b	c5 10		cmp $10										cmp ZPTemp2
639	.094d	f0 03		beq $0952									beq _skipDeath
640	.094f	20 10 10	jsr $1010										jsr enterOnGround
641	.0952											_skipDeath
642	.0952	a9 00		lda #$00									lda #0
643	.0954	80 18		bra $096e									bra _noSpriteCollision
644	.0956						_bossBounce
645	.0956	ad 26 a0	lda $a026			lda PlayerData.hasShield
646	.0959	f0 11		beq $096c			beq _normalEnt
647	.095b	a6 03		ldx $03					ldx CollidedEntity
648	.095d	20 a9 12	jsr $12a9				jsr hurtBoss
649	.0960	ee 41 a0	inc $a041				inc PlayerData.forceJump
650	.0963	80 29		bra $098e				gra _skipDeathCheck
651	.0965						_checkBossDeath
652	.0965	bd 1a a1	lda $a11a,x			lda EntityData.entState,x
653	.0968	c9 01		cmp #$01			cmp #kBoss.dead
654	.096a	f0 22		beq $098e			beq _skipDeathCheck
655	.096c					_normalEnt
656	.096c	a5 0f		lda $0f				lda ZPTemp
657	.096e					_noSpriteCollision
658	.096e	0d 25 a0	ora $a025			ora PlayerData.dead
659	.0971	f0 1b		beq $098e			beq _skipDeathCheck
660	.0973	ad 26 a0	lda $a026				lda PlayerData.hasShield
661	.0976	d0 16		bne $098e				bne _skipDeathCheck
662	.0978	ad f1 a1	lda $a1f1					lda PasswordInfiLives
663	.097b	d0 06		bne $0983					bne +
664	.097d	ce 0d a0	dec $a00d						dec GameData.lives
665	.0980	20 6a 1b	jsr $1b6a						jsr pltLives
666	.0983	a9 05		lda #$05			+		lda #kPlayerState.dead
667	.0985	8d 38 a0	sta $a038					sta PlayerData.state
668	.0988	8d 39 a0	sta $a039					sta PlayerData.minorState
669	.098b	4c b8 08	jmp $08b8					jmp MAINLOOP
670	.098e					_skipDeathCheck
671	.098e	9c 25 a0	stz $a025			stz PlayerData.dead
672	.0991	20 bd 0e	jsr $0ebd			jsr joyToPlayerDelta
673	.0994	20 e5 16	jsr $16e5			jsr checkSpriteToCharCollision
674								; level skip
675	.0997	ad f4 a1	lda $a1f4			lda PasswordLevelSkip
676	.099a	f0 15		beq $09b1			beq _noKey
677	.099c	20 9f ff	jsr $ff9f				jsr $FF9F ; SCAN KEY
678	.099f	20 e4 ff	jsr $ffe4				jsr $ffe4
679	.09a2	c9 5a		cmp #$5a				cmp #90 ; Z key, we can't detect C=/CX key with gettin
680	.09a4	d0 0b		bne $09b1				bne _noKey
681	.09a6	a9 04		lda #$04				lda #kPlayerState.exit
682	.09a8	8d 38 a0	sta $a038				sta PlayerData.state
683	.09ab	8d 39 a0	sta $a039				sta PlayerData.minorState
684	.09ae	4c b8 08	jmp $08b8				jmp MAINLOOP
685	.09b1					_noKey
686	.09b1	ad f5 a1	lda $a1f5			lda checkSpriteToCharData.xDeltaCheck
687	.09b4	f0 05		beq $09bb			beq _addY
688								;make sure x reg is 0, and call addXWithMSBAndClip
689	.09b6	a2 00		ldx #$00			ldx #0
690	.09b8	20 8d 0e	jsr $0e8d			jsr addXWithMSBAndClip
691	.09bb					_addY
692	.09bb	ad 70 a3	lda $a370			lda mplexBuffer.ypos
693	.09be	18		clc				clc
694	.09bf	6d f6 a1	adc $a1f6			adc checkSpriteToCharData.yDeltaCheck
695	.09c2	8d 70 a3	sta $a370			sta mplexBuffer.ypos
696	.09c5	20 b9 10	jsr $10b9			jsr updatePlayerAnim
697	.09c8	ad 26 a0	lda $a026			lda PlayerData.hasShield
698	.09cb	f0 18		beq $09e5			beq _noShield
699	.09cd	ad 47 a0	lda $a047				lda TickDowns.shieldFlashTimer
700	.09d0	d0 13		bne $09e5				bne _noShield
701										;lda mplexBuffer.sprc ; this would flash the colour, but too much effort for this example
702										;eor #7^14
703										;sta mplexBuffer.sprc
704	.09d2	ad 48 a0	lda $a048					lda TickDowns.shieldFlashTimerSpeedUp
705	.09d5	d0 08		bne $09df					bne +
706	.09d7	a9 23		lda #$23						lda #35
707	.09d9	8d 48 a0	sta $a048						sta TickDowns.shieldFlashTimerSpeedUp
708	.09dc	ce 42 a0	dec $a042						dec PlayerData.baseFlashTimeDelta
709	.09df	ad 42 a0	lda $a042				+	lda PlayerData.baseFlashTimeDelta
710	.09e2	8d 47 a0	sta $a047					sta TickDowns.shieldFlashTimer
711	.09e5					_noShield
712	.09e5	80 78		bra $0a5f			gra EndOfGameLoop

714	.09e7					PlayerExit
715	.09e7	ad 39 a0	lda $a039			lda PlayerData.minorState
716	.09ea	c9 04		cmp #$04			cmp #kPlayerState.exit
717	.09ec	d0 13		bne $0a01			bne _waitForAnimation
718									; we have to set up the exit animation
719	.09ee	a9 09		lda #$09				lda #kPlayerAnimsIndex.exit
720	.09f0	20 6d 10	jsr $106d				jsr setPlayerAnimeTo
721									;lda #kPlayerStateExit.waitForAnimation
722									.cerror kPlayerStateExit.waitForAnimation != 0, "need to change stz"
723	.09f3	9c 39 a0	stz $a039				stz PlayerData.minorState
724	.09f6	ad 3f a0	lda $a03f				lda PlayerData.exitAtIndex
725	.09f9	20 99 1b	jsr $1b99				jsr setPlayerToIndexA
726	.09fc	20 4c 19	jsr $194c				jsr clearSheildState
727	.09ff	80 5e		bra $0a5f	_exit	gra EndOfGameLoop
728	.0a01					_waitForAnimation
729	.0a01	20 b9 10	jsr $10b9			jsr updatePlayerAnim
730	.0a04	90 f9		bcc $09ff			bcc _exit
731	.0a06	a9 7c		lda #$7c				lda #<INTERLOOP			; move on to the interlude
732	.0a08	85 1b		sta $1b					sta GameStatePointer
733	.0a0a	a9 0a		lda #$0a				lda #>INTERLOOP
734	.0a0c	85 1c		sta $1c					sta GameStatePointer+1
735	.0a0e	9c 38 a0	stz $a038				stz PlayerData.state
736	.0a11	20 08 13	jsr $1308				jsr disableAllEntSprites
737	.0a14	4c b8 08	jmp $08b8				jmp MAINLOOP

739	.0a17					incLevelGraphicSet
740	.0a17	ad 24 a0	lda $a024			lda LevelData.levelGraphicsSet
741	.0a1a	18		clc				clc
742	.0a1b	69 01		adc #$01			adc #1
743	.0a1d	29 03		and #$03			and #3
744	.0a1f	8d 24 a0	sta $a024			sta LevelData.levelGraphicsSet
745	.0a22	60		rts				rts

747	.0a23					PlayerDead
748	.0a23	ad 39 a0	lda $a039			lda PlayerData.minorState
749	.0a26	c9 05		cmp #$05			cmp #kPlayerState.dead
750	.0a28	d0 12		bne $0a3c			bne _waitForAnimation
751	.0a2a	a2 07		ldx #$07				ldx #kSFX.hurt
752	.0a2c	20 ea 19	jsr $19ea				jsr playSFX
753									; we have to set up the exit animation
754	.0a2f	a9 08		lda #$08				lda #kPlayerAnimsIndex.dead
755	.0a31	20 6d 10	jsr $106d				jsr setPlayerAnimeTo
756									;lda #kPlayerStateDeath.animate
757									.cerror kPlayerStateDeath.animate  != 0, "need to change stz"
758	.0a34	9c 39 a0	stz $a039				stz PlayerData.minorState
759	.0a37	20 10 11	jsr $1110				jsr removePickups
760	.0a3a	80 23		bra $0a5f	_exit	gra EndOfGameLoop
761	.0a3c					_waitForAnimation
762	.0a3c	ce 70 a3	dec $a370			dec mplexBuffer.ypos
763	.0a3f	20 b9 10	jsr $10b9			jsr updatePlayerAnim
764	.0a42	90 f6		bcc $0a3a			bcc _exit
765	.0a44	ad 0d a0	lda $a00d				lda GameData.lives
766	.0a47	f0 08		beq $0a51				beq _gameOver
767										.cerror kPlayerState.appear != 0, "remove stz"
768										;lda #kPlayerState.appear
769	.0a49	9c 38 a0	stz $a038					stz PlayerData.state
770										;lda #0 ; appear = 0
771	.0a4c	9c 25 a0	stz $a025					stz PlayerData.dead
772	.0a4f	80 0e		bra $0a5f					bra EndOfGameLoop
773	.0a51					_gameOver
774	.0a51	9c 38 a0	stz $a038			stz PlayerData.state
775	.0a54	a9 4d		lda #$4d			lda #<gameOverLoop
776	.0a56	85 1b		sta $1b				sta GameStatePointer
777	.0a58	a9 0b		lda #$0b			lda #>gameOverLoop
778	.0a5a	85 1c		sta $1c				sta GameStatePointer+1
779	.0a5c	4c b8 08	jmp $08b8			jmp MAINLOOP

781	.0a5f					EndOfGameLoop
782	.0a5f	ad 0c a0	lda $a00c			lda joyFireEvent              ; if    1 1 0 0
783	.0a62	4d 3a a0	eor $a03a			eor PlayerData.bulletActive   ; and   0 1 0 1
784	.0a65	2d 0c a0	and $a00c			and joyFireEvent			  		; still 1 0 0 0
785	.0a68	f0 03		beq $0a6d			beq _noBulletStart
786	.0a6a	20 21 11	jsr $1121				jsr startBullet
787	.0a6d					_noBulletStart
788	.0a6d	20 61 11	jsr $1161			jsr updateBullet
789	.0a70	20 9c 1d	jsr $1d9c			jsr updateEntities
790	.0a73	20 fa 22	jsr $22fa			jsr updateBubbles
791	.0a76	20 8f 19	jsr $198f			jsr animateDoor
792	.0a79	4c b8 08	jmp $08b8			jmp MAINLOOP
793						.send GAME_LOOP
794						; }}}
795						;----------------------------
796						; Intermission LOOP
797						;----------------------------
798						; {{{
799						.dsection INTERMISSION
800						.section INTERMISSION
801	.0a7c					INTERLOOP
802	.0a7c	20 b9 1b	jsr $1bb9		jsr updateTickdowns
803	.0a7f	ae 38 a0	ldx $a038		ldx PlayerData.state
14	.0a82	bd 8f 0a	lda $0a8f,x		lda InterFuncLUT.hi,x
15	.0a85	48		pha			pha
16	.0a86	bd 8b 0a	lda $0a8b,x		lda InterFuncLUT.lo,x
17	.0a89	48		pha			pha
18	.0a8a	60		rts			rts
805	.0a8b					InterFuncLUT
26	>0a8b	92 eb 1c 49			lo .byte <(interSetUp,interMovePlayer,interEnterDoor,interNextLevel)-1
27	>0a8f	0a 0a 0b 0b			hi .byte >(interSetUp,interMovePlayer,interEnterDoor,interNextLevel)-1

807	.0a93					interSetUp
808	.0a93	20 55 26	jsr $2655		jsr PlotTransitionScreenAndMakeNextChars ; also set player index,exit index
809	.0a96	20 96 1b	jsr $1b96		jsr setPlayerToSpawnPoint
810	.0a99	ee 38 a0	inc $a038		inc PlayerData.state
811	.0a9c	a9 01		lda #$01		lda #1
812	.0a9e	8d 34 a0	sta $a034		sta PlayerData.movingLR
813	.0aa1	8d 29 a0	sta $a029		sta PlayerData.onGround
814	.0aa4	8d f5 a1	sta $a1f5		sta checkSpriteToCharData.xDeltaCheck
815	.0aa7	8d 1c a0	sta $a01c		sta GameData.exitOpen
816	.0aaa	a9 ff		lda #$ff		lda #$FF
817	.0aac	8d 22 a0	sta $a022		sta LevelData.exitIndex+1
818	.0aaf	1a		inc a			inc a
819	.0ab0	20 2a 10	jsr $102a		jsr changePlayerDir
820	.0ab3	20 d5 19	jsr $19d5		jsr setAnimateDoorToClose
821	.0ab6	ad 1b a0	lda $a01b		lda GameData.currLevel
822	.0ab9	18		clc			clc
823	.0aba	69 01		adc #$01		adc #1
824	.0abc	c9 1f		cmp #$1f		cmp #31
825	.0abe	d0 02		bne $0ac2		bne +
826	.0ac0	a9 00		lda #$00		lda #0
827	.0ac2	8d 1b a0	sta $a01b	+ 	sta GameData.currLevel
828	.0ac5	20 78 1d	jsr $1d78		jsr deactivateAllEntities
829	.0ac8	20 10 11	jsr $1110		jsr removePickups
830	.0acb	20 4b 28	jsr $284b		jsr loadPasswordTemp
831	.0ace	20 8e 28	jsr $288e		jsr makePassword
832	.0ad1	78		sei			sei
300						.if int(getGameScreenCharPos(10,4) | kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.0ad2	a2 05		ldx #$05		ldx #len(VeraDESTAddressLUT)
304	={1053204:5,2031617:0,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(getGameScreenCharPos(10,4) | kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204]
							VeraDESTAddressLUT ..=[getGameScreenCharPos(10,4) | kVERA.inc_1]
306						.endif
307	.0ad4	20 16 2b	jsr $2b16	jsr setVERAAddressPort0_X

834	.0ad7	a2 0b		ldx #$0b			ldx #11
835	.0ad9	bd e3 a1	lda $a1e3,x		-	lda ActivePassword,x
836	.0adc	20 32 2a	jsr $2a32			jsr convertToPasswordLetter
837	.0adf	8d 23 9f	sta $9f23			sta kVERA.DATA_0
838	.0ae2	9c 23 9f	stz $9f23			stz kVERA.DATA_0 ; CRAM is 0
839	.0ae5	ca		dex				dex
840	.0ae6	10 f1		bpl $0ad9			bpl -
841	.0ae8	58		cli			cli
842	.0ae9	4c b8 08	jmp $08b8		jmp MAINLOOP

844	.0aec					interMovePlayer
845	.0aec	a2 00		ldx #$00		ldx #0
846	.0aee	20 8d 0e	jsr $0e8d		jsr addXWithMSBAndClip
847	.0af1	20 b9 10	jsr $10b9		jsr updatePlayerAnim
848	.0af4	20 8f 19	jsr $198f		jsr animateDoor
849	.0af7	ad 30 a3	lda $a330		lda mplexBuffer.xpos
850	.0afa	c9 ee		cmp #$ee		cmp #256-18
851	.0afc	90 0b		bcc $0b09		bcc +
852	.0afe	ee 38 a0	inc $a038			inc PlayerData.state
853	.0b01	a9 09		lda #$09			lda #kPlayerAnimsIndex.exit
854	.0b03	20 6d 10	jsr $106d			jsr setPlayerAnimeTo
855	.0b06	4c b8 08	jmp $08b8			jmp MAINLOOP
856	.0b09	c9 b0		cmp #$b0	+	cmp #(11*16)
857	.0b0b	d0 0d		bne $0b1a		bne +
858	.0b0d	20 c0 19	jsr $19c0			jsr setAnimateDoorToOpen
859	.0b10	a9 5f		lda #$5f			lda #kIntermission.secondExit
860	.0b12	8d 21 a0	sta $a021			sta LevelData.exitIndex
861	.0b15	a9 01		lda #$01			lda #kSFX.door
862	.0b17	20 ea 19	jsr $19ea			jsr playSFX
863	.0b1a	4c b8 08	jmp $08b8	+	jmp MAINLOOP

865	.0b1d					interEnterDoor
866	.0b1d	20 b9 10	jsr $10b9		jsr updatePlayerAnim
867	.0b20	90 25		bcc $0b47		bcc _exit
868	.0b22	ad 1b a0	lda $a01b		lda GameData.currLevel
869	.0b25	a2 05		ldx #$05		ldx #size(BossLevels)-1
870	.0b27	dd d8 2c	cmp $2cd8,x	-	cmp BossLevels,x
871	.0b2a	f0 09		beq $0b35		beq _bossLevel
872	.0b2c	ca		dex			dex
873	.0b2d	10 f8		bpl $0b27		bpl -
874	.0b2f	29 01		and #$01		and #1
875	.0b31	18		clc			clc
876	.0b32	69 01		adc #$01		adc #1
877	>0b34	2c					.byte $2c ; BIT XXXXX
878	.0b35					_bossLevel
879	.0b35	a9 03		lda #$03		lda #3
880	.0b37	20 f9 19	jsr $19f9		jsr playMusic
881	.0b3a	a9 00		lda #$00		lda #kPlayerState.appear
882	.0b3c	8d 38 a0	sta $a038		sta PlayerData.state
883	.0b3f	a9 c3		lda #$c3		lda #<GAMELOOP
884	.0b41	85 1b		sta $1b			sta GameStatePointer
885	.0b43	a9 08		lda #$08		lda #>GAMELOOP
886	.0b45	85 1c		sta $1c			sta GameStatePointer+1
887	.0b47					_exit
888	.0b47	4c b8 08	jmp $08b8		jmp MAINLOOP

890	.0b4a					interNextLevel
891	.0b4a	4c b8 08	jmp $08b8		jmp MAINLOOP
892						.send INTERMISSION
893						;}}}
894						;----------------------------
895						; GAME OVER LOOP
896						;----------------------------
897						; {{{
898						.dsection GAME_OVER
899						.section GAME_OVER
900	.0b4d					gameOverLoop
901	.0b4d	ae 38 a0	ldx $a038		ldx PlayerData.state
14	.0b50	bd 5b 0b	lda $0b5b,x		lda GameOverFuncLUT.hi,x
15	.0b53	48		pha			pha
16	.0b54	bd 59 0b	lda $0b59,x		lda GameOverFuncLUT.lo,x
17	.0b57	48		pha			pha
18	.0b58	60		rts			rts
903	.0b59					GameOverFuncLUT
26	>0b59	5c 9c				lo .byte <(GOSetup,GOWaitForFire)-1
27	>0b5b	0b 0b				hi .byte >(GOSetup,GOWaitForFire)-1

905	.0b5d					GoSetup
906							; print string
907	.0b5d	a2 11		ldx #$11		ldx #17
908	.0b5f	20 46 25	jsr $2546		jsr plotStringAAtIndexXGameScreen
909	.0b62	ee 38 a0	inc $a038		inc PlayerData.state
910							; remove sprites
911	.0b65	20 08 13	jsr $1308		jsr disableAllEntSprites
912	.0b68	a9 04		lda #$04		lda #4
913	.0b6a	20 f9 19	jsr $19f9		jsr playMusic
914							; check to see if this is the new high score
915	.0b6d	a2 00		ldx #$00		ldx #0
916	.0b6f	bd 0f a0	lda $a00f,x	_l	lda GameData.score,x
917	.0b72	dd 15 a0	cmp $a015,x		cmp GameData.high,x
918	.0b75	f0 04		beq $0b7b		beq _next
919	.0b77	b0 14		bcs $0b8d		bcs _higher
920	.0b79	80 05		bra $0b80		bra _clearScore
921	.0b7b					_next
922	.0b7b	e8		inx			inx
923	.0b7c	e0 06		cpx #$06		cpx #size(sGameData.score)
924	.0b7e	d0 ef		bne $0b6f		bne _l
925							; go to GOSetup
926	.0b80					_clearScore
927	.0b80	a2 05		ldx #$05		ldx #size(sGameData.score) -1
928	.0b82	a9 00		lda #$00		lda #0
929	.0b84	9d 0f a0	sta $a00f,x	_l3	sta GameData.score,x
930	.0b87	ca		dex			dex
931	.0b88	10 fa		bpl $0b84		bpl _l3
932	.0b8a	4c b8 08	jmp $08b8		jmp MAINLOOP
933	.0b8d					_higher
934	.0b8d	a2 05		ldx #$05		ldx #size(sGameData.score) -1
935	.0b8f	bd 0f a0	lda $a00f,x	_l2	lda GameData.score,x
936	.0b92	9d 15 a0	sta $a015,x		sta GameData.high,x
937	.0b95	ca		dex			dex
938	.0b96	10 f7		bpl $0b8f		bpl _l2
939	.0b98	20 50 1b	jsr $1b50		jsr pltHighScore
940	.0b9b	80 e3		bra $0b80		gra _clearScore

942	.0b9d					GOWaitForFire
943							;wait for fire
944	.0b9d	20 c6 15	jsr $15c6		jsr scanJoystick
945	.0ba0	ad 04 a0	lda $a004		lda joyFire
946	.0ba3	f0 10		beq $0bb5		beq _exit
947								; got to Title Screen State
948	.0ba5	a9 00		lda #$00			lda #kPlayerState.appear
949	.0ba7	8d 38 a0	sta $a038			sta PlayerData.state
950	.0baa	a9 b8		lda #$b8			lda #<titleScreenLoop
951	.0bac	85 1b		sta $1b				sta GameStatePointer
952	.0bae	a9 0b		lda #$0b			lda #>titleScreenLoop
953	.0bb0	85 1c		sta $1c				sta GameStatePointer+1
954	.0bb2	20 13 13	jsr $1313			jsr clearAllEntities
955	.0bb5					_exit
956	.0bb5	4c b8 08	jmp $08b8		jmp MAINLOOP
957						.send GAME_OVER
958						; }}}
959						;----------------------------
960						; Title Screen Loop
961						;----------------------------
962						; {{{
963	.0bb8					titleScreenLoop
964	.0bb8	ae 38 a0	ldx $a038		ldx PlayerData.state
14	.0bbb	bd c7 0b	lda $0bc7,x		lda TitleScreenLoopFuncLUT.hi,x
15	.0bbe	48		pha			pha
16	.0bbf	bd c4 0b	lda $0bc4,x		lda TitleScreenLoopFuncLUT.lo,x
17	.0bc2	48		pha			pha
18	.0bc3	60		rts			rts
966	.0bc4					TitleScreenLoopFuncLUT
26	>0bc4	c9 4b e1			lo .byte <(TSSetup,TSWaitForFire,TSStartGame)-1
27	>0bc7	0b 0c 0d			hi .byte >(TSSetup,TSWaitForFire,TSStartGame)-1

968	.0bca					TSSetup
969	.0bca	20 f8 12	jsr $12f8		jsr clearAllSprites
970	.0bcd	9c ef a1	stz $a1ef		stz PasswordEntryIndex
971	.0bd0	9c 24 a0	stz $a024		stz LevelData.levelGraphicsSet

973						; set up tilescreen mode
974	.0bd3	78		sei			sei
300						.if int(kVERA.Layer0.ctrl0|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.0bd4	a2 06		ldx #$06		ldx #len(VeraDESTAddressLUT)
304	={1053204:5,2031617:0,2039808:6,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVERA.Layer0.ctrl0|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000]
							VeraDESTAddressLUT ..=[kVERA.Layer0.ctrl0|kVERA.inc_1]
306						.endif
307	.0bd6	20 16 2b	jsr $2b16	jsr setVERAAddressPort0_X

976	.0bd9	a9 01		lda #$01			lda #%00000001 ; mode 0 enabled
977	.0bdb	8d 23 9f	sta $9f23			sta kVERA.DATA_0
978								;lda #%00000001 ; 8x8 64x32
979	.0bde	8d 23 9f	sta $9f23			sta kVERA.DATA_0
980	.0be1	a9 00		lda #$00			lda #<(kVRAM.titleScreen>>2)
981	.0be3	8d 23 9f	sta $9f23			sta kVERA.DATA_0
982	.0be6	a9 00		lda #$00			lda #>(kVRAM.titleScreen>>2) ; set map to tilescreen
983	.0be8	8d 23 9f	sta $9f23			sta kVERA.DATA_0
984	.0beb	a9 00		lda #$00			lda #<(kVRAM.font>>2) ; set charset to font
985	.0bed	8d 23 9f	sta $9f23			sta kVERA.DATA_0
986	.0bf0	a9 08		lda #$08			lda #>(kVRAM.font>>2)
987	.0bf2	8d 23 9f	sta $9f23			sta kVERA.DATA_0
988	.0bf5	9c 23 9f	stz $9f23			stz kVERA.DATA_0 ; make sure H and V scroll are 0 while we are here
989	.0bf8	9c 23 9f	stz $9f23			stz kVERA.DATA_0
990	.0bfb	9c 23 9f	stz $9f23			stz kVERA.DATA_0
991	.0bfe	9c 23 9f	stz $9f23			stz kVERA.DATA_0
300						.if int(kVERA.Layer1.ctrl0|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.0c01	a2 07		ldx #$07		ldx #len(VeraDESTAddressLUT)
304	={1053204:5,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVERA.Layer1.ctrl0|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000]
							VeraDESTAddressLUT ..=[kVERA.Layer1.ctrl0|kVERA.inc_1]
306						.endif
307	.0c03	20 16 2b	jsr $2b16	jsr setVERAAddressPort0_X

993	.0c06	9c 23 9f	stz $9f23			stz kVERA.DATA_0 ; disable layer 1
994	.0c09	58		cli			cli

996	.0c0a	a2 03		ldx #$03		ldx #len(TitleScreenData.SpriteStruct.sprites)-1
997	.0c0c	bd 2c 2b	lda $2b2c,x	-	lda TitleScreenData.SpriteStruct.ptr.lo,x
998	.0c0f	9d f0 a2	sta $a2f0,x		sta mplexBuffer.sprp,x
999	.0c12	bd 30 2b	lda $2b30,x		lda TitleScreenData.SpriteStruct.ptr.hi,x
1000	.0c15	9d 10 a3	sta $a310,x		sta mplexBuffer.sprph,x
1001	.0c18	bd 34 2b	lda $2b34,x		lda TitleScreenData.SpriteStruct.x.lo,x
1002	.0c1b	9d 30 a3	sta $a330,x		sta mplexBuffer.xpos,x
1003	.0c1e	bd 38 2b	lda $2b38,x		lda TitleScreenData.SpriteStruct.x.hi,x
1004	.0c21	9d 50 a3	sta $a350,x		sta mplexBuffer.xmsb,x
1005	.0c24	bd 3c 2b	lda $2b3c,x		lda TitleScreenData.SpriteStruct.y,x
1006	.0c27	9d 70 a3	sta $a370,x		sta mplexBuffer.ypos,x
1007	.0c2a	ca		dex			dex
1008	.0c2b	10 df		bpl $0c0c		bpl -

1010							; set up the defaults here, in case a password modifies them
1011	.0c2d	20 07 11	jsr $1107		jsr clearPlayerStuct
1012	.0c30	a9 05		lda #$05		lda #5
1013	.0c32	8d 0d a0	sta $a00d		sta GameData.lives
1014	.0c35	9c 1b a0	stz $a01b		stz GameData.currLevel
1015	.0c38	9c 0e a0	stz $a00e		stz GameData.flowers

1017	.0c3b	ee 38 a0	inc $a038		inc PlayerData.state
1018	.0c3e	a9 00		lda #$00		lda #0
1019	.0c40	85 10		sta $10			sta ZPTemp2
1020	.0c42	20 f9 19	jsr $19f9		jsr playMusic
1021	.0c45	a9 ff		lda #$ff		lda #kHideScreen.show
1022	.0c47	85 30		sta $30			sta HideScreen
1023	.0c49	4c b8 08	jmp $08b8		jmp MAINLOOP

1025	.0c4c					TSWaitForFire
1026	.0c4c	20 c6 15	jsr $15c6		jsr scanJoystick
1027	.0c4f	78		sei			sei
1028	.0c50	20 b9 1b	jsr $1bb9		jsr updateTickdowns
1029	.0c53	ad 44 a0	lda $a044		lda TickDowns.playerAnim
1030	.0c56	d0 42		bne $0c9a		bne _checkJoy
1031	.0c58	a6 10		ldx $10				ldx ZPTemp2
1032	.0c5a	ad 1d a0	lda $a01d			lda GameData.musicMode
1033	.0c5d	18		clc				clc
1034	.0c5e	2a		rol a				rol a
1035	.0c5f	2a		rol a				rol a
1036	.0c60	2a		rol a				rol a ; get upper 2 bits wrapped arround to the lower 2 bits
1037	.0c61	a8		tay				tay
1038	.0c62	b9 90 2b	lda $2b90,y			lda TitleScreenData.menuOffsetsEnd,y
1039	.0c65	85 0f		sta $0f				sta ZPTemp
1040	.0c67	9c 25 9f	stz $9f25			stz kVERA.CTRL
1041	.0c6a	a9 20		lda #$20			lda #`kVRAM.titleScreen|kVERA.inc_2 ; skip char data
1042	.0c6c	8d 22 9f	sta $9f22			sta kVERA.ADDR_Hi
1043	=2817					CRAMLinePos = getTitleScreenCharPos(0,22)+1 ; get the 11 line
1044	.0c6f	b9 8c 2b	lda $2b8c,y			lda TitleScreenData.menuOffsetsStart,y
1045	.0c72	a8		tay				tay
1046	.0c73	18		clc				clc
1047	.0c74	69 01		adc #$01			adc #<CRAMLinePos
1048	.0c76	8d 20 9f	sta $9f20			sta kVERA.ADDR_Lo
1049	.0c79	a9 0b		lda #$0b			lda #>CRAMLinePos
1050	.0c7b	69 00		adc #$00			adc #0
1051	.0c7d	8d 21 9f	sta $9f21			sta kVERA.ADDR_Mid
1052	.0c80	bd 88 2b	lda $2b88,x		-	lda TitleScreenData.spriteCol,x
1053	.0c83	8d 23 9f	sta $9f23			sta kVERA.DATA_0
1054						;	pha
1055						;	lda PasswordInfiLives ; if cheats are enabled the text QWAK sprites flashed
1056						;	beq +
1057						;	pla
1058						;	sta mplexBuffer.sprc  ; to much effor for this demo
1059						;	pha
1060						;+	lda PasswordRedBullets
1061						;	beq +
1062						;	pla
1063						;	sta mplexBuffer.sprc+1
1064						;	pha
1065						;+ 	lda PasswordHaveSpring
1066						;	beq +
1067						;	pla
1068						;	sta mplexBuffer.sprc+2
1069						;	pha
1070						;+	lda PasswordLevelSkip
1071						;	beq +
1072						;	pla
1073						;	sta mplexBuffer.sprc+3
1074						;	pha
1075						;+	pla
1076	.0c86	8a		txa				txa
1077	.0c87	18		clc				clc
1078	.0c88	69 01		adc #$01			adc #1
1079	.0c8a	29 03		and #$03			and #3
1080	.0c8c	aa		tax				tax
1081	.0c8d	c8		iny				iny
1082	.0c8e	c8		iny				iny
1083	.0c8f	c4 0f		cpy $0f				cpy ZPTemp
1084	.0c91	d0 ed		bne $0c80			bne -
1085	.0c93	86 10		stx $10				stx ZPTemp2
1086	.0c95	a9 04		lda #$04			lda #4
1087	.0c97	8d 44 a0	sta $a044			sta TickDowns.playerAnim
1088	.0c9a					_checkJoy
1089	.0c9a	ad 45 a0	lda $a045		lda TickDowns.doorAnim
1090	.0c9d	d0 47		bne $0ce6		bne _noScroll
1091	.0c9f	a9 08		lda #$08			lda #8
1092	.0ca1	8d 45 a0	sta $a045			sta TickDowns.doorAnim
1093	.0ca4	ad 01 a0	lda $a001			lda joyRight
1094	.0ca7	f0 30		beq $0cd9			beq _notLeft
1095	.0ca9	ad 1d a0	lda $a01d				lda GameData.musicMode
1096	.0cac	38		sec					sec
1097	.0cad	e9 40		sbc #$40				sbc #64
1098	.0caf							_saveNoMode
1099	.0caf	29 c0		and #$c0				and #128+64
1100	.0cb1	8d 1d a0	sta $a01d				sta GameData.musicMode
1101	.0cb4	a9 01		lda #$01				lda #<CRAMLinePos
1102	.0cb6	8d 20 9f	sta $9f20				sta kVERA.ADDR_Lo
1103	.0cb9	a9 0b		lda #$0b				lda #>CRAMLinePos
1104	.0cbb	8d 21 9f	sta $9f21				sta kVERA.ADDR_Mid
1105	.0cbe	a9 20		lda #$20				lda #`kVRAM.titleScreen|kVERA.inc_2 ; skip char data
1106	.0cc0	8d 22 9f	sta $9f22				sta kVERA.ADDR_Hi
1107	.0cc3	a9 01		lda #$01				lda #1
1108	.0cc5	a0 26		ldy #$26				ldy #38
1109	.0cc7	8d 23 9f	sta $9f23			-	sta kVERA.DATA_0
1110	.0cca	88		dey					dey
1111	.0ccb	10 fa		bpl $0cc7				bpl -
1112	.0ccd	2c 1d a0	bit $a01d				bit GameData.musicMode
1113	.0cd0	10 03		bpl $0cd5				bpl _startMusic
1114	.0cd2	a9 00		lda #$00					lda #0
1115	>0cd4	2c								.byte $2c
1116	.0cd5							_startMusic
1117	.0cd5	a9 05		lda #$05				lda #5
1118								;	jsr SID
1119	.0cd7	80 0d		bra $0ce6				bra _noScroll
1120	.0cd9						_notLeft
1121	.0cd9	ad 00 a0	lda $a000			lda joyLeft
1122	.0cdc	f0 08		beq $0ce6			beq _noScroll
1123	.0cde	ad 1d a0	lda $a01d				lda GameData.musicMode
1124	.0ce1	18		clc					clc
1125	.0ce2	69 40		adc #$40				adc #64
1126	.0ce4	80 c9		bra $0caf				gra _saveNoMode
1127	.0ce6					_noScroll
1128	.0ce6	ad 04 a0	lda $a004		lda joyFire
1129	.0ce9	f0 0c		beq $0cf7		beq _exit
1130	.0ceb	ad 09 a0	lda $a009			lda oldJoyFire
1131	.0cee	d0 07		bne $0cf7			bne _exit
1132	.0cf0	ee 38 a0	inc $a038				inc PlayerData.state
1133	.0cf3	a9 ef		lda #$ef				lda #kHideScreen.hide
1134	.0cf5	85 30		sta $30					sta HideScreen
1135	.0cf7					_exit
1136	.0cf7	58		cli			cli
1137	.0cf8	20 9f ff	jsr $ff9f		jsr $FF9F ; SCAN KEY
1138	.0cfb	20 e4 ff	jsr $ffe4		jsr $FFE4 ; GETIN
1139	.0cfe	f0 38		beq $0d38		beq _noKey
1140	.0d00	c9 20		cmp #$20			cmp #32
1141	.0d02	f0 38		beq $0d3c			beq _clear
1142	.0d04	20 a2 2a	jsr $2aa2				jsr convertASCIIToQwakChar
1143	.0d07	ac ef a1	ldy $a1ef				ldy PasswordEntryIndex
1144	.0d0a	99 d6 0d	sta $0dd6,y				sta PasswordRAMCache,y
1145	.0d0d	aa		tax					tax
1146	.0d0e	c0 0c		cpy #$0c				cpy #12
1147	.0d10	f0 26		beq $0d38				beq _noKey
1148	=2588							PasswordBaseScreenPos = getTitleScreenCharPos(TitleScreenData.PasswordBlank[1],TitleScreenData.PasswordBlank[2])
1149	.0d12	98		tya				tya
1150	.0d13	0a		asl a				asl a ; convert to 2 wide for screen
1151	.0d14	18		clc				clc
1152	.0d15	69 1c		adc #$1c			adc #<PasswordBaseScreenPos
1153	.0d17	78		sei				sei
1154	.0d18	9c 25 9f	stz $9f25				stz kVERA.CTRL
1155	.0d1b	8d 20 9f	sta $9f20				sta kVERA.ADDR_Lo
1156	.0d1e	a9 0a		lda #$0a				lda #>PasswordBaseScreenPos
1157	.0d20	69 00		adc #$00				adc #0
1158	.0d22	8d 21 9f	sta $9f21				sta kVERA.ADDR_Mid
1159	.0d25	a9 00		lda #$00				lda #`PasswordBaseScreenPos
1160	.0d27	8d 22 9f	sta $9f22				sta kVERA.ADDR_Hi
1161	.0d2a	8e 23 9f	stx $9f23				stx kVERA.DATA_0
1162	.0d2d	58		cli				cli
1163	.0d2e	ee ef a1	inc $a1ef			inc PasswordEntryIndex
1164	.0d31	ad ef a1	lda $a1ef			lda PasswordEntryIndex
1165	.0d34	c9 0c		cmp #$0c			cmp #12
1166	.0d36	f0 11		beq $0d49			beq _checkPassword
1167	.0d38					_noKey
1168	.0d38	58		cli			cli
1169	.0d39	4c b8 08	jmp $08b8		jmp MAINLOOP
1170	.0d3c					_clear
1171	.0d3c	a2 10		ldx #$10		ldx #16
1172	.0d3e	20 4b 25	jsr $254b		jsr plotStringAAtIndexX
1173	.0d41	9c ef a1	stz $a1ef		stz PasswordEntryIndex
1174	.0d44	9c f0 a1	stz $a1f0		stz ValidPassword
1175	.0d47	80 ef		bra $0d38		gra _noKey
1176	.0d49					_checkPassword
1177	.0d49	bd d6 0d	lda $0dd6,x		lda PasswordRAMCache,x
1178	.0d4c	48		pha			pha
1179	.0d4d	20 6c 2a	jsr $2a6c			jsr convertLetterToNumber
1180	.0d50	9d e3 a1	sta $a1e3,x			sta ActivePassword,x
1181	.0d53	68		pla			pla
1182	.0d54	20 b5 2a	jsr $2ab5		jsr isValidLetter
1183	.0d57	90 2e		bcc $0d87		bcc _fail
1184	.0d59	ca		dex				dex
1185	.0d5a	10 ed		bpl $0d49			bpl _checkPassword
1186									; pass
1187	.0d5c	20 30 29	jsr $2930				jsr extractPassword
1188	.0d5f	20 75 28	jsr $2875				jsr validateExtractedPassword
1189	.0d62	b0 23		bcs $0d87				bcs _fail
1190	.0d64	20 5f 28	jsr $285f					jsr unloadPasswordTemp
1191	.0d67	a9 0d		lda #$0d					lda #VIC.Colours.light_green
1192	.0d69									_plotColourExit
1193	.0d69	78		sei						sei
1194	.0d6a	9c 25 9f	stz $9f25						stz kVERA.CTRL
1195	.0d6d	a2 1d		ldx #$1d						ldx #<PasswordBaseScreenPos+1
1196	.0d6f	8e 20 9f	stx $9f20						stx kVERA.ADDR_Lo
1197	.0d72	a2 0a		ldx #$0a						ldx #>PasswordBaseScreenPos
1198	.0d74	8e 21 9f	stx $9f21						stx kVERA.ADDR_Mid
1199	.0d77	a2 20		ldx #$20						ldx #`PasswordBaseScreenPos | kVERA.inc_2
1200	.0d79	8e 22 9f	stx $9f22						stx kVERA.ADDR_Hi
1201	.0d7c	a2 0b		ldx #$0b						ldx #11
1202	.0d7e									-
1203	.0d7e	8d 23 9f	sta $9f23						sta kVERA.DATA_0
1204	.0d81	ca		dex							dex
1205	.0d82	10 fa		bpl $0d7e						bpl  -
1206	.0d84	58		cli						cli
1207	.0d85	80 b1		bra $0d38					bra _noKey
1208	.0d87					_fail
1209	.0d87	a0 00		ldy #$00		ldy #0
1210	.0d89	20 c3 0d	jsr $0dc3		jsr checkPasswordForCheat
1211	.0d8c	b0 19		bcs $0da7		bcs _lives
1212	.0d8e	a0 0c		ldy #$0c			ldy #12
1213	.0d90	20 c3 0d	jsr $0dc3			jsr checkPasswordForCheat
1214	.0d93	b0 19		bcs $0dae			bcs _red
1215	.0d95	a0 18		ldy #$18				ldy #24
1216	.0d97	20 c3 0d	jsr $0dc3				jsr checkPasswordForCheat
1217	.0d9a	b0 19		bcs $0db5				bcs _spring
1218	.0d9c	a0 24		ldy #$24					ldy #36
1219	.0d9e	20 c3 0d	jsr $0dc3					jsr checkPasswordForCheat
1220	.0da1	b0 19		bcs $0dbc					bcs _levelSkip
1221	.0da3					_setTextRed
1222	.0da3	a9 02		lda #$02		lda #VIC.Colours.red
1223	.0da5	80 c2		bra $0d69		bra _plotColourExit
1224	.0da7					_lives
1225	.0da7	a9 01		lda #$01		lda #1
1226	.0da9	8d f1 a1	sta $a1f1		sta PasswordInfiLives
1227	.0dac	80 f5		bra $0da3		bra _setTextRed
1228	.0dae					_red
1229	.0dae	a9 01		lda #$01		lda #1
1230	.0db0	8d f2 a1	sta $a1f2		sta PasswordRedBullets
1231	.0db3	80 ee		bra $0da3		bra _setTextRed
1232	.0db5					_spring
1233	.0db5	a9 01		lda #$01		lda #1
1234	.0db7	8d f3 a1	sta $a1f3		sta PasswordHaveSpring
1235	.0dba	80 e7		bra $0da3		bra _setTextRed
1236	.0dbc					_levelSkip
1237	.0dbc	a9 01		lda #$01		lda #1
1238	.0dbe	8d f4 a1	sta $a1f4		sta PasswordLevelSkip
1239	.0dc1	80 e0		bra $0da3		bra _setTextRed
1240	.0dc3					checkPasswordForCheat
1241	.0dc3	a2 00		ldx #$00		ldx #0
1242	.0dc5	bd d6 0d	lda $0dd6,x	-	lda PasswordRAMCache,x
1243	.0dc8	d9 a8 2c	cmp $2ca8,y		cmp PASSWORD_LIVES,y
1244	.0dcb	d0 07		bne $0dd4		bne _fail
1245	.0dcd	e8		inx				inx
1246	.0dce	c8		iny				iny
1247	.0dcf	e0 0c		cpx #$0c			cpx #12
1248	.0dd1	d0 f2		bne $0dc5			bne -
1249								;sec cmp above will set this already
1250	.0dd3	60		rts				rts
1251	.0dd4					_fail
1252	.0dd4	18		clc			clc
1253	.0dd5	60		rts			rts

1255	>0dd6					PasswordRAMCache .fill 12

1257	.0de2					TSStartGame
1258	.0de2	20 e8 25	jsr $25e8		jsr setupBackDisolveFruitChars
1259	.0de5	a9 c3		lda #$c3		lda #<GAMELOOP
1260	.0de7	85 1b		sta $1b			sta GameStatePointer
1261	.0de9	a9 08		lda #$08		lda #>GAMELOOP
1262	.0deb	85 1c		sta $1c			sta GameStatePointer+1
1263							; fall through
1264	.0ded					RESET
1265	.0ded	20 f8 12	jsr $12f8		jsr clearAllSprites
1266	.0df0	20 ec 1a	jsr $1aec		jsr plotStatusArea
1267							; flip the screen
1268	.0df3	78		sei			sei
300						.if int(kVERA.Layer0.ctrl0|kVERA.inc_1) in VeraDESTAddressLUTLookup
301	.0df4	a2 06		ldx #$06		ldx #VeraDESTAddressLUTLookup[int(kVERA.Layer0.ctrl0|kVERA.inc_1)]
306						.endif
307	.0df6	20 16 2b	jsr $2b16	jsr setVERAAddressPort0_X

1270	.0df9	a9 61		lda #$61			lda #%01100001 ; mode 3 enabled
1271	.0dfb	8d 23 9f	sta $9f23			sta kVERA.DATA_0
1272	.0dfe	a9 01		lda #$01			lda #%00000001 ; 8x8 64x32
1273	.0e00	8d 23 9f	sta $9f23			sta kVERA.DATA_0
1274	.0e03	a9 00		lda #$00			lda #<(kVRAM.gameScreen>>2)
1275	.0e05	8d 23 9f	sta $9f23			sta kVERA.DATA_0
1276	.0e08	a9 04		lda #$04			lda #>(kVRAM.gameScreen>>2) ; set map to tilescreen
1277	.0e0a	8d 23 9f	sta $9f23			sta kVERA.DATA_0
1278	.0e0d	a9 80		lda #$80			lda #<(kVRAM.gameChars>>2) ; set charset to font
1279	.0e0f	8d 23 9f	sta $9f23			sta kVERA.DATA_0
1280	.0e12	a9 09		lda #$09			lda #>(kVRAM.gameChars>>2)
1281	.0e14	8d 23 9f	sta $9f23			sta kVERA.DATA_0
1282	.0e17	9c 23 9f	stz $9f23			stz kVERA.DATA_0 ; make sure H and V scroll are 0 while we are here
1283	.0e1a	9c 23 9f	stz $9f23			stz kVERA.DATA_0
1284	.0e1d	9c 23 9f	stz $9f23			stz kVERA.DATA_0
1285	.0e20	9c 23 9f	stz $9f23			stz kVERA.DATA_0
300						.if int(kVRAM.gameScreen|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.0e23	a2 08		ldx #$08		ldx #len(VeraDESTAddressLUT)
304	={1052672:8,1053204:5,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVRAM.gameScreen|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000]
							VeraDESTAddressLUT ..=[kVRAM.gameScreen|kVERA.inc_1]
306						.endif
307	.0e25	20 16 2b	jsr $2b16	jsr setVERAAddressPort0_X

1287	.0e28	a0 00		ldy #$00			ldy #0
1288	.0e2a	a2 0f		ldx #$0f		-	ldx #15
1289	.0e2c	a9 00		lda #$00			lda #$00
1290	.0e2e	8c 23 9f	sty $9f23			-	sty kVERA.DATA_0
1291	.0e31	8d 23 9f	sta $9f23				sta kVERA.DATA_0
1292	.0e34	c8		iny					iny
1293	.0e35	ca		dex					dex
1294	.0e36	10 f6		bpl $0e2e				bpl -
1295	.0e38	ad 20 9f	lda $9f20			lda kVERA.ADDR_Lo
1296	.0e3b	18		clc				clc
1297	.0e3c	69 60		adc #$60			adc #128-32
1298	.0e3e	8d 20 9f	sta $9f20			sta kVERA.ADDR_Lo
1299	.0e41	90 03		bcc $0e46			bcc +
1300	.0e43	ee 21 9f	inc $9f21				inc kVERA.ADDR_Mid
1301	.0e46	c0 00		cpy #$00		+	cpy #0
1302	.0e48	d0 e0		bne $0e2a		bne --
1303							; plot bottom row of screen
300						.if int(kVRAM.gameScreen+(24*128)|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.0e4a	a2 09		ldx #$09		ldx #len(VeraDESTAddressLUT)
304	={1052672:8,1053204:5,1055744:9,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVRAM.gameScreen+(24*128)|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000,1055744]
							VeraDESTAddressLUT ..=[kVRAM.gameScreen+(24*128)|kVERA.inc_1]
306						.endif
307	.0e4c	20 16 2b	jsr $2b16	jsr setVERAAddressPort0_X

1305	.0e4f	a9 05		lda #$05		lda #5
1306	.0e51	85 0f		sta $0f			sta ZPTemp
1307	.0e53	a0 cd		ldy #$cd		ldy #kSBC.M ; clear char
1308	.0e55	a2 27		ldx #$27	-	ldx #39
1309	.0e57	a9 00		lda #$00		lda #$00
1310	.0e59	8c 23 9f	sty $9f23		-	sty kVERA.DATA_0
1311	.0e5c	8d 23 9f	sta $9f23			sta kVERA.DATA_0
1312	.0e5f	ca		dex				dex
1313	.0e60	10 f7		bpl $0e59			bpl -
1314	.0e62	ad 20 9f	lda $9f20		lda kVERA.ADDR_Lo
1315	.0e65	18		clc			clc
1316	.0e66	69 30		adc #$30		adc #128-80
1317	.0e68	8d 20 9f	sta $9f20		sta kVERA.ADDR_Lo
1318	.0e6b	90 03		bcc $0e70		bcc +
1319	.0e6d	ee 21 9f	inc $9f21			inc kVERA.ADDR_Mid
1320	.0e70	c6 0f		dec $0f		+	dec ZPTemp
1321	.0e72	10 e1		bpl $0e55		bpl --

1323	.0e74	20 6a 1b	jsr $1b6a		jsr pltLives
1324	.0e77	58		cli			cli
1325	.0e78	a9 c3		lda #$c3		lda #<GAMELOOP
1326	.0e7a	85 1b		sta $1b			sta GameStatePointer
1327	.0e7c	a9 08		lda #$08		lda #>GAMELOOP
1328	.0e7e	85 1c		sta $1c			sta GameStatePointer+1
1329	.0e80	a9 00		lda #$00		lda #kPlayerState.appear
1330	.0e82	8d 38 a0	sta $a038		sta PlayerData.state
1331	.0e85	a9 01		lda #$01		lda #1
1332	.0e87	20 f9 19	jsr $19f9		jsr playMusic
1333	.0e8a	4c b8 08	jmp $08b8		jmp MAINLOOP

1335						; }}}
1336						; }}}

1338						.dsection sSUBS
1339						.section sSUBS
1340						;----------------------------
1341						; SUBS
1342						;----------------------------
1343						; {{{
1344	.0e8d					addXWithMSBAndClip
1345	.0e8d	64 2f		stz $2f			stz DidClipX
1346	.0e8f	bd 30 a3	lda $a330,x		lda mplexBuffer.xpos,x
1347	.0e92	c9 c8		cmp #$c8		cmp #200
1348	.0e94	b0 11		bcs $0ea7		bcs _veryRight
1349	.0e96	c9 40		cmp #$40		cmp #64
1350	.0e98	b0 1b		bcs $0eb5		bcs _justAddAndGo
1351							;_veryLeft
1352								;clc
1353	.0e9a	6d f5 a1	adc $a1f5			adc checkSpriteToCharData.xDeltaCheck
1354	.0e9d	c9 c8		cmp #$c8			cmp #200
1355	.0e9f	90 18		bcc $0eb9			bcc _justStore
1356	.0ea1	e6 2f		inc $2f					inc DidCLipX
1357	.0ea3	a9 00		lda #$00				lda #0
1358	.0ea5	80 12		bra $0eb9				bra _justStore
1359	.0ea7						_veryRight
1360	.0ea7	18		clc				clc
1361	.0ea8	6d f5 a1	adc $a1f5			adc checkSpriteToCharData.xDeltaCheck
1362	.0eab	c9 f0		cmp #$f0			cmp #256-16
1363	.0ead	90 0a		bcc $0eb9			bcc _justStore
1364	.0eaf	e6 2f		inc $2f					inc DidClipX
1365	.0eb1	a9 f0		lda #$f0				lda #256-16
1366	.0eb3	80 04		bra $0eb9				bra _justStore
1367	.0eb5						_justAddAndGo
1368	.0eb5	18		clc				clc
1369	.0eb6	6d f5 a1	adc $a1f5			adc checkSpriteToCharData.xDeltaCheck
1370	.0eb9						_justStore
1371	.0eb9	9d 30 a3	sta $a330,x			sta mplexBuffer.xpos,x

1373	.0ebc	60		rts			rts


1376	.0ebd					joyToPlayerDelta
1377	.0ebd	20 c6 15	jsr $15c6			jsr scanJoystick
1378	.0ec0	9c f5 a1	stz $a1f5			stz checkSpriteToCharData.xDeltaCheck
1379	.0ec3	9c f6 a1	stz $a1f6			stz checkSpriteToCharData.yDeltaCheck
1380	.0ec6	9c 34 a0	stz $a034			stz PlayerData.movingLR
1381	.0ec9	ad 00 a0	lda $a000			lda joyLeft
1382	.0ecc	0d 01 a0	ora $a001			ora joyRight
1383	.0ecf	f0 5a		beq $0f2b			beq _noLR
1384	.0ed1	ad 00 a0	lda $a000			lda joyLeft
1385	.0ed4	d0 2b		bne $0f01			bne _left
1386	.0ed6	ad 36 a0	lda $a036			lda PlayerData.slowMove
1387	.0ed9	f0 03		beq $0ede			beq +
1388	.0edb	a9 01		lda #$01			lda #1
1389	>0edd	2c						.byte $2c ; bit
1390	.0ede	a9 02		lda #$02	+		lda #2
1391	.0ee0	8d f5 a1	sta $a1f5			sta checkSpriteToCharData.xDeltaCheck
1392	.0ee3	ad 01 a0	lda $a001			lda joyRight
1393	.0ee6	2d 05 a0	and $a005			and oldJoyLeft
1394	.0ee9	f0 0b		beq $0ef6			beq _fullSpeedRight ; we were already going left
1395	.0eeb	ad 29 a0	lda $a029			lda PlayerData.onGround
1396	.0eee	d0 03		bne $0ef3			bne _clearSpeedRight
1397	.0ef0	a9 01		lda #$01			lda #1
1398	>0ef2	2c						.byte $2c
1399	.0ef3					_clearSpeedRight
1400	.0ef3	9c 36 a0	stz $a036			stz PlayerData.slowMove
1401	.0ef6					_fullSpeedRight
1402	.0ef6	a9 01		lda #$01			lda #1
1403	.0ef8	8d 34 a0	sta $a034			sta PlayerData.movingLR
1404	.0efb	3a		dec a				dec a ; a = 0
1405	.0efc	20 2a 10	jsr $102a			jsr changePlayerDir
1406	.0eff	80 32		bra $0f33			gra _endLR
1407	.0f01	ad 36 a0	lda $a036	_left	lda PlayerData.slowMove
1408	.0f04	f0 03		beq $0f09			beq +
1409	.0f06	a9 ff		lda #$ff			lda #255
1410	>0f08	2c						.byte $2c ; bit
1411	.0f09	a9 fe		lda #$fe	+		lda #254
1412	.0f0b	8d f5 a1	sta $a1f5			sta checkSpriteToCharData.xDeltaCheck
1413	.0f0e	ad 00 a0	lda $a000			lda joyLeft
1414	.0f11	2d 06 a0	and $a006			and oldJoyRight
1415	.0f14	f0 0b		beq $0f21			beq _fullSpeedLeft ; we were already going left
1416	.0f16	ad 29 a0	lda $a029			lda PlayerData.onGround
1417	.0f19	d0 03		bne $0f1e			bne _clearSpeedLeft
1418	.0f1b	a9 01		lda #$01			lda #1
1419	>0f1d	2c						.byte $2c
1420	.0f1e					_clearSpeedLeft
1421	.0f1e	9c 36 a0	stz $a036			stz PlayerData.slowMove
1422	.0f21					_fullSpeedLeft
1423	.0f21	a9 01		lda #$01			lda #1
1424	.0f23	8d 34 a0	sta $a034			sta PlayerData.movingLR
1425								;lda #1
1426	.0f26	20 2a 10	jsr $102a			jsr changePlayerDir
1427	.0f29	80 08		bra $0f33			bra _endLR

1429	.0f2b	a9 80		lda #$80	_noLR	lda #$80
1430	.0f2d	8d 35 a0	sta $a035			sta PlayerData.startedJumpLR
1431	.0f30	9c 36 a0	stz $a036			stz PlayerData.slowMove
1432	.0f33					_endLR
1433	.0f33	ad 34 a0	lda $a034			lda PlayerData.movingLR
1434	.0f36	d0 06		bne $0f3e			bne +
1435	.0f38	ad 2d a0	lda $a02d			lda PlayerData.facingRight
1436	.0f3b	20 2a 10	jsr $102a			jsr changePlayerDir
1437	.0f3e	ad 29 a0	lda $a029	+		lda PlayerData.onGround
1438	.0f41	2d 0a a0	and $a00a			and joyUpStart
1439	.0f44	0d 41 a0	ora $a041			ora PlayerData.forceJump
1440	.0f47	d0 53		bne $0f9c			bne StartJump
1441	.0f49	ad 29 a0	lda $a029			lda PlayerData.onGround
1442	.0f4c	d0 2e		bne $0f7c			bne OnGround
1443	.0f4e	ad 2f a0	lda $a02f			lda PlayerData.yDeltaAccum + 1
1444	.0f51	10 1a		bpl $0f6d			bpl falling
1445	.0f53	9c 2b a0	stz $a02b			stz PlayerData.isFalling
1446	.0f56	ad 2a a0	lda $a02a			lda PlayerData.hasJumped ; if this is 1
1447	.0f59	4d 2b a0	eor $a02b			eor PlayerData.isFalling   ; and so is this, it will make it 0, other wise still 1
1448	.0f5c	2d 0b a0	and $a00b			and joyUpStop 			 ; and the player has let go
1449	.0f5f	d0 30		bne $0f91			bne AbortJump
1450						;		lda PlayerData.onGround
1451						;		bne OnGround
1452								; we are in air then
1453	.0f61					normalJumpUpdate
1454	.0f61	a2 00		ldx #$00			ldx # kJumpIndexs.normal
1455	.0f63					customJumpUpdate
1456	.0f63	20 52 10	jsr $1052			jsr incPlayerYDeltaAndReturn
1457	.0f66	ad 2f a0	lda $a02f			lda PlayerData.yDeltaAccum + 1
1458	.0f69	8d f6 a1	sta $a1f6			sta checkSpriteToCharData.yDeltaCheck
1459	.0f6c	60		rts				rts
1460	.0f6d					falling
1461	.0f6d	a9 01		lda #$01			lda #1
1462	.0f6f	8d 2b a0	sta $a02b			sta PlayerData.isFalling
1463	.0f72	ad 27 a0	lda $a027			lda PlayerData.canFloat
1464	.0f75	0d f3 a1	ora $a1f3			ora PasswordHaveSpring
1465	.0f78	f0 e7		beq $0f61			beq normalJumpUpdate
1466	.0f7a	80 4b		bra $0fc7			bra handleFall
1467	.0f7c					OnGround
1468	.0f7c	a9 01		lda #$01			lda #kPlayerState.normal
1469	.0f7e	8d 38 a0	sta $a038			sta PlayerData.state
1470	.0f81	ad 40 a0	lda $a040			lda PlayerData.hitBubbleNum
1471	.0f84	f0 03		beq $0f89			beq _skip
1472	.0f86	a9 ff		lda #$ff			lda #255
1473	>0f88	2c						.byte $2c
1474	.0f89					_skip
1475	.0f89	a9 01		lda #$01			lda #1
1476	.0f8b	8d f6 a1	sta $a1f6			sta checkSpriteToCharData.yDeltaCheck
1477	.0f8e	4c 2d 10	jmp $102d			jmp changePlayerAnimForCurrentDir
1478						;		rts

1480	.0f91					AbortJump
1481	.0f91	a9 80		lda #$80			lda #$80
1482	.0f93	8d 2e a0	sta $a02e			sta PlayerData.yDeltaAccum
1483	.0f96	a9 ff		lda #$ff			lda #$FF
1484	.0f98	8d 2f a0	sta $a02f			sta PlayerData.yDeltaAccum+1
1485	.0f9b	60		rts				rts
1486	.0f9c					StartJump
1487	.0f9c	a9 01		lda #$01			lda #1
1488	.0f9e	8d 2a a0	sta $a02a			sta PlayerData.hasJumped	; we are jumping
1489	.0fa1	a9 03		lda #$03			lda #kPlayerState.jump
1490	.0fa3	8d 38 a0	sta $a038			sta PlayerData.state
1491	.0fa6	9c 2b a0	stz $a02b			stz PlayerData.isFalling	; not falling
1492	.0fa9	9c 29 a0	stz $a029			stz PlayerData.onGround		; not on the ground
1493	.0fac	9c 2e a0	stz $a02e			stz PlayerData.yDeltaAccum	; set the Y jump accleration
1494	.0faf	9c 41 a0	stz $a041			stz PlayerData.forceJump
1495	.0fb2	a9 50		lda #$50			lda # kTimers.floatTimer	; reset the float timer
1496	.0fb4	8d 2c a0	sta $a02c			sta PlayerData.floatTimer
1497	.0fb7	a9 fe		lda #$fe			lda # kPlayerParams.jumpStartDelta	; set the other half of jump accleration
1498	.0fb9	8d 2f a0	sta $a02f			sta PlayerData.yDeltaAccum + 1
1499	.0fbc	8d f6 a1	sta $a1f6			sta checkSpriteToCharData.yDeltaCheck
1500	.0fbf	20 2d 10	jsr $102d			jsr changePlayerAnimForCurrentDir
1501	.0fc2	a2 06		ldx #$06			ldx #kSFX.jump
1502	.0fc4	4c ea 19	jmp $19ea			jmp playSFX
1503								;rts ; above it now a jmp
1504	.0fc7					handleFall
1505	.0fc7	ad 38 a0	lda $a038			lda PlayerData.state
1506	.0fca	c9 03		cmp #$03			cmp #kPlayerState.jump
1507	.0fcc	d0 0c		bne $0fda			bne _didntJustStartFalling
1508	.0fce	ad 02 a0	lda $a002			lda joyUp ; if we just start falling, and joy is up and we have spring float
1509	.0fd1	f0 07		beq $0fda			beq _didntJustStartFalling
1510	.0fd3	a9 02		lda #$02			lda #kPlayerState.flap
1511	.0fd5	8d 38 a0	sta $a038			sta PlayerData.state
1512	.0fd8	80 14		bra $0fee			bra _dontStopFloat
1513	.0fda					_didntJustStartFalling
1514	.0fda	ad 38 a0	lda $a038			lda PlayerData.state
1515	.0fdd	c9 02		cmp #$02			cmp #kPlayerState.flap
1516	.0fdf	d0 1d		bne $0ffe			bne _checkUpStart
1517	.0fe1	ad 0b a0	lda $a00b			lda joyUpStop
1518	.0fe4	f0 08		beq $0fee			beq _dontStopFloat
1519	.0fe6	a9 03		lda #$03			lda #kPlayerState.jump
1520	.0fe8	8d 38 a0	sta $a038			sta PlayerData.state
1521	.0feb	4c 61 0f	jmp $0f61			jmp normalJumpUpdate
1522	.0fee					_dontStopFloat
1523	.0fee	ad 2c a0	lda $a02c			lda PlayerData.floatTimer
1524	.0ff1	10 03		bpl $0ff6			bpl +
1525	.0ff3	4c 61 0f	jmp $0f61			jmp normalJumpUpdate
1526	.0ff6	ce 2c a0	dec $a02c	+		dec PlayerData.floatTimer
1527	.0ff9	a2 01		ldx #$01			ldx #kJumpIndexs.floaty
1528	.0ffb	4c 63 0f	jmp $0f63			jmp customJumpUpdate
1529	.0ffe					_checkUpStart
1530	.0ffe	ad 0a a0	lda $a00a			lda joyUpStart
1531	.1001	d0 03		bne $1006			bne +
1532	.1003	4c 61 0f	jmp $0f61			jmp normalJumpUpdate
1533	.1006	a9 02		lda #$02	+		lda #kPlayerState.flap
1534	.1008	8d 38 a0	sta $a038			sta PlayerData.state
1535	.100b	a2 01		ldx #$01			ldx #kJumpIndexs.floaty
1536	.100d	4c 63 0f	jmp $0f63			jmp customJumpUpdate

1538	.1010					enterOnGround
1539	.1010	a9 01		lda #$01			lda #kPlayerState.normal ; == 1
1540	.1012	8d 38 a0	sta $a038			sta PlayerData.state
1541								;lda #1
1542								.cerror kPlayerState.normal != 1, "need to add lda #1"
1543	.1015	8d 29 a0	sta $a029			sta PlayerData.onGround
1544	.1018	8d 2e a0	sta $a02e			sta PlayerData.yDeltaAccum
1545	.101b	9c 2a a0	stz $a02a			stz PlayerData.hasJumped
1546	.101e	9c 2b a0	stz $a02b			stz PlayerData.isFalling
1547	.1021	9c 2f a0	stz $a02f			stz PlayerData.yDeltaAccum + 1
1548	.1024	9c 36 a0	stz $a036			stz PlayerData.slowMove
1549	.1027	ad 2d a0	lda $a02d			lda PlayerData.facingRight
1550								;jmp changePlayerDir
1551								;rts ; above is now jmp
1552	.102a					changePlayerDir
1553	.102a	8d 2d a0	sta $a02d			sta PlayerData.facingRight
1554	.102d					changePlayerAnimForCurrentDir
1555	.102d	ad 38 a0	lda $a038			lda PlayerData.state
1556	.1030	c9 02		cmp #$02			cmp #kPlayerState.flap
1557	.1032	d0 04		bne $1038			bne _notFlap
1558	.1034	a9 06		lda #$06			lda #kPlayerAnimsIndex.flapRight
1559	.1036	80 14		bra $104c			bra _still
1560	.1038					_notFlap
1561	.1038	ad 29 a0	lda $a029			lda PlayerData.onGround
1562	.103b	d0 04		bne $1041			bne _onGround
1563	.103d	a9 04		lda #$04			lda #kPlayerAnimsIndex.jumpRight
1564	.103f	80 0b		bra $104c			bra _still
1565	.1041					_onGround
1566	.1041	ad 34 a0	lda $a034			lda PlayerData.movingLR
1567	.1044	f0 04		beq $104a			beq _notMoving
1568	.1046	a9 02		lda #$02			lda #kPlayerAnimsIndex.standWalkRight
1569	.1048	80 02		bra $104c			bra _still
1570	.104a					_notMoving
1571	.104a	a9 00		lda #$00			lda #kPlayerAnimsIndex.standRight
1572	.104c	18		clc		_still	clc
1573	.104d	6d 2d a0	adc $a02d			adc PlayerData.facingRight
1574	.1050	80 1b		bra $106d			gra setPlayerAnimeTo
1575								;rts ;above is now a jmp

1577	.1052					incPlayerYDeltaAndReturn
1578	.1052	ad 2e a0	lda $a02e			lda PlayerData.yDeltaAccum
1579	.1055	18		clc				clc
1580	.1056	7d e7 10	adc $10e7,x			adc PlayerJumpLUT,x
1581	.1059	8d 2e a0	sta $a02e			sta PlayerData.yDeltaAccum
1582	.105c	ad 2f a0	lda $a02f			lda PlayerData.yDeltaAccum + 1
1583	.105f	69 00		adc #$00			adc #0
1584	.1061	30 06		bmi $1069			bmi +
1585	.1063	c9 04		cmp #$04			cmp # kPlayerParams.maxFallSpeed
1586	.1065	90 02		bcc $1069			bcc +
1587	.1067	a9 04		lda #$04			lda # kPlayerParams.maxFallSpeed
1588	.1069	8d 2f a0	sta $a02f	+		sta PlayerData.yDeltaAccum + 1
1589	.106c	60		rts				rts

1591	.106d					setPlayerAnimeTo
1592	.106d	cd 37 a0	cmp $a037			cmp PlayerData.currAnim
1593	.1070	f0 1f		beq $1091			beq _dontchange
1594	.1072	8d 37 a0	sta $a037			sta PlayerData.currAnim
1595	.1075	aa		tax				tax
1596	.1076	bd e9 10	lda $10e9,x			lda PlayerSprLUT,x
1597	.1079	8d 30 a0	sta $a030			sta PlayerData.baseSprite
1598	.107c	20 92 10	jsr $1092			jsr setSpritePtrFromFrameNumber
1599	.107f	bd f3 10	lda $10f3,x			lda PlayerFrameCountLUT,x
1600	.1082	8d 32 a0	sta $a032			sta PlayerData.frameCount
1601	.1085	bd fd 10	lda $10fd,x			lda PlayerAnimTimer,x
1602	.1088	8d 33 a0	sta $a033			sta PlayerData.frameTimer
1603	.108b	8d 44 a0	sta $a044			sta TickDowns.playerAnim
1604	.108e	9c 31 a0	stz $a031			stz PlayerData.frameOffset
1605	.1091					_dontchange
1606	.1091	60		rts				rts

1608	.1092					setSpritePtrFromFrameNumber
1609	.1092	8d f0 a2	sta $a2f0		sta mplexBuffer.sprp ; this needs to be x16 | $800
1610	.1095	9c 10 a3	stz $a310		stz mplexBuffer.sprph
1611	.1098	0e f0 a2	asl $a2f0		asl mplexBuffer.sprp ; x2
1612	.109b	2e 10 a3	rol $a310		rol mplexBuffer.sprph
1613	.109e	0e f0 a2	asl $a2f0		asl mplexBuffer.sprp ; x4
1614	.10a1	2e 10 a3	rol $a310		rol mplexBuffer.sprph
1615	.10a4	0e f0 a2	asl $a2f0		asl mplexBuffer.sprp ; x8
1616	.10a7	2e 10 a3	rol $a310		rol mplexBuffer.sprph
1617	.10aa	0e f0 a2	asl $a2f0		asl mplexBuffer.sprp ; x16
1618	.10ad	2e 10 a3	rol $a310		rol mplexBuffer.sprph
1619	.10b0	ad 10 a3	lda $a310		lda mplexBuffer.sprph
1620	.10b3	09 08		ora #$08		ora #$08
1621	.10b5	8d 10 a3	sta $a310		sta mplexBuffer.sprph
1622	.10b8	60		rts			rts

1624						; returns carry clear if anim did not loop
1625						; carry is set if it did
1626	.10b9					updatePlayerAnim
1627	.10b9	ad 32 a0	lda $a032		lda PlayerData.frameCount
1628	.10bc	c9 02		cmp #$02		cmp #2
1629	.10be	90 06		bcc $10c6		bcc _skip
1630	.10c0	ad 44 a0	lda $a044		lda TickDowns.playerAnim
1631	.10c3	f0 02		beq $10c7		beq _itTime
1632	.10c5	18		clc			clc
1633	.10c6					_skip
1634	.10c6	60		rts			rts
1635	.10c7					_itTime
1636	.10c7	ad 31 a0	lda $a031		lda PlayerData.frameOffset
1637	.10ca	18		clc			clc
1638	.10cb	69 01		adc #$01		adc #1
1639	.10cd	cd 32 a0	cmp $a032		cmp PlayerData.frameCount
1640	.10d0	90 02		bcc $10d4		bcc _store
1641	.10d2	a9 00		lda #$00		lda #0
1642	.10d4					_store
1643	.10d4	8d 31 a0	sta $a031		sta PlayerData.frameOffset
1644	.10d7	08		php			php ; if we overflowed c will be set, else clear
1645	.10d8	18		clc			clc
1646	.10d9	6d 30 a0	adc $a030		adc PlayerData.baseSprite
1647	.10dc	20 92 10	jsr $1092		jsr setSpritePtrFromFrameNumber
1648							;sta mplexBuffer.sprp
1649	.10df	ad 33 a0	lda $a033		lda PlayerData.frameTimer
1650	.10e2	8d 44 a0	sta $a044		sta TickDowns.playerAnim
1651	.10e5	28		plp			plp ; restore carry state
1652	.10e6	60		rts			rts

1654	>10e7	13 04				PlayerJumpLUT .byte kPlayerParams.jumpDeltaAccum, kPlayerParams.jumpDeltaAccumFloat
1655												; Left	Right  Walk L	Walk R
1656	>10e9	00 04 08 0c 10 12 14 16		PlayerSprLUT		.byte 0,0+04,0+08,0+12,0+16,0+18,0+20,0+22,0+24,0+28
	>10f1	18 1c
1657	>10f3	01 01 04 04 02 02 02 02		PlayerFrameCountLUT .byte 1	   	  ,1		  ,4		  ,4		  ,2		  ,2		  ,2		  ,2		  ,4		  ,4
	>10fb	04 04
1658	>10fd	ff ff 08 08 08 08 08 08		PlayerAnimTimer		.byte 255     ,255		  ,8		  ,8		  ,8		  ,8		  ,8		  ,8		  ,8		  ,8
	>1105	08 08

1660	.1107					clearPlayerStuct
1661	.1107	a2 1d		ldx #$1d		ldx #size(sPlayerData)-1
1662	.1109	9e 25 a0	stz $a025,x	-	stz PlayerData,x
1663	.110c	ca		dex			dex
1664	.110d	10 fa		bpl $1109		bpl -
1665	.110f	60		rts			rts

1667	.1110					removePickups
1668	.1110	9c 26 a0	stz $a026		stz PlayerData.hasShield
1669	.1113	9c 27 a0	stz $a027		stz PlayerData.canFloat
1670	.1116	9c 28 a0	stz $a028		stz PlayerData.hasSpring
1671	.1119	9c 3a a0	stz $a03a		stz PlayerData.bulletActive
1672	.111c	9c 3e a0	stz $a03e		stz PlayerData.bulletEgg
1673	.111f	60		rts			rts


1676	>1120	00				bulletFrame .byte 0

1678	.1121					startBullet
1679	.1121	a9 01		lda #$01		lda #1
1680	.1123	8d 3a a0	sta $a03a		sta PlayerData.bulletActive
1681	.1126	a2 03		ldx #$03		ldx #kSFX.bubble
1682	.1128	20 ea 19	jsr $19ea		jsr playSFX
1683	.112b	9c 3b a0	stz $a03b		stz PlayerData.bulletUD
1684	.112e	9c 3d a0	stz $a03d		stz PlayerData.bulletBurst
1685	.1131	ad 2d a0	lda $a02d		lda PlayerData.facingRight
1686	.1134	8d 3c a0	sta $a03c		sta PlayerData.bulletLR
1687	.1137	a9 c8		lda #$c8		lda #200
1688	.1139	8d 46 a0	sta $a046		sta TickDowns.bulletLifeTimer
1689	.113c	ad 30 a3	lda $a330		lda mplexBuffer.xpos
1690	.113f	8d 31 a3	sta $a331		sta mplexBuffer.xpos+kBulletSpriteOffset
1691	.1142	ad 70 a3	lda $a370		lda mplexBuffer.ypos
1692	.1145	38		sec			sec
1693	.1146	e9 03		sbc #$03		sbc #3
1694	.1148	8d 71 a3	sta $a371		sta mplexBuffer.ypos+kBulletSpriteOffset
1695	.114b	ad 50 a3	lda $a350		lda mplexBuffer.xmsb
1696	.114e	8d 51 a3	sta $a351		sta mplexBuffer.xmsb+kBulletSpriteOffset
1697	.1151	ad 3e a0	lda $a03e		lda PlayerData.bulletEgg
1698	.1154	0d f2 a1	ora $a1f2		ora PasswordRedBullets
1699	.1157	f0 04		beq $115d		beq _normal
1700	.1159	a9 ff		lda #$ff			lda #kSprites.bulletSprite+7
1701								.cerror kSprites.bulletSprite+7 == 0, "change branch"
1702	.115b	80 02		bra $115f			bra _store
1703	.115d					_normal
1704	.115d	a9 f8		lda #$f8		lda #kSprites.bulletSprite
1705	.115f					_store
1706	.115f	80 76		bra $11d7		gra SetBulletSpriteFromFrame
1707							;rts

1709	.1161					updateBullet
1710	.1161	ad 3a a0	lda $a03a		lda PlayerData.bulletActive
1711	.1164	f0 1a		beq $1180		beq bulletExit
1712	.1166	ad 46 a0	lda $a046		lda TickDowns.bulletLifeTimer
1713	.1169	d0 2a		bne $1195		bne bulletNotDead
1714	.116b					removeBullet
1715	.116b	9c 3a a0	stz $a03a		stz PlayerData.bulletActive
1716	.116e	ad 3e a0	lda $a03e		lda PlayerData.bulletEgg
1717	.1171	f0 08		beq $117b		beq +
1718	.1173	ad f2 a1	lda $a1f2			lda PasswordRedBullets
1719	.1176	d0 03		bne $117b			bne +
1720	.1178	ce 3e a0	dec $a03e				dec PlayerData.bulletEgg
1721	.117b	a9 ff		lda #$ff	+	lda #255
1722	.117d	8d 71 a3	sta $a371		sta mplexBuffer.ypos+kBulletSpriteOffset
1723	.1180					bulletExit
1724	.1180	60		rts			rts

1726	.1181					burstBullet
1727	.1181	a9 fb		lda #$fb		lda #kSprites.bulletSprite+3
1728	.1183	20 d7 11	jsr $11d7		jsr SetBulletSpriteFromFrame
1729	.1186	a9 10		lda #$10		lda #16
1730	.1188	8d 46 a0	sta $a046		sta TickDowns.bulletLifeTimer
1731	.118b	a9 01		lda #$01		lda #1
1732	.118d	8d 3d a0	sta $a03d		sta PlayerData.bulletBurst
1733	.1190	a2 04		ldx #$04		ldx #kSFX.ebubble
1734	.1192	4c ea 19	jmp $19ea		jmp playSFX
1735							;rts ; above is now a jump
1736	.1195					bulletNotDead
1737	.1195	ad 3d a0	lda $a03d		lda PlayerData.bulletBurst
1738	.1198	d0 e6		bne $1180		bne bulletExit
1739	.119a	ad 3e a0	lda $a03e		lda PlayerData.bulletEgg
1740	.119d	0d f2 a1	ora $a1f2		ora PasswordRedBullets
1741	.11a0	d0 17		bne $11b9		bne _bulletFull
1742	.11a2	ad 20 11	lda $1120		lda bulletFrame
1743	.11a5	c9 fa		cmp #$fa		cmp #kSprites.bulletSprite+2
1744	.11a7	f0 10		beq $11b9		beq _bulletFull
1745	.11a9	ad 46 a0	lda $a046		lda TickDowns.bulletLifeTimer
1746	.11ac	29 07		and #$07		and #$07
1747	.11ae	d0 09		bne $11b9		bne _bulletFull
1748	.11b0	ee 20 11	inc $1120		inc bulletFrame
1749	.11b3	ad 20 11	lda $1120		lda bulletFrame
1750	.11b6	20 d7 11	jsr $11d7		jsr SetBulletSpriteFromFrame
1751	.11b9					_bulletFull
1752	.11b9	a9 01		lda #$01		lda #kBulletCollisionbox
1753	.11bb	85 1e		sta $1e			sta CollideSpriteBoxIndex
1754							; lda #kBulletSpriteOffset ; same as kBulletCollisionbox
1755	.11bd	85 1d		sta $1d			sta CollideSpriteToCheck
1756	.11bf	a9 01		lda #$01		lda #<UpdateBulletEndYColl
1757	.11c1	85 06		sta $06			sta Pointer1
1758	.11c3	a9 12		lda #$12		lda #>UpdateBulletEndYColl
1759	.11c5	85 07		sta $07			sta Pointer1+1
1760	.11c7	a9 00		lda #$00		lda #0
1761	.11c9	85 05		sta $05			sta CollisionResult
1762	.11cb	a8		tay			tay ; ldy #0
1763	.11cc	ad 3b a0	lda $a03b		lda PlayerData.bulletUD
1764	.11cf	f0 03		beq $11d4		beq +
1765	.11d1	4c 81 1e	jmp $1e81		jmp entDown
1766	.11d4	4c 45 1e	jmp $1e45	+	jmp entUp

1768	.11d7					SetBulletSpriteFromFrame
1769	.11d7	8d 20 11	sta $1120		sta bulletFrame
1770	.11da	8d f1 a2	sta $a2f1		sta mplexBuffer.sprp+kBulletSpriteOffset ; this needs to be x16 | $800
1771	.11dd	9c 11 a3	stz $a311		stz mplexBuffer.sprph+kBulletSpriteOffset
1772	.11e0	0e f1 a2	asl $a2f1		asl mplexBuffer.sprp+kBulletSpriteOffset ; x2
1773	.11e3	2e 11 a3	rol $a311		rol mplexBuffer.sprph+kBulletSpriteOffset
1774	.11e6	0e f1 a2	asl $a2f1		asl mplexBuffer.sprp+kBulletSpriteOffset ; x4
1775	.11e9	2e 11 a3	rol $a311		rol mplexBuffer.sprph+kBulletSpriteOffset
1776	.11ec	0e f1 a2	asl $a2f1		asl mplexBuffer.sprp+kBulletSpriteOffset ; x8
1777	.11ef	2e 11 a3	rol $a311		rol mplexBuffer.sprph+kBulletSpriteOffset
1778	.11f2	0e f1 a2	asl $a2f1		asl mplexBuffer.sprp+kBulletSpriteOffset ; x16
1779	.11f5	2e 11 a3	rol $a311		rol mplexBuffer.sprph+kBulletSpriteOffset
1780	.11f8	ad 11 a3	lda $a311		lda mplexBuffer.sprph+kBulletSpriteOffset
1781	.11fb	09 08		ora #$08		ora #$08
1782	.11fd	8d 11 a3	sta $a311		sta mplexBuffer.sprph+kBulletSpriteOffset
1783	.1200	60		rts			rts

1785	.1201					UpdateBulletEndYColl
1786	.1201	a5 05		lda $05			lda CollisionResult
1787	.1203	f0 0a		beq $120f		beq _updateY
1788	.1205	ad 3b a0	lda $a03b		lda PlayerData.bulletUD
1789	.1208	49 01		eor #$01		eor #1
1790	.120a	8d 3b a0	sta $a03b		sta PlayerData.bulletUD
1791	.120d	10 0a		bpl $1219		bpl _checkX
1792	.120f					_updateY
1793	.120f	ad 71 a3	lda $a371		lda mplexBuffer.ypos+kBulletSpriteOffset
1794	.1212	18		clc			clc
1795	.1213	6d f6 a1	adc $a1f6		adc checkSpriteToCharData.yDeltaCheck
1796	.1216	8d 71 a3	sta $a371		sta mplexBuffer.ypos+kBulletSpriteOffset
1797	.1219					_checkX
1798	.1219	a9 31		lda #$31		lda #<UpdateBulletEndXColl
1799	.121b	85 06		sta $06			sta Pointer1
1800	.121d	a9 12		lda #$12		lda #>UpdateBulletEndXColl
1801	.121f	85 07		sta $07			sta Pointer1+1
1802	.1221	a9 00		lda #$00		lda #$00
1803	.1223	85 05		sta $05			sta CollisionResult
1804	.1225	a8		tay			tay ;ldy #0
1805	.1226	ad 3c a0	lda $a03c		lda PlayerData.bulletLR
1806	.1229	d0 03		bne $122e		bne +
1807	.122b	4c 26 1e	jmp $1e26		jmp entRight
1808	.122e	4c 62 1e	jmp $1e62	+	jmp entLeft

1810							; do some more collision checking here
1811	.1231					UpdateBulletEndXColl
1812	.1231	a5 05		lda $05			lda CollisionResult
1813	.1233	f0 0a		beq $123f		beq _updateX
1814	.1235	ad 3c a0	lda $a03c		lda PlayerData.bulletLR
1815	.1238	49 01		eor #$01		eor #1
1816	.123a	8d 3c a0	sta $a03c		sta PlayerData.bulletLR
1817	.123d	10 11		bpl $1250		bpl _checkEnts
1818	.123f					_updateX
1819	.123f	a2 01		ldx #$01		ldx #kBulletSpriteOffset
1820	.1241	20 8d 0e	jsr $0e8d		jsr addXWithMSBAndClip
1821	.1244	a5 2f		lda $2f			lda DidClipX
1822	.1246	f0 08		beq $1250		beq _checkEnts
1823	.1248	ad 3c a0	lda $a03c		lda PlayerData.bulletLR
1824	.124b	49 01		eor #$01		eor #1
1825	.124d	8d 3c a0	sta $a03c		sta PlayerData.bulletLR
1826	.1250					_checkEnts
1827	.1250	20 68 24	jsr $2468		jsr collideBulletAgainstRest
1828	.1253	90 1e		bcc $1273		bcc _exit2 ; didn't hit one
1829	.1255	bd 52 a0	lda $a052,x		lda EntityData.type,x
1830	.1258	20 8d 12	jsr $128d		jsr isTypeBoss
1831	.125b	b0 17		bcs $1274		bcs _boss
1832	.125d	a9 ff		lda #$ff			lda #255
1833	.125f	9d 72 a3	sta $a372,x			sta mplexBuffer.ypos+kEntsSpriteOffset,x
1834	.1262	9d 1a a1	sta $a11a,x			sta EntityData.entState,x
1835	.1265	9d 9d a0	sta $a09d,x			sta EntityData.movTimer,x
1836	.1268	1a		inc a				inc a ; 0
1837	.1269	9d 84 a0	sta $a084,x			sta EntityData.active,x
1838	.126c	1a		inc a				inc a ;1
1839	.126d	9d 97 a1	sta $a197,x			sta EntityData.speed,x
1840	.1270	4c 81 11	jmp $1181			jmp burstBullet
1841	.1273						_exit2
1842	.1273	60		rts				rts
1843	.1274					_boss
1844	.1274	ad 3e a0	lda $a03e		lda PlayerData.bulletEgg
1845	.1277	0d f2 a1	ora $a1f2		ora PasswordRedBullets
1846	.127a	f0 f7		beq $1273		beq _exit2 ; only accept eggs for the boss
1847	.127c	bd 52 a0	lda $a052,x		lda EntityData.type,x
1848	.127f	20 9d 12	jsr $129d		jsr isTypeBossBounceDetect
1849	.1282	b0 03		bcs $1287		bcs _found
1850	.1284	ca		dex				dex ; doesn't affect C
1851	.1285	80 ed		bra $1274			bra _boss
1852	.1287					_found
1853	.1287	20 a9 12	jsr $12a9		jsr hurtBoss
1854	.128a	4c 81 11	jmp $1181		jmp burstBullet

1856						; carry clear not boss, set boss
1857	.128d					isTypeBoss
1858	.128d	c9 08		cmp #$08		cmp #kEntity.bear
1859	.128f	90 08		bcc $1299		bcc _notBoss
1860	.1291	c9 0c		cmp #$0c		cmp #kEntity.octopussBody+1
1861	.1293	90 06		bcc $129b		bcc _boss
1862	.1295	c9 0d		cmp #$0d		cmp #kEntity.bossDummy
1863	.1297	f0 02		beq $129b		beq _boss
1864	.1299					_notBoss
1865	.1299	18		clc			clc
1866	>129a	24					.byte $24
1867	.129b					_boss
1868	.129b	38		sec			sec
1869	.129c	60		rts			rts

1871	.129d					isTypeBossBounceDetect
1872	.129d	c9 08		cmp #$08		cmp #kEntity.bear
1873	.129f	f0 06		beq $12a7		beq _yes
1874	.12a1	c9 09		cmp #$09		cmp #kEntity.octopuss
1875	.12a3	f0 02		beq $12a7		beq _yes
1876	.12a5	18		clc			clc
1877	>12a6	24					.byte $24
1878	.12a7					_yes
1879	.12a7	38		sec			sec
1880	.12a8	60		rts			rts

1882	.12a9					hurtBoss
1883	.12a9	bd 1a a1	lda $a11a,x		lda EntityData.entState,x
1884	.12ac	c9 01		cmp #$01		cmp #kBoss.dead
1885	.12ae	f0 19		beq $12c9		beq _exit
1886	.12b0	bd 9e a0	lda $a09e,x		lda EntityData.movTimer+1,x
1887	.12b3	d0 14		bne $12c9		bne _exit
1888	.12b5	de 84 a0	dec $a084,x		dec EntityData.active,x
1889	.12b8	bd 84 a0	lda $a084,x		lda EntityData.active,x
1890	.12bb	c9 01		cmp #$01		cmp #1
1891	.12bd	f0 0b		beq $12ca		beq _killedBoss
1892							; we need to flash them so the player knows they did something
1893	.12bf	a9 01		lda #$01		lda #01
1894	.12c1	20 77 1d	jsr $1d77		jsr setBossSpriteToColour
1895	.12c4	a9 10		lda #$10		lda #16
1896	.12c6	9d 9e a0	sta $a09e,x		sta EntityData.movTimer+1,x ; store the flash timer in the 2nd sprite
1897	.12c9					_exit
1898	.12c9	60		rts			rts
1899	.12ca					_killedBoss
1900							; well just killed the boss
1901	.12ca	a9 01		lda #$01		lda #kBoss.dead
1902	.12cc	9d 1a a1	sta $a11a,x		sta EntityData.entState,x
1903	.12cf	a9 fb		lda #$fb		lda #kSprites.splat
1904							;sta mplexBuffer.sprp+kEntsSpriteOffset,x
1905							;sta mplexBuffer.sprp+kEntsSpriteOffset+1,x
1906							;sta mplexBuffer.sprp+kEntsSpriteOffset+2,x
1907							;sta mplexBuffer.sprp+kEntsSpriteOffset+3,x
1908	.12d1	20 d3 22	jsr $22d3		jsr SetEntSpriteFromFrame
1909	.12d4	e8		inx			inx
1910	.12d5	a9 fb		lda #$fb		lda #kSprites.splat
1911	.12d7	20 d3 22	jsr $22d3		jsr SetEntSpriteFromFrame
1912	.12da	e8		inx			inx
1913	.12db	a9 fb		lda #$fb		lda #kSprites.splat
1914	.12dd	20 d3 22	jsr $22d3		jsr SetEntSpriteFromFrame
1915	.12e0	e8		inx			inx
1916	.12e1	a9 fb		lda #$fb		lda #kSprites.splat
1917	.12e3	20 d3 22	jsr $22d3		jsr SetEntSpriteFromFrame
1918	.12e6	ca		dex			dex
1919	.12e7	ca		dex			dex
1920	.12e8	ca		dex			dex
1921	.12e9	a9 19		lda #$19		lda #kBoss.deathAnimTime
1922	.12eb	9d 9d a0	sta $a09d,x		sta EntityData.movTimer,x
1923	.12ee	86 0f		stx $0f			stx ZPTemp
1924	.12f0	a9 03		lda #$03		lda #kScoreIndex.boss
1925	.12f2	20 53 1a	jsr $1a53		jsr giveScore
1926	.12f5	a6 0f		ldx $0f			ldx ZPTemp
1927	.12f7	60		rts			rts

1929	.12f8					clearAllSprites
1930	.12f8	a2 00		ldx #$00		ldx #0
1931	.12fa	a9 ff		lda #$ff		lda #255
1932	.12fc	9d 70 a3	sta $a370,x	-	sta mplexBuffer.ypos,x	; disbale all sprites
1933	.12ff	9d 50 a3	sta $a350,x		sta mplexBuffer.xmsb,x  ; to be sure sure
1934	.1302	e8		inx			inx
1935	.1303	e0 20		cpx #$20		cpx #mPlex.kMaxSpr+1	 ;have we reached 32 yet?
1936	.1305	d0 f5		bne $12fc		bne -
1937	.1307	60		rts			rts

1939	.1308					disableAllEntSprites
1940	.1308	a9 ff		lda #$ff		lda #255
1941	.130a	a2 1f		ldx #$1f		ldx #mplex.kMaxSpr
1942	.130c	9d 70 a3	sta $a370,x	-	sta mplexBuffer.ypos,x
1943	.130f	ca		dex			dex
1944	.1310	d0 fa		bne $130c		bne -
1945	.1312	60		rts			rts

1947	.1313					clearAllEntities
1948	.1313	9c 51 a0	stz $a051		stz EntityData.number
1949	.1316	9c c9 a1	stz $a1c9		stz EntityData.numPipes
1950	.1319	9c d2 a1	stz $a1d2		stz EntityData.lastPipeUsed
1951	.131c	a2 19		ldx #$19		ldx #kEntity.maxEntities
1952	.131e	9e 52 a0	stz $a052,x	-	stz EntityData.type,x
1953	.1321	9e 84 a0	stz $a084,x		stz EntityData.active,x
1954	.1324	9e 1a a1	stz $a11a,x		stz EntityData.entState,x
1955	.1327	ca		dex			dex
1956	.1328	10 f4		bpl $131e		bpl -
1957	.132a	60		rts			rts

1959	.132b					emptyTitleScreen
300						.if int(kVRAM.titleScreen | kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.132b	a2 0a		ldx #$0a		ldx #len(VeraDESTAddressLUT)
304	={1048576:10,1052672:8,1053204:5,1055744:9,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVRAM.titleScreen | kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000,1055744,$100000]
							VeraDESTAddressLUT ..=[kVRAM.titleScreen | kVERA.inc_1]
306						.endif
307	.132d	20 16 2b	jsr $2b16	jsr setVERAAddressPort0_X

1961	.1330	a0 0f		ldy #$0f			ldy #$0f ; do 16 pages aka 4K
1962	.1332	a2 00		ldx #$00			ldx #00
1963	.1334	a9 a0		lda #$a0	-		lda #" "
1964	.1336	8d 23 9f	sta $9f23			sta kVERA.DATA_0
1965	.1339	9c 23 9f	stz $9f23			stz kVERA.DATA_0
1966	.133c	ca		dex				dex
1967	.133d	d0 f5		bne $1334			bne -
1968	.133f	88		dey				dey
1969	.1340	10 f2		bpl $1334			bpl -
1970	.1342	60		rts				rts

1972	.1343					convertLevelToTileMap
1973	.1343	9c 1e a0	stz $a01e			stz LevelData.numKeys
1974	.1346	9c 1f a0	stz $a01f			stz LevelData.totalKeys
1975	.1349	9c c9 a1	stz $a1c9			stz EntityData.numPipes
1976	.134c	9c d2 a1	stz $a1d2			stz EntityData.lastPipeUsed
1977	.134f	a9 ff		lda #$ff			lda #$FF
1978	.1351	8d 21 a0	sta $a021			sta LevelData.exitIndex
1979	.1354	8d 22 a0	sta $a022			sta LevelData.exitIndex+1
1980	.1357	a9 00		lda #$00			lda #<tileMapTemp
1981	.1359	85 06		sta $06				sta Pointer1
1982								;sta LevelTileMapPtrLo
1983	.135b	a9 a2		lda #$a2			lda #>tileMapTemp
1984	.135d	85 07		sta $07				sta Pointer1+1
1985								;sta LevelTileMapPtrHi
1986	.135f	ae 1b a0	ldx $a01b			ldx GameData.currLevel
1987	.1362	bd 71 5e	lda $5e71,x			lda LevelTableLo,x
1988	.1365	85 08		sta $08				sta Pointer2
1989	.1367	bd 90 5e	lda $5e90,x			lda LevelTableHi,x
1990	.136a	85 09		sta $09				sta Pointer2+1
1991						; read level pointers
1992	.136c	a0 00		ldy #$00			ldy #0
1993	.136e	84 15		sty $15				sty ActiveTileIndex
1994								;lda (Pointer2),y
1995								;clc
1996								;adc Pointer2
1997						 		;sta LevelKeyListPtrLo skip these pointers as no longer used
1998	.1370	c8		iny				iny
1999								;lda (Pointer2),y
2000								;adc Pointer2+1
2001								;sta LevelKeyListPtrHi
2002	.1371	c8		iny				iny
2003	.1372	b1 08		lda ($08),y			lda (Pointer2),y
2004	.1374	18		clc				clc
2005	.1375	65 08		adc $08				adc Pointer2
2006	.1377	85 00		sta $00				sta EntityDataPointer
2007	.1379	c8		iny				iny
2008	.137a	b1 08		lda ($08),y			lda (Pointer2),y
2009	.137c	65 09		adc $09				adc Pointer2+1
2010	.137e	85 01		sta $01				sta EntityDataPointer+1
2011	.1380	18		clc				clc
2012	.1381	a5 08		lda $08				lda Pointer2
2013	.1383	69 04		adc #$04			adc #4
2014	.1385	85 08		sta $08				sta Pointer2
2015	.1387	a5 09		lda $09				lda Pointer2+1
2016	.1389	69 00		adc #$00			adc #0
2017	.138b	85 09		sta $09				sta Pointer2+1

2019	.138d	a9 0c		lda #$0c			lda #12
2020	.138f	48		pha				pha
2021	.1390	a0 00		ldy #$00	_row	ldy #0
2022	.1392					_loop	; read in 16 bytes
2023	.1392	b1 08		lda ($08),y			lda (Pointer2),y
2024	.1394	c9 12		cmp #$12			cmp # kTiles.player
2025	.1396	f0 4a		beq $13e2			beq _playerPos
2026	.1398	c9 11		cmp #$11			cmp # kTiles.exit
2027	.139a	f0 5b		beq $13f7			beq _exitPos
2028	.139c	c9 09		cmp #$09			cmp # kTiles.key1
2029	.139e	f0 4b		beq $13eb			beq _key
2030	.13a0	c9 0a		cmp #$0a			cmp # kTiles.key2
2031	.13a2	f0 47		beq $13eb			beq _key
2032	.13a4	c9 0b		cmp #$0b			cmp # kTiles.key3
2033	.13a6	f0 43		beq $13eb			beq _key
2034	.13a8	c9 0c		cmp #$0c			cmp # kTiles.key4
2035	.13aa	f0 3f		beq $13eb			beq _key
2036	.13ac	c9 13		cmp #$13			cmp # kTiles.pipe
2037	.13ae	f0 5c		beq $140c			beq _pipe
2038	.13b0	c9 14		cmp #$14			cmp # kTiles.diss
2039	.13b2	f0 3f		beq $13f3			beq _dissBlock
2040								; covert and then push out
2041	.13b4					_cont	;tax
2042								;lda toolToTileLUT,x
2043	.13b4	91 06		sta ($06),y			sta (Pointer1),y
2044	.13b6	e6 15		inc $15				inc ActiveTileIndex
2045	.13b8	c8		iny				iny
2046	.13b9	c0 10		cpy #$10			cpy #16
2047	.13bb	d0 d5		bne $1392			bne _loop
2048	.13bd	18		clc				clc
2049	.13be	a5 08		lda $08				lda Pointer2
2050	.13c0	69 10		adc #$10			adc #16
2051	.13c2	85 08		sta $08				sta Pointer2
2052	.13c4	a5 09		lda $09				lda Pointer2+1
2053	.13c6	69 00		adc #$00			adc #0
2054	.13c8	85 09		sta $09				sta Pointer2+1
2055	.13ca	18		clc				clc
2056	.13cb	a5 06		lda $06				lda Pointer1
2057	.13cd	69 10		adc #$10			adc #16
2058	.13cf	85 06		sta $06				sta Pointer1
2059	.13d1	a5 07		lda $07				lda Pointer1+1
2060	.13d3	69 00		adc #$00			adc #0
2061	.13d5	85 07		sta $07				sta Pointer1+1
2062	.13d7	68		pla				pla
2063	.13d8	38		sec				sec
2064	.13d9	e9 01		sbc #$01			sbc #1
2065	.13db	c9 00		cmp #$00			cmp #0
2066	.13dd	48		pha				pha
2067	.13de	d0 b0		bne $1390			bne _row
2068	.13e0	68		pla				pla
2069	.13e1	60		rts				rts
2070	.13e2					_playerPos
2071	.13e2	a5 15		lda $15				lda ActiveTileIndex
2072	.13e4	8d 20 a0	sta $a020			sta LevelData.playerIndex
2073	.13e7	a9 00		lda #$00			lda #kTiles.back ; 0
2074	.13e9	80 c9		bra $13b4			bra _cont
2075	.13eb	ee 1e a0	inc $a01e	_key	inc LevelData.numKeys
2076	.13ee	ee 1f a0	inc $a01f			inc LevelData.totalKeys
2077	.13f1	80 c1		bra $13b4			bra _cont
2078	.13f3					_dissBlock
2079	.13f3	a9 14		lda #$14			lda #kTiles.diss
2080	.13f5	80 bd		bra $13b4			bra _cont
2081	.13f7					_exitPos
2082	.13f7	a5 15		lda $15				lda ActiveTileIndex
2083	.13f9	ae 21 a0	ldx $a021			ldx LevelData.exitIndex
2084	.13fc	e0 ff		cpx #$ff			cpx #$FF
2085	.13fe	d0 05		bne $1405			bne _2nd
2086	.1400	8d 21 a0	sta $a021				sta LevelData.exitIndex
2087	.1403	80 03		bra $1408				bra +
2088	.1405	8d 22 a0	sta $a022	_2nd	sta LevelData.exitIndex+1
2089	.1408	a9 11		lda #$11	+		lda #kTiles.exit
2090	.140a	80 a8		bra $13b4			bra _cont
2091	.140c					_pipe
2092	.140c	ae c9 a1	ldx $a1c9			ldx EntityData.numPipes
2093	.140f	a5 15		lda $15				lda ActiveTileIndex
2094	.1411	38		sec				sec
2095	.1412	e9 10		sbc #$10			sbc #16
2096	.1414	9d ca a1	sta $a1ca,x			sta EntityData.pipeIndex,x
2097	.1417	e8		inx				inx
2098	.1418	8e c9 a1	stx $a1c9			stx EntityData.numPipes
2099	.141b	a9 13		lda #$13			lda #kTiles.pipe
2100	.141d	80 95		bra $13b4			bra _cont


2103	.141f					addShadowsToMap
2104	.141f	64 14		stz $14			stz TempX
2105	.1421	a4 14		ldy $14		-	ldy TempX
2106	.1423	20 45 14	jsr $1445		jsr tileIsSafeToChange
2107	.1426	90 03		bcc $142b		bcc _next
2108	.1428	20 51 14	jsr $1451		jsr calcBCDEforTileY
2109	.142b					_next
2110	.142b	e6 14		inc $14			inc TempX
2111	.142d	a5 14		lda $14			lda TempX
2112	.142f	c9 c0		cmp #$c0		cmp #kLevelSizeMax
2113	.1431	d0 ee		bne $1421		bne -
2114	.1433	60		rts			rts

2116	.1434					tileIsWall
2117	.1434	b9 00 a2	lda $a200,y		lda tileMapTemp,y
2118	.1437	f0 0a		beq $1443		beq	_no
2119	.1439	c9 06		cmp #$06		cmp #kTiles.wall4+1
2120	.143b	90 05		bcc $1442		bcc _yes
2121	.143d	c9 14		cmp #$14		cmp #kTiles.diss
2122	.143f	d0 02		bne $1443		bne _no
2123	.1441	18		clc			clc
2124	.1442					_yes
2125	.1442	60		rts			rts ; carry is clear
2126	.1443	38		sec		_no sec
2127	.1444	60		rts			rts ; carry is set

2129	.1445					tileIsSafeToChange
2130	.1445	b9 00 a2	lda $a200,y		lda tileMapTemp,y
2131	.1448	f0 05		beq $144f		beq _yes ; 0 is safe
2132	.144a	c9 22		cmp #$22		cmp #kTiles.underHangStart
2133	.144c	b0 01		bcs $144f		bcs _yes
2134	.144e	60		rts			rts ; carry is clear
2135	.144f					_yes
2136	.144f	38		sec			sec
2137	.1450	60		rts			rts

2139						; Don't try and understand this, not worth your life, it calcs the saul drop shadow, just move on.
2140						;  BCD
2141						;  EA
2142						;   H
2143						; A is tile we are testing
2144						;  BCDE H
2145						;  1110   = under hang
2146						;  1100   = under hang right end
2147						;  0110   = under hanr left  end
2148						;  0001 0 = left wall top end
2149						;  1001   = left wall
2150						;  1000   = 35
2151						;  11X1   = top left
2152						;  0XX1 1 = bottom left
2153	.1451					calcBCDEforTileY
2154	.1451	84 0f		sty $0f			sty ZPTemp
2155	.1453	84 10		sty $10			sty ZPTemp2
2156	.1455	98		tya			tya
2157	.1456	29 0f		and #$0f		and #15
2158	.1458	d0 04		bne $145e		bne _canDoLeft
2159	.145a	a9 80		lda #$80			lda #$80		; can'r do left on Negative
2160	.145c	80 02		bra $1460			bra +
2161	.145e					_canDoLeft
2162	.145e	a9 00		lda #$00		lda #0
2163	.1460	85 12		sta $12		+	sta ZPTemp4
2164	.1462	a5 0f		lda $0f			lda ZPTemp
2165	.1464	29 0f		and #$0f		and #15
2166	.1466	c9 0f		cmp #$0f		cmp #15
2167	.1468	d0 04		bne $146e		bne _canDoRight
2168	.146a	a9 40		lda #$40			lda #$40		 ; can't do right on Overflow
2169	.146c	85 12		sta $12				sta ZPTemp4
2170	.146e					_canDoRight
2171	.146e					END_LEFT_RIGHT_CHECK
2172	.146e	a9 07		lda #$07		lda #1+2+4 ; first 3 are empty ( it is inverted later)
2173	.1470	85 11		sta $11			sta ZPTemp3
2174	.1472	a4 0f		ldy $0f			ldy ZPTemp
2175	.1474	c0 10		cpy #$10		cpy #kTileXCount
2176	.1476	90 2b		bcc $14a3		bcc _doneFirstRow ; if it is the first row than ALL of above is not solid
2177	.1478	64 11		stz $11				stz ZPTemp3
2178	.147a	98		tya				tya
2179								;sec ;from bcc above
2180	.147b	e9 11		sbc #$11			sbc #kTileXCount+1 ; so get -1x,-1y
2181	.147d	85 10		sta $10				sta ZPTemp2
2182	.147f	a8		tay				tay
2183	.1480	24 12		bit $12				bit ZPTemp4 ; test to see if we can do right
2184	.1482	30 07		bmi $148b			bmi _noB	; no then skip B
2185	.1484	20 34 14	jsr $1434				jsr tileIsWall
2186	.1487	26 11		rol $11					rol ZPTemp3
2187	.1489	80 03		bra $148e				bra _testC
2188	.148b						_noB
2189	.148b	38		sec				sec			; if there is no B then make it clear
2190	.148c	26 11		rol $11				rol ZPTemp3
2191	.148e						_testC
2192	.148e	c8		iny				iny
2193	.148f	20 34 14	jsr $1434			jsr tileIsWall
2194	.1492	26 11		rol $11				rol ZPTemp3
2195	.1494	c8		iny				iny
2196	.1495	24 12		bit $12				bit ZPTemp4
2197	.1497	70 07		bvs $14a0			bvs _noRight
2198	.1499	20 34 14	jsr $1434				jsr tileIsWall
2199	.149c	26 11		rol $11					rol ZPTemp3
2200	.149e	80 03		bra $14a3				bra _doneFirstRow
2201	.14a0						_noRight
2202	.14a0	38		sec				sec ; make it as 1 so it gets 0 later
2203	.14a1	26 11		rol $11				rol ZPTemp3
2204	.14a3					_doneFirstRow
2205	.14a3	24 12		bit $12			bit ZPTemp4
2206	.14a5	30 0a		bmi $14b1		bmi _noE ; check negative flag
2207	.14a7	a4 0f		ldy $0f				ldy ZPTemp
2208	.14a9	88		dey				dey
2209	.14aa	20 34 14	jsr $1434			jsr tileIsWall
2210	.14ad	26 11		rol $11				rol ZPTemp3
2211	.14af	80 03		bra $14b4			bra DoIndexCheck
2212	.14b1					_noE
2213	.14b1	38		sec			sec ; make it 1 so it gets 0 later
2214	.14b2	26 11		rol $11			rol ZPTemp3
2215	.14b4					DoIndexCheck
2216	.14b4	a5 11		lda $11			lda ZPTemp3
2217	.14b6	49 0f		eor #$0f		eor #$0F ;
2218	.14b8	a8		tay			tay
2219	.14b9					BCDEYVALUECHECK
2220	.14b9	b9 d5 14	lda $14d5,y		lda BCDELUT,y
2221	.14bc	30 06		bmi $14c4		bmi _checkH
2222	.14be						_writeMap
2223	.14be	a4 0f		ldy $0f				ldy ZPTemp
2224	.14c0	99 00 a2	sta $a200,y			sta tileMapTemp,y
2225	.14c3	60		rts				rts
2226	.14c4					_checkH
2227	.14c4	a5 0f		lda $0f			lda ZPTemp
2228	.14c6	18		clc			clc
2229	.14c7	69 10		adc #$10		adc #kTileXCount
2230	.14c9	a8		tay			tay
2231	.14ca	20 34 14	jsr $1434		jsr tileIsWall
2232	.14cd	b0 02		bcs $14d1		bcs _HNotWall
2233	.14cf	a9 00		lda #$00			lda #kTiles.back
2234	.14d1					_HNotWall
2235	.14d1	a9 25		lda #$25		lda #kTiles.sideShadow
2236	.14d3	80 e9		bra $14be		bra _writeMap

2238	>14d5	00				BCDELUT	.byte $00							; 0000
2239	>14d6	25						.byte kTiles.sideShadow				; 0001
2240	>14d7	00						.byte $00								; 0010
2241	>14d8	25						.byte kTiles.sideShadow				; 0011
2242	>14d9	22						.byte kTiles.underHangStart		; 0100
2243	>14da	27						.byte kTiles.topLeftCorner			; 0101
2244	>14db	22						.byte kTiles.underHangStart		; 0110
2245	>14dc	25						.byte kTiles.sideShadow				; 0111
2246	>14dd	24						.byte kTiles.shadowOpenCorner		; 1000
2247	>14de	26						.byte kTiles.middlesideShadow		; 1001
2248	>14df	24						.byte kTiles.shadowOpenCorner		; 1010
2249	>14e0	25						.byte kTiles.sideShadow				; 1011
2250	>14e1	23						.byte kTiles.underHang				; 1100
2251	>14e2	27						.byte kTiles.topLeftCorner			; 1101
2252	>14e3	23						.byte kTiles.underHang				; 1110
2253	>14e4	27						.byte kTiles.topLeftCorner			; 1111

2255								; back
2256								;wall,wall1,wall2,wall3,wall4
2257								;spike,flower,fruit
2258								;key1,key2,key3,key4
2259								;shield,spring,potion,egg
2260								;exit,something,something,
2261								;diss + 13
2262	.14e5					toolToTileLUT
2263	>14e5	00					.byte 0
2264	>14e6	01 01 01 01 01				.byte 1,1,1,1,1
2265	>14eb	02 03 04				.byte 2,3,4
2266	>14ee	05 05 05 05				.byte 5,5,5,5
2267	>14f2	06 07 08 09				.byte 6,7,8,9
2268	>14f6	0a 0f 10				.byte 10,15,16
2269	>14f9	11 12 13 14 15 16 17 18			.byte 17,18,19,20,21,22,23,24,25,26,27,28,29,30 ; diss cont
	>1501	19 1a 1b 1c 1d 1e
2270	>1507	1f 20 21 22 23 24			.byte 31,32,33,34,35,36

2272	.150d					kTiles .block
2273	=0						back = 0

2275	=1						wall = 1
2276	=2						wall1 = 2
2277						;	wall2 = 3
2278						;	wall3 = 4
2279	=5						wall4 = 5

2281	=6						spike = 6
2282	=7						flower = 7
2283	=8						fruit = 8

2285	=9						key1 = 9
2286	=10						key2 = 10
2287	=11						key3 = 11
2288	=12						key4 = 12

2290	=13						shield = 13
2291	=14						spring = 14
2292	=15						potion = 15
2293	=16						egg = 16

2295	=17						exit = 17
2296	=18						player = 18

2298	=19						pipe = 19
2299	=20						diss = 20
2300	=33						dissNoColide = 33

2302	=34						underHangStart = 34
2303	=35						underHang = 35
2304	=36						shadowOpenCorner = 36
2305	=37						sideShadow = 37
2306	=38						middlesideShadow = 38
2307	=39						topLeftCorner = 39
2308	=37						intermissionOldWall = 37; 40 37 is the looked up value
2309						.bend
2310	=10					kDoorClosed = 10
2311	=14					kDoorOpen = 14

2313	=7					kKeyToWallDelta = kTiles.key1 - kTiles.wall1
2314						; }}}
2315						; {{{
2316	.150d					plotTileMap
2317	.150d	78		sei				sei
2318	.150e	86 06		stx $06				stx Pointer1.lo
2319	.1510	84 07		sty $07				sty Pointer1.hi
2320	.1512	9c 25 9f	stz $9f25			stz kVERA.CTRL
2321	.1515	a9 10		lda #$10			lda #`kVRAM.gameScreen | kVERA.inc_1
2322	.1517	8d 22 9f	sta $9f22			sta kVERA.ADDR_Hi
2323	.151a	a9 0a		lda #$0a			lda #kDoorClosed
2324	.151c	8d 23 a0	sta $a023			sta LevelData.exitFrame
2325	.151f	a9 00		lda #$00			lda # <kVRAM.gameScreen
2326	.1521	85 08		sta $08				sta Pointer2
2327	.1523	a9 10		lda #$10			lda # >kVRAM.gameScreen
2328	.1525	85 09		sta $09				sta Pointer2+1
2329	.1527	a9 0c		lda #$0c			lda #kTileYCount ; num rows
2330	.1529	48		pha				pha
2331	.152a	a0 00		ldy #$00	_pltY	ldy #00 ; num cols
2332	.152c	98		tya				tya
2333	.152d	48		pha				pha
2334	.152e	b1 06		lda ($06),y	_pltX	lda (Pointer1),y ; tile num
2335	.1530	aa		tax				tax
2336	.1531	bd e5 14	lda $14e5,x			lda toolToTileLUT,x ; convert map to actual tile
2337	.1534	20 70 15	jsr $1570			jsr renderTile
2338	.1537	18		clc				clc
2339	.1538	a5 08		lda $08				lda Pointer2.lo
2340	.153a	69 04		adc #$04			adc #4
2341	.153c	85 08		sta $08				sta Pointer2.lo
2342	.153e	90 02		bcc $1542			bcc +
2343	.1540	e6 09		inc $09					inc Pointer2.hi
2344	.1542	68		pla			+	pla
2345	.1543	18		clc				clc
2346	.1544	69 01		adc #$01			adc #1
2347	.1546	48		pha				pha
2348	.1547	a8		tay				tay
2349	.1548	c0 10		cpy #$10			cpy #kTileXCount
2350	.154a	d0 e2		bne $152e			bne _pltX
2351	.154c	68		pla				pla
2352	.154d	18		clc				clc
2353	.154e	a5 06		lda $06				lda Pointer1.lo
2354	.1550	69 10		adc #$10			adc #kTileXCount
2355	.1552	85 06		sta $06				sta Pointer1.lo
2356	.1554	a5 07		lda $07				lda Pointer1.hi
2357	.1556	69 00		adc #$00			adc #00
2358	.1558	85 07		sta $07				sta Pointer1.hi
2359	.155a	68		pla				pla
2360	.155b	38		sec				sec
2361	.155c	e9 01		sbc #$01			sbc #1
2362	.155e	f0 0e		beq $156e			beq _exit
2363	.1560	48		pha				pha
2364	.1561	18		clc				clc
2365	.1562	a5 08		lda $08				lda Pointer2.lo
2366								; so we are at the end of the first line so +32
2367								; we need to get to the start of the line 2 below
2368								; so we need to move to the next line, 64 wide * 2
2369								; so + 128, however the screen is 40 visible not 32
2370								; so we need to add * more chars * 2 so + 16
2371								; but then the screen is not 40 wide its 64 wide
2372								; so we need to also add the extra stride which is
2373								; 128-80 (64-40*2)
2374	.1564	69 c0		adc #$c0			adc #128+16+128-80 ;48
2375	.1566	85 08		sta $08				sta Pointer2.lo
2376	.1568	90 02		bcc $156c			bcc +
2377	.156a	e6 09		inc $09					inc Pointer2.hi
2378	.156c	80 bc		bra $152a	+		gra _pltY
2379	.156e					_exit
2380	.156e	58		cli			cli
2381	.156f	60		rts			rts

2383						; a = tile num, Pointer2 = Screen, Pointer 3 = CRAM
2384	.1570					renderTile
2385	.1570	85 0c		sta $0c				sta Pointer4
2386	.1572	a5 08		lda $08				lda Pointer2.lo
2387	.1574	8d 20 9f	sta $9f20			sta kVERA.ADDR_Lo
2388	.1577	a5 09		lda $09				lda Pointer2.hi
2389	.1579	8d 21 9f	sta $9f21			sta kVERA.ADDR_Mid ; set the start

2391	.157c	64 0d		stz $0d				stz Pointer4+1
2392	.157e	06 0c		asl $0c				asl Pointer4
2393	.1580	26 0d		rol $0d				rol Pointer4+1
2394	.1582	06 0c		asl $0c				asl Pointer4	 ; tile num x 4
2395	.1584	26 0d		rol $0d				rol Pointer4+1
2396								; covert to tiles offset
2397	.1586	18		clc				clc
2398	.1587	a5 0c		lda $0c				lda Pointer4
2399	.1589	69 b6		adc #$b6			adc # <fileTiles
2400	.158b	85 0c		sta $0c				sta Pointer4
2401	.158d	a5 0d		lda $0d				lda Pointer4+1
2402	.158f	69 53		adc #$53			adc # >fileTiles
2403	.1591	85 0d		sta $0d				sta Pointer4+1
2404	.1593	b2 0c		lda ($0c)			lda (Pointer4)
2405	.1595	8d 23 9f	sta $9f23			sta kVERA.DATA_0
2406	.1598	9c 23 9f	stz $9f23			stz kVERA.DATA_0 ; the CRAM value
2407	.159b	a0 01		ldy #$01			ldy #1
2408	.159d	b1 0c		lda ($0c),y			lda (Pointer4),y
2409	.159f	8d 23 9f	sta $9f23			sta kVERA.DATA_0
2410	.15a2	9c 23 9f	stz $9f23			stz kVERA.DATA_0 ; the CRAM value
2411	.15a5	c8		iny				iny
2412	.15a6	ad 20 9f	lda $9f20			lda kVERA.ADDR_Lo
2413	.15a9	18		clc				clc
2414	.15aa	69 7c		adc #$7c			adc #128-4 ; next line - 1 char
2415	.15ac	8d 20 9f	sta $9f20			sta kVERA.ADDR_Lo
2416	.15af	90 03		bcc $15b4			bcc +
2417	.15b1	ee 21 9f	inc $9f21				inc kVERA.ADDR_Mid
2418	.15b4					+
2419	.15b4	b1 0c		lda ($0c),y			lda (Pointer4),y
2420	.15b6	8d 23 9f	sta $9f23			sta kVERA.DATA_0
2421	.15b9	9c 23 9f	stz $9f23			stz kVERA.DATA_0 ; the CRAM value
2422	.15bc	c8		iny				iny
2423	.15bd	b1 0c		lda ($0c),y			lda (Pointer4),y
2424	.15bf	8d 23 9f	sta $9f23			sta kVERA.DATA_0
2425	.15c2	9c 23 9f	stz $9f23			stz kVERA.DATA_0 ; the CRAM value
2426	.15c5	60		rts				rts

2428	.15c6					scanJoystick
2429	.15c6	a2 04		ldx #$04			ldx #4
2430	.15c8	bd 00 a0	lda $a000,x	-		lda joyLeft,x
2431	.15cb	9d 05 a0	sta $a005,x			sta oldJoyLeft,x
2432	.15ce	a9 00		lda #$00			lda #0
2433	.15d0	9d 00 a0	sta $a000,x			sta joyLeft,x
2434	.15d3	ca		dex				dex
2435	.15d4	10 f2		bpl $15c8			bpl -
2436	.15d6	a2 01		ldx #$01			ldx #1
2437	.15d8	ad bc 02	lda $02bc			lda JOY1
2438	.15db	4a		lsr a				lsr a
2439	.15dc	90 4e		bcc $162c			bcc _joyRight
2440	.15de	4a		lsr a					lsr a
2441	.15df	90 46		bcc $1627				bcc _joyLeft
2442	.15e1					_checkUD
2443	.15e1	4a		lsr a				lsr a
2444	.15e2	90 3d		bcc $1621			bcc _joyDown
2445	.15e4	4a		lsr a					lsr a
2446	.15e5	90 30		bcc $1617				bcc _joyUp
2447	.15e7					_checkFire
2448	.15e7	4a		lsr a				lsr a; start
2449	.15e8	4a		lsr a				lsr a; select
2450	.15e9	4a		lsr a				lsr a ; B
2451	.15ea	90 30		bcc $161c			bcc _joyB
2452	.15ec					_checkA
2453	.15ec	4a		lsr a				lsr a ; A
2454	.15ed	b0 03		bcs $15f2			bcs _joyEnd
2455	.15ef	8e 04 a0	stx $a004				stx joyFire
2456	.15f2					_joyEnd
2457	.15f2	ad 07 a0	lda $a007			lda oldJoyUp
2458	.15f5	4d 02 a0	eor $a002			eor joyUp
2459	.15f8	2d 02 a0	and $a002			and joyUp
2460	.15fb	8d 0a a0	sta $a00a			sta joyUpStart
2461	.15fe	ad 02 a0	lda $a002			lda joyUp
2462	.1601	4d 07 a0	eor $a007			eor OldJoyUp
2463	.1604	2d 07 a0	and $a007			and OldJoyUp
2464	.1607	8d 0b a0	sta $a00b			sta joyUpStop
2465	.160a	ad 09 a0	lda $a009			lda oldJoyFire
2466	.160d	4d 04 a0	eor $a004			eor joyFire
2467	.1610	2d 04 a0	and $a004			and joyFire
2468	.1613	8d 0c a0	sta $a00c			sta joyFireEvent
2469	.1616	60		rts				rts

2471	.1617					_joyUp
2472	.1617	8e 02 a0	stx $a002			stx joyUp
2473	.161a	90 cb		bcc $15e7			gcc _checkFire
2474	.161c					_joyB
2475	.161c	8e 02 a0	stx $a002			stx joyUp
2476	.161f	90 cb		bcc $15ec			gcc _checkA

2478	.1621					_joyDown
2479	.1621	8e 03 a0	stx $a003			stx joyDown
2480	.1624	4a		lsr a				lsr a ; skip up bit
2481	.1625	80 c0		bra $15e7			bra _checkFire

2483	.1627					_joyLeft
2484	.1627	8e 00 a0	stx $a000			stx joyLeft
2485	.162a	90 b5		bcc $15e1			gcc _checkUD

2487	.162c					_joyRight
2488	.162c	8e 01 a0	stx $a001			stx joyRight
2489	.162f	4a		lsr a				lsr a; skip left bit
2490	.1630	80 af		bra $15e1			bra _checkUD


2493	>1632	02 02 02 04 00 e8 0c 04		CollisionBoxesX .byte 02,02,02,04,00,$e8,12,04 ; $e8 = -24
2494	>163a	0d 0d 0d 10 30 30 01 10		CollisionBoxesW .byte 13,13,13,16,48, 48,01,16
2495	>1642	02 02 00 04 00 0c 0c 01		CollisionBoxesY .byte 02,02,00,04,00, 12,12,01
2496	>164a	0c 10 14 10 0c 1e 01 08		CollisionBoxesH .byte 12,16,20,16,12, 30,01,08


2499	.1652					convertXSingleByteEntX
2500	.1652	bd 30 a3	lda $a330,x		lda mplexBuffer.xpos,x
2501						; this should not be needed on cx16
2502						; one the 64 I got arround the 24-280, by using the fact the player
2503						; can only be on screen on the X and must be stopped at 256 visible pixels
2504						; thus I could slide the 9 bits down to 8 to make life easier
2505						; the cx16 doesn't have a side border so 0 is the first visible pixel
2506	.1655	60		rts			rts

2508	.1656					newCollision
2509	.1656	a6 1d		ldx $1d			ldx CollideSpriteToCheck
2510	.1658	a4 1e		ldy $1e			ldy CollideSpriteBoxIndex
2511							; calc the final Xs
2512	.165a	20 52 16	jsr $1652		jsr convertXSingleByteEntX
2513	.165d	18		clc			clc
2514	.165e	79 32 16	adc $1632,y		adc CollisionBoxesX,y
2515	.1661	6d f5 a1	adc $a1f5		adc checkSpriteToCharData.xDeltaCheck
2516	.1664	85 27		sta $27			sta CollideInternalSprTLX
2517	.1666	18		clc			clc
2518	.1667	79 3a 16	adc $163a,y		adc CollisionBoxesW,y
2519	.166a	85 28		sta $28			sta CollideInternalSprBRX
2520							; calc the final Ys
2521	.166c	bd 70 a3	lda $a370,x		lda mplexBuffer.ypos,x
2522	.166f	18		clc			clc
2523	.1670	79 42 16	adc $1642,y		adc CollisionBoxesY,y
2524	.1673	6d f6 a1	adc $a1f6		adc checkSpriteToCharData.yDeltaCheck
2525	.1676	20 d6 16	jsr $16d6		jsr ClipY
2526	.1679	85 29		sta $29			sta CollideInternalSprTLY
2527	.167b	18		clc			clc
2528	.167c	79 4a 16	adc $164a,y		adc CollisionBoxesH,y
2529	.167f	20 d6 16	jsr $16d6		jsr ClipY
2530	.1682	85 2a		sta $2a			sta CollideInternalSprBRY
2531							; calc the tile index
2532	.1684	a2 01		ldx #$01		ldx #1
2533	.1686	b5 27		lda $27,x	-	lda CollideInternalSprTLX,x
2534	.1688	4a		lsr a			lsr a
2535	.1689	4a		lsr a			lsr a
2536	.168a	4a		lsr a			lsr a
2537	.168b	4a		lsr a			lsr a
2538	.168c	95 2b		sta $2b,x		sta CollideInternalTTLX,x
2539	.168e	ca		dex			dex
2540	.168f	10 f5		bpl $1686		bpl -
2541	.1691	a5 2b		lda $2b			lda CollideInternalTTLX
2542	.1693	c5 2c		cmp $2c			cmp CollideInternalTBRX ; make sure right has not wrapped and is not < left
2543	.1695	90 02		bcc $1699		bcc +
2544	.1697	85 2c		sta $2c				sta CollideInternalTBRX
2545	.1699					+
2546	.1699	a5 29		lda $29			lda CollideInternalSprTLY
2547	.169b	29 f0		and #$f0		and #$f0
2548	.169d	85 2d		sta $2d			sta CollideInternalTTLY
2549	.169f	a5 2a		lda $2a			lda CollideInternalSprBRY
2550	.16a1	29 f0		and #$f0		and #$f0
2551	.16a3	85 2e		sta $2e			sta CollideInternalTBRY
2552							; covert the tile X,Y into a the index and pull Char
2553	.16a5	a5 2d		lda $2d			lda CollideInternalTTLY
2554	.16a7	05 2b		ora $2b			ora CollideInternalTTLX
2555	.16a9	85 1f		sta $1f			sta CollideCharTLI
2556	.16ab	aa		tax			tax
2557	.16ac	bd 00 a2	lda $a200,x		lda tileMapTemp,x
2558	.16af	85 20		sta $20			sta CollideCharTLC

2560	.16b1	a5 2d		lda $2d			lda CollideInternalTTLY
2561	.16b3	05 2c		ora $2c			ora CollideInternalTBRX
2562	.16b5	85 21		sta $21			sta CollideCharTRI
2563	.16b7	aa		tax			tax
2564	.16b8	bd 00 a2	lda $a200,x		lda tileMapTemp,x
2565	.16bb	85 22		sta $22			sta CollideCharTRC

2567	.16bd	a5 2e		lda $2e			lda CollideInternalTBRY
2568	.16bf	05 2b		ora $2b			ora CollideInternalTTLX
2569	.16c1	85 23		sta $23			sta CollideCharBLI
2570	.16c3	aa		tax			tax
2571	.16c4	bd 00 a2	lda $a200,x		lda tileMapTemp,x
2572	.16c7	85 24		sta $24			sta CollideCharBLC

2574	.16c9	a5 2e		lda $2e			lda CollideInternalTBRY
2575	.16cb	05 2c		ora $2c			ora CollideInternalTBRX
2576	.16cd	85 25		sta $25			sta CollideCharBRI
2577	.16cf	aa		tax			tax
2578	.16d0	bd 00 a2	lda $a200,x		lda tileMapTemp,x
2579	.16d3	85 26		sta $26			sta CollideCharBRC
2580	.16d5	60		rts			rts

2582	.16d6					ClipY
2583	.16d6	c9 d0		cmp #$d0		cmp #208
2584	.16d8	b0 01		bcs $16db		bcs +
2585	.16da	60		rts				rts ; 0 - 192 = safe 192-208 = shared 16 off screen
2586	.16db	c9 f0		cmp #$f0	+	cmp #240
2587	.16dd	90 03		bcc $16e2		bcc _bottomOfScreen
2588								; top of screen
2589	.16df	a9 c1		lda #$c1			lda #193
2590	.16e1	60		rts				rts
2591	.16e2					_bottomOfScreen
2592	.16e2	a9 d0		lda #$d0		lda #208
2593	.16e4	60		rts			rts

2595	.16e5					checkSpriteToCharCollision
2596	.16e5	ad f6 a1	lda $a1f6		lda checkSpriteToCharData.yDeltaCheck
2597	.16e8	8d f8 a1	sta $a1f8		sta checkSpriteToCharData.yDeltaBackup
2598	.16eb	ad f5 a1	lda $a1f5		lda checkSpriteToCharData.xDeltaCheck
2599	.16ee	8d f7 a1	sta $a1f7		sta checkSpriteToCharData.xDeltaBackup
2600	.16f1	9c f5 a1	stz $a1f5		stz checkSpriteToCharData.xDeltaCheck
2601	.16f4	64 1d		stz $1d			stz CollideSpriteToCheck
2602	.16f6	64 1e		stz $1e			stz CollideSpriteBoxIndex
2603	.16f8	20 59 17	jsr $1759		jsr CSTCCY
2604	.16fb	a5 23		lda $23			lda CollideCharBLI
2605	.16fd	85 15		sta $15			sta ActiveTileIndex
2606	.16ff	a5 24		lda $24			lda CollideCharBLC
2607	.1701	85 16		sta $16			sta ActiveTile
2608	.1703	20 0a 18	jsr $180a		jsr checkOnDissTile
2609	.1706	a5 23		lda $23			lda CollideCharBLI
2610	.1708	c5 25		cmp $25			cmp CollideCharBRI
2611	.170a	f0 0b		beq $1717		beq _otherIsSame
2612	.170c	a5 25		lda $25				lda CollideCharBRI
2613	.170e	85 15		sta $15				sta ActiveTileIndex
2614	.1710	a5 26		lda $26				lda CollideCharBRC
2615	.1712	85 16		sta $16				sta ActiveTile
2616	.1714	20 0a 18	jsr $180a			jsr checkOnDissTile
2617	.1717					_otherIsSame
2618	.1717	ad f7 a1	lda $a1f7		lda checkSpriteToCharData.xDeltaBackup
2619	.171a	8d f5 a1	sta $a1f5		sta checkSpriteToCharData.xDeltaCheck
2620	.171d	9c f6 a1	stz $a1f6		stz checkSpriteToCharData.yDeltaCheck
2621	.1720	20 c6 17	jsr $17c6		jsr CSTCCX
2622	.1723	ad f8 a1	lda $a1f8		lda checkSpriteToCharData.yDeltaBackup
2623	.1726	8d f6 a1	sta $a1f6		sta checkSpriteToCharData.yDeltaCheck
2624	.1729	a6 1f		ldx $1f			ldx CollideCharTLI
2625	.172b	a5 20		lda $20			lda CollideCharTLC
2626	.172d	20 5c 18	jsr $185c		jsr checkActionTile
2627	.1730	a5 21		lda $21			lda CollideCharTRI
2628	.1732	c5 1f		cmp $1f			cmp CollideCharTLI
2629	.1734	f0 06		beq $173c		beq _skipTR
2630	.1736	aa		tax				tax
2631	.1737	a5 22		lda $22				lda CollideCharTRC
2632	.1739	20 5c 18	jsr $185c			jsr checkActionTile
2633	.173c					_skipTR
2634	.173c	a5 23		lda $23			lda CollideCharBLI
2635	.173e	c5 1f		cmp $1f			cmp CollideCharTLI
2636	.1740	f0 06		beq $1748		beq _skipBL
2637	.1742	aa		tax				tax
2638	.1743	a5 24		lda $24				lda CollideCharBLC
2639	.1745	20 5c 18	jsr $185c			jsr checkActionTile
2640	.1748					_skipBL
2641	.1748	a5 25		lda $25			lda CollideCharBRI
2642	.174a	c5 21		cmp $21			cmp CollideCharTRI
2643	.174c	f0 0a		beq $1758		beq _skipBR
2644	.174e	c5 23		cmp $23				cmp CollideCharBLI
2645	.1750	f0 06		beq $1758			beq _skipBR
2646	.1752	aa		tax					tax
2647	.1753	a5 26		lda $26					lda CollideCharBRC
2648	.1755	20 5c 18	jsr $185c				jsr checkActionTile
2649	.1758					_skipBR
2650	.1758	60		rts			rts

2652	.1759					CSTCCY
2653	.1759	a2 00		ldx #$00		ldx #0
2654	.175b	86 0f		stx $0f			stx ZPTemp
2655	.175d	86 10		stx $10			stx ZPTemp2
2656	.175f	86 11		stx $11			stx ZPTemp3
2657	.1761	86 12		stx $12			stx ZPTemp4
2658	.1763	a0 00		ldy #$00		ldy #0
2659	.1765	20 56 16	jsr $1656		jsr newCollision
2660	.1768	a5 20		lda $20			lda CollideCharTLC
2661	.176a	20 c5 1a	jsr $1ac5		jsr checkSolidTile
2662	.176d	26 0f		rol $0f			rol ZPTemp
2663	.176f	a5 22		lda $22			lda CollideCharTRC
2664	.1771	20 c5 1a	jsr $1ac5		jsr checkSolidTile
2665	.1774	26 10		rol $10			rol ZPTemp2
2666	.1776	a5 24		lda $24			lda CollideCharBLC
2667	.1778	20 c5 1a	jsr $1ac5		jsr checkSolidTile
2668	.177b	26 11		rol $11			rol ZPTemp3
2669	.177d	a5 26		lda $26			lda CollideCharBRC
2670	.177f	20 c5 1a	jsr $1ac5		jsr checkSolidTile
2671	.1782	26 12		rol $12			rol ZPTemp4
2672	.1784	ad f6 a1	lda $a1f6		lda checkSpriteToCharData.yDeltaCheck
2673	.1787	10 27		bpl $17b0		bpl _checkDown
2674							; check up
2675	.1789	a5 0f		lda $0f			lda ZPTemp
2676	.178b	05 10		ora $10			ora ZPTemp2
2677	.178d	f0 36		beq $17c5		beq _exit
2678							; abort jump
2679	.178f	ad 40 a0	lda $a040		lda PlayerData.hitBubbleNum
2680	.1792	f0 04		beq $1798		beq _startFall
2681	.1794	9c f8 a1	stz $a1f8			stz checkSpriteToCharData.yDeltaBackup
2682	.1797	60		rts				rts
2683	.1798					_startFall
2684	.1798	a9 01		lda #$01		lda #1
2685	.179a	8d 2b a0	sta $a02b		sta PlayerData.isFalling
2686	.179d	1a		inc a			inc a ;  #2
2687	.179e	8d 2e a0	sta $a02e		sta PlayerData.yDeltaAccum
2688	.17a1	8d 2f a0	sta $a02f		sta PlayerData.yDeltaAccum+1
2689	.17a4	60		rts			rts
2690	.17a5					_onGround
2691	.17a5	9c f8 a1	stz $a1f8		stz checkSpriteToCharData.yDeltaBackup
2692	.17a8	20 10 10	jsr $1010		jsr enterOnGround
2693	.17ab	9c f6 a1	stz $a1f6		stz checkSpriteToCharData.yDeltaCheck
2694	.17ae	80 15		bra $17c5		bra _exit
2695	.17b0					_checkDown
2696	.17b0	ad 40 a0	lda $a040		lda PlayerData.hitBubbleNum
2697	.17b3	d0 10		bne $17c5		bne _exit
2698	.17b5	a5 11		lda $11				lda ZPTemp3
2699	.17b7	05 12		ora $12				ora ZPTemp4
2700	.17b9	d0 ea		bne $17a5			bne _onGround
2701	.17bb	ae 29 a0	ldx $a029				ldx PlayerData.onGround
2702	.17be	9c 29 a0	stz $a029				stz PlayerData.onGround
2703	.17c1	e0 01		cpx #$01				cpx #1
2704	.17c3	f0 d3		beq $1798				beq _startFall
2705	.17c5					_exit
2706	.17c5	60		rts			rts

2708	.17c6					CSTCCX
2709	.17c6	a2 00		ldx #$00		ldx #0
2710	.17c8	86 0f		stx $0f			stx ZPTemp
2711	.17ca	86 10		stx $10			stx ZPTemp2
2712	.17cc	86 11		stx $11			stx ZPTemp3
2713	.17ce	86 12		stx $12			stx ZPTemp4
2714	.17d0	a0 00		ldy #$00		ldy #0
2715	.17d2	20 56 16	jsr $1656		jsr newCollision
2716	.17d5	a5 20		lda $20			lda CollideCharTLC
2717	.17d7	20 c5 1a	jsr $1ac5		jsr checkSolidTile
2718	.17da	26 0f		rol $0f			rol ZPTemp
2719	.17dc	a5 22		lda $22			lda CollideCharTRC
2720	.17de	20 c5 1a	jsr $1ac5		jsr checkSolidTile
2721	.17e1	26 10		rol $10			rol ZPTemp2
2722	.17e3	a5 24		lda $24			lda CollideCharBLC
2723	.17e5	20 c5 1a	jsr $1ac5		jsr checkSolidTile
2724	.17e8	26 11		rol $11			rol ZPTemp3
2725	.17ea	a5 26		lda $26			lda CollideCharBRC
2726	.17ec	20 c5 1a	jsr $1ac5		jsr checkSolidTile
2727	.17ef	26 12		rol $12			rol ZPTemp4
2728	.17f1	ad f5 a1	lda $a1f5		lda checkSpriteToCharData.xDeltaCheck
2729	.17f4	f0 13		beq $1809		beq _exit
2730	.17f6	10 0b		bpl $1803		bpl _checkRight
2731								; left
2732	.17f8	a5 0f		lda $0f				lda ZPtemp
2733	.17fa	05 11		ora $11				ora ZPtemp3
2734	.17fc	f0 0b		beq $1809			beq _exit
2735	.17fe					_noX
2736	.17fe	9c f5 a1	stz $a1f5		stz checkSpriteToCharData.xDeltaCheck
2737	.1801	80 06		bra $1809		bra _exit
2738	.1803					_checkRight
2739	.1803	a5 10		lda $10			lda ZPtemp2
2740	.1805	05 12		ora $12			ora ZPtemp4
2741	.1807	d0 f5		bne $17fe		bne _noX
2742	.1809					_exit
2743	.1809	60		rts			rts


2746	.180a					checkOnDissTile
2747	.180a	ad 29 a0	lda $a029		lda PlayerData.onGround
2748	.180d	d0 01		bne $1810		bne _c
2749	.180f					_exit
2750	.180f	60		rts			rts
2751							; get the tile below the player
2752	.1810	ad 43 a0	lda $a043	_c	lda TickDowns.dissBlocks
2753	.1813	d0 fa		bne $180f		bne _exit
2754	.1815	a5 16		lda $16				lda ActiveTile
2755	.1817	c9 14		cmp #$14			cmp #kTiles.diss
2756	.1819	90 f4		bcc $180f			bcc _exit
2757	.181b	c9 21		cmp #$21				cmp #kTiles.dissNoColide
2758	.181d	b0 f0		bcs $180f				bcs _exit
2759	.181f	a9 08		lda #$08					lda #kTimers.dissBlocksValue
2760	.1821	8d 43 a0	sta $a043					sta TickDowns.dissBlocks
2761	.1824	a6 15		ldx $15						ldx ActiveTileIndex
2762	.1826	fe 00 a2	inc $a200,x					inc tileMapTemp,x
2763	.1829	bd 00 a2	lda $a200,x					lda tileMapTemp,x
2764	.182c	c9 20		cmp #$20					cmp #kTiles.dissNoColide-1
2765	.182e	08		php						php
2766	.182f	20 1d 1a	jsr $1a1d					jsr pltSingleTileNew
2767	.1832	28		plp						plp
2768	.1833	d0 da		bne $180f					bne _exit
2769	.1835					CheckForShadowPlots
2770	.1835	a2 01		ldx #$01		ldx #1
2771	.1837	20 41 18	jsr $1841		jsr _checkRemoveTile
2772	.183a	a2 10		ldx #$10		ldx #16
2773	.183c	20 41 18	jsr $1841		jsr _checkRemoveTile
2774	.183f	a2 11		ldx #$11		ldx #17
2775						;	jmp _checkRemoveTile
2776	.1841					_checkRemoveTile
2777	.1841	86 0f		stx $0f			stx ZPTemp
2778	.1843	a5 15		lda $15			lda ActiveTileIndex
2779	.1845	48		pha			pha
2780	.1846	18		clc			clc
2781	.1847	65 0f		adc $0f			adc ZPTemp
2782	.1849	c9 c0		cmp #$c0		cmp #kLevelSizeMax
2783	.184b	b0 0b		bcs $1858		bcs _exit2
2784	.184d	85 15		sta $15				sta ActiveTileIndex
2785	.184f	a8		tay				tay
2786	.1850	20 45 14	jsr $1445			jsr tileIsSafeToChange
2787	.1853	90 03		bcc $1858			bcc _exit2
2788	.1855	20 0b 1a	jsr $1a0b				jsr clearTileNew
2789	.1858					_exit2
2790	.1858	68		pla			pla
2791	.1859	85 15		sta $15			sta ActiveTileIndex
2792	.185b	60		rts			rts

2794	.185c					checkActionTile
2795	.185c	85 16		sta $16			sta ActiveTile ; for later
2796	.185e	86 15		stx $15			stx ActiveTileIndex ; for later
2797	.1860	a0 00		ldy #$00		ldy #0
2798	.1862	d9 76 18	cmp $1876,y	-	cmp TileFuncLookup,y
2799	.1865	f0 06		beq $186d		beq _found
2800	.1867	c8		iny				iny
2801	.1868	c0 0c		cpy #$0c			cpy # size(TileFuncLookup)
2802	.186a	d0 f6		bne $1862			bne -
2803	.186c	60		rts				rts

2805	.186d					_found
2806	.186d	b9 8e 18	lda $188e,y		lda TileFuncLUTHi,y
2807	.1870	48		pha			pha
2808	.1871	b9 82 18	lda $1882,y		lda TileFuncLUTLo,y
2809	.1874	48		pha			pha
2810	.1875	60		rts			rts

2812	>1876	08 07 09 0a 0b 0c 06 0e		TileFuncLookup .byte kTiles.fruit,kTiles.flower,kTiles.key1,kTiles.key2,kTiles.key3,kTiles.key4,kTiles.spike,kTiles.spring,kTiles.potion,kTiles.shield,kTiles.exit,kTiles.egg
	>187e	0f 0d 11 10
2813	>1882	99 a6 c6 c6 c6 c6 f5 fb		TileFuncLUTLo .byte <fruitFunc-1 ,<flowerFunc-1,<keyFunc-1 ,<keyFunc-1 ,<keyFunc-1 ,<keyFunc-1 ,<spikeFunc-1,<springFunc-1,<potionFunc-1,<shildFunction-1,<exitFunc-1,<eggFunc-1
	>188a	0c 33 62 78
2814	>188e	18 18 18 18 18 18 18 18		TileFuncLUTHi .byte >fruitFunc-1 ,>flowerFunc-1,>keyFunc-1 ,>keyFunc-1 ,>keyFunc-1 ,>keyFunc-1 ,>spikeFunc-1,>springFunc-1,>potionFunc-1,>shildFunction-1,>exitFunc-1,>eggFunc-1
	>1896	19 19 19 19

2816	.189a					fruitFunc
2817	.189a	20 0b 1a	jsr $1a0b		jsr clearTileNew
2818	.189d	a9 00		lda #$00		lda #kScoreIndex.Fruit
2819	.189f	20 53 1a	jsr $1a53		jsr giveScore
2820	.18a2	a2 02		ldx #$02		ldx #kSFX.collect
2821	.18a4	4c ea 19	jmp $19ea		jmp playSFX
2822							;rts ; above is now jmp

2824	.18a7					flowerFunc
2825	.18a7	20 0b 1a	jsr $1a0b		jsr clearTileNew
2826	.18aa	a9 00		lda #$00		lda #kScoreIndex.fruit
2827	.18ac	20 53 1a	jsr $1a53		jsr giveScore
2828	.18af	a2 00		ldx #$00		ldx #kSFX.flower
2829	.18b1	20 ea 19	jsr $19ea		jsr playSFX
2830	.18b4	ee 0e a0	inc $a00e		inc GameData.flowers
2831	.18b7	ad 0e a0	lda $a00e		lda GameData.flowers
2832	.18ba	c9 08		cmp #$08		cmp #8
2833	.18bc	d0 06		bne $18c4		bne _exit
2834	.18be	9c 0e a0	stz $a00e			stz GameData.flowers
2835	.18c1	20 83 19	jsr $1983			jsr awardLife
2836	.18c4					_exit
2837	.18c4	4c 83 1b	jmp $1b83		jmp pltFlowers

2839	.18c7					keyFunc
2840	.18c7	20 0b 1a	jsr $1a0b		jsr clearTileNew		; remove it
2841	.18ca	a9 02		lda #$02		lda #kScoreIndex.key
2842	.18cc	20 53 1a	jsr $1a53		jsr giveScore
2843	.18cf	ce 1e a0	dec $a01e		dec LevelData.numKeys
2844	.18d2	a5 16		lda $16			lda ActiveTile
2845	.18d4	20 fa 19	jsr $19fa		jsr countTempMapTile	; do we have any more of these keys still
2846	.18d7	d0 08		bne $18e1		bne _done				; yes
2847	.18d9	a5 16		lda $16				lda ActiveTile
2848	.18db	38		sec				sec
2849	.18dc	e9 07		sbc #$07			sbc # kKeyToWallDelta
2850	.18de	20 33 1a	jsr $1a33			jsr removeAllTilesOf
2851	.18e1					_done
2852	.18e1	ad 1e a0	lda $a01e		lda LevelData.numKeys
2853	.18e4	c9 00		cmp #$00		cmp #0
2854	.18e6	f0 05		beq $18ed		beq _changeDoor
2855	.18e8	a2 02		ldx #$02			ldx #kSFX.collect
2856	.18ea	4c ea 19	jmp $19ea			jmp playSFX
2857							; rts ; above is now jmp
2858	.18ed					_changeDoor
2859	.18ed	a9 01		lda #$01		lda #1
2860	.18ef	8d 1c a0	sta $a01c		sta GameData.exitOpen
2861	.18f2	aa		tax			tax ; ldx #kSFX.door ;=1
2862	.18f3	4c ea 19	jmp $19ea		jmp playSFX
2863							; rts ; above is now jmp

2865	.18f6					spikeFunc
2866	.18f6	a9 01		lda #$01		lda #1
2867	.18f8	8d 25 a0	sta $a025		sta PlayerData.dead
2868	.18fb	60		rts			rts

2870	.18fc					springFunc
2871	.18fc	20 0b 1a	jsr $1a0b		jsr clearTileNew
2872	.18ff	a2 05		ldx #$05		ldx #kSFX.powerup
2873	.1901	20 ea 19	jsr $19ea		jsr playSFX
2874	.1904	a9 01		lda #$01		lda #1
2875	.1906	8d 28 a0	sta $a028		sta PlayerData.hasSpring
2876	.1909	8d 27 a0	sta $a027		sta PlayerData.canFloat
2877	.190c	60		rts			rts

2879	.190d					potionFunc
2880	.190d	20 0b 1a	jsr $1a0b		jsr clearTileNew
2881	.1910	a2 00		ldx #$00		ldx #0
2882	.1912	86 15		stx $15			stx ActiveTileIndex
2883	.1914					_loop
2884	.1914	bd 00 a2	lda $a200,x		lda tileMapTemp,x
2885	.1917	c9 06		cmp #$06		cmp #kTiles.spike
2886	.1919	d0 08		bne $1923		bne _next
2887	.191b	a9 08		lda #$08			lda #kTiles.fruit
2888	.191d	9d 00 a2	sta $a200,x			sta tileMapTemp,x
2889	.1920	20 1d 1a	jsr $1a1d			jsr pltSingleTileNew
2890	.1923					_next
2891	.1923	a5 15		lda $15			lda ActiveTileIndex
2892	.1925	18		clc			clc
2893	.1926	69 01		adc #$01		adc #1
2894	.1928	85 15		sta $15			sta ActiveTileIndex
2895	.192a	aa		tax			tax
2896	.192b	c9 c0		cmp #$c0		cmp #kLevelSizeMax
2897	.192d	d0 e5		bne $1914		bne _loop
2898	.192f	a2 05		ldx #$05		ldx #kSFX.powerup
2899	.1931	4c ea 19	jmp $19ea		jmp playSFX
2900							;rts ; above is now jmp

2902	.1934					shildFunction
2903	.1934	20 0b 1a	jsr $1a0b		jsr clearTileNew
2904	.1937	a9 01		lda #$01		lda #1
2905	.1939	8d 26 a0	sta $a026		sta PlayerData.hasShield
2906	.193c	a2 05		ldx #$05		ldx #kSFX.powerup
2907	.193e	20 ea 19	jsr $19ea		jsr playSFX
2908							.comment
2932							.endc
2933						;	lda #14
2934						;	sta mplexBuffer.sprc
2935	.1941	a9 32		lda #$32		lda #50
2936	.1943	8d 48 a0	sta $a048		sta TickDowns.shieldFlashTimerSpeedUp
2937	.1946	a9 10		lda #$10		lda #16
2938	.1948	8d 42 a0	sta $a042		sta PlayerData.baseFlashTimeDelta
2939	.194b	60		rts			rts
2940						.comment
2946						.endc

2948	.194c					clearSheildState
2949	.194c	a9 62		lda #$62		lda # <justRTI ; yeah this doesn't work on the CX16
2950	.194e	8d fa ff	sta $fffa		sta $FFFA
2951	.1951	a9 19		lda #$19		lda # >justRTI
2952	.1953	8d fb ff	sta $fffb		sta $FFFB
2953	.1956	a9 00		lda #$00		lda #0
2954	.1958	8d 26 a0	sta $a026		sta PlayerData.hasShield
2955	.195b	8d 0d dd	sta $dd0d		sta $DD0D
2956						;	lda #7
2957						;	sta mplexBuffer.sprc
2958	.195e	ad 0d dd	lda $dd0d		lda $DD0D
2959	.1961	60		rts			rts
2960	.1962					justRTI
2961	.1962	40		rti			rti

2963	.1963					exitFunc
2964	.1963	ad 1c a0	lda $a01c		lda GameData.exitOpen
2965	.1966	f0 10		beq $1978		beq _notOpen
2966	.1968	9c 1c a0	stz $a01c			stz GameData.exitOpen
2967	.196b	a5 15		lda $15				lda ActiveTileIndex
2968	.196d	8d 3f a0	sta $a03f			sta PlayerData.exitAtIndex
2969	.1970	a9 04		lda #$04			lda #kPlayerState.exit
2970	.1972	8d 38 a0	sta $a038			sta PlayerData.state
2971	.1975	8d 39 a0	sta $a039			sta PlayerData.minorState
2972	.1978					_notOpen
2973	.1978	60		rts			rts

2975	.1979					eggFunc
2976	.1979	20 0b 1a	jsr $1a0b		jsr clearTileNew
2977	.197c	ee 3e a0	inc $a03e		inc PlayerData.bulletEgg
2978	.197f	a2 05		ldx #$05		ldx #kSFX.powerup
2979	.1981	80 67		bra $19ea		gra playSFX
2980							;rts ; above is now jmp

2982	.1983					awardLife
2983	.1983	ad f1 a1	lda $a1f1		lda PasswordInfiLives
2984	.1986	f0 01		beq $1989		beq +
2985	.1988	60		rts			rts
2986	.1989	ee 0d a0	inc $a00d	+	inc GameData.lives
2987	.198c	4c 6a 1b	jmp $1b6a		jmp pltLives

2989	.198f					animateDoor
2990	.198f	ad 1c a0	lda $a01c		lda GameData.exitOpen
2991	.1992	f0 1c		beq $19b0		beq aDexit
2992	.1994	ad 45 a0	lda $a045		lda TickDowns.doorAnim
2993	.1997	d0 17		bne $19b0		bne aDexit
2994	.1999	a9 0a		lda #$0a		lda #kTimers.DoorAnimeRate
2995	.199b	8d 45 a0	sta $a045		sta TickDowns.doorAnim
2996	.199e	ad 21 a0	lda $a021		lda LevelData.exitIndex
2997	.19a1	85 15		sta $15			sta ActiveTileIndex
2998	.19a3	20 b1 19	jsr $19b1		jsr animateInternal
2999	.19a6	ad 22 a0	lda $a022		lda LevelData.exitIndex+1
3000	.19a9	c9 ff		cmp #$ff		cmp #$ff
3001	.19ab	f0 03		beq $19b0		beq aDexit
3002	.19ad	85 15		sta $15			sta ActiveTileIndex
3003	.19af	f0		beq			gne animateInternal
3004	.19b0					aDexit
3005	.19b0	60		rts			rts

3007	.19b1					animateInternal
3008	.19b1	ad 23 a0	lda $a023		lda LevelData.exitFrame
3009	.19b4					animateDoorCmp
3010	.19b4	c9 0e		cmp #$0e		cmp #kDoorOpen
3011	.19b6	f0 f8		beq $19b0		beq aDexit
3012	.19b8					animateDoorCLC
3013	.19b8	18		clc			clc
3014	.19b9	69 01		adc #$01		adc #1
3015	.19bb	8d 23 a0	sta $a023		sta LevelData.exitFrame
3016	.19be	80 61		bra $1a21		gra pltSingleTileNoLookupNew ; skips below

3018	.19c0					setAnimateDoorToOpen
3019	.19c0	a9 0a		lda #$0a		lda #kDoorClosed
3020	.19c2	8d 23 a0	sta $a023		sta LevelData.exitFrame
3021	.19c5	a9 0e		lda #$0e		lda #kDoorOpen
3022	.19c7	8d b5 19	sta $19b5		sta animateDoorCmp+1
3023	.19ca	a9 18		lda #$18		lda #$18 ; CLC
3024	.19cc	8d b8 19	sta $19b8		sta animateDoorCLC
3025	.19cf	a9 69		lda #$69		lda #$69 ; ADC #
3026	.19d1	8d b9 19	sta $19b9		sta animateDoorCLC+1
3027	.19d4	60		rts			rts

3029	.19d5					setAnimateDoorToClose
3030	.19d5	a9 0e		lda #$0e		lda #kDoorOpen
3031	.19d7	8d 23 a0	sta $a023		sta LevelData.exitFrame
3032	.19da	a9 0a		lda #$0a		lda #kDoorClosed
3033	.19dc	8d b5 19	sta $19b5		sta animateDoorCmp+1
3034	.19df	a9 38		lda #$38		lda #$38 ; SEC
3035	.19e1	8d b8 19	sta $19b8		sta animateDoorCLC
3036	.19e4	a9 e9		lda #$e9		lda #$E9 ; SBC #
3037	.19e6	8d b9 19	sta $19b9		sta animateDoorCLC+1
3038	.19e9	60		rts			rts

3040	.19ea					playSFX
3041	.19ea	2c 1d a0	bit $a01d		bit GameData.musicMode
3042	.19ed	50 09		bvc $19f8		bvc audioExit
3043	.19ef	bd e6 2c	lda $2ce6,x		lda SNDTBL.hi,x
3044	.19f2	a8		tay			tay
3045	.19f3	bd de 2c	lda $2cde,x		lda SNDTBL.lo,x
3046	.19f6	a2 0e		ldx #$0e		ldx #14;7;14
3047							;lda #<effect        ;Start address of sound effect data
3048						    ;ldy #>effect
3049						    ;ldx #channel        ;0, 7 or 14 for channels 1-3
3050						   ; jmp SID+6
3051	.19f8					audioExit
3052	.19f8	60		rts			rts

3054	.19f9					playMusic
3055	.19f9	60		rts			rts
3056							;bit GameData.musicMode
3057							;bpl audioExit
3058							;jmp SID

3060	.19fa					countTempMapTile
3061	.19fa	a2 bf		ldx #$bf		ldx # kLevelSizeMax-1
3062	.19fc	a0 00		ldy #$00		ldy #0
3063	.19fe					_loop
3064	.19fe	dd 00 a2	cmp $a200,x		cmp tileMapTemp,x
3065	.1a01	d0 01		bne $1a04		bne _skip
3066	.1a03	c8		iny			iny
3067	.1a04					_skip
3068	.1a04	ca		dex			dex
3069	.1a05	e0 ff		cpx #$ff		cpx #$ff
3070	.1a07	d0 f5		bne $19fe		bne _loop
3071	.1a09	98		tya			tya
3072	.1a0a	60		rts			rts

3074	.1a0b					clearTileNew
3075	.1a0b	a4 15		ldy $15			ldy ActiveTileIndex
3076	.1a0d	a9 00		lda #$00		lda # kTiles.back
3077	.1a0f	99 00 a2	sta $a200,y		sta tileMapTemp,y
3078	.1a12	20 51 14	jsr $1451		jsr calcBCDEforTileY ; this sets it to be what it should be shadow wise
3079	.1a15	20 1d 1a	jsr $1a1d		jsr pltSingleTileNew
3080	.1a18	a4 15		ldy $15			ldy ActiveTileIndex
3081	.1a1a	b9 00 a2	lda $a200,y		lda tileMapTemp,y
3082	.1a1d					pltSingleTileNew
3083	.1a1d	aa		tax			tax
3084	.1a1e	bd e5 14	lda $14e5,x		lda toolToTileLUT,x
3085	.1a21					pltSingleTileNoLookupNew
3086	.1a21	48		pha			pha
3087	.1a22	78		sei			sei
3088	.1a23	a5 15		lda $15			lda ActiveTileIndex
3089	.1a25	20 96 1a	jsr $1a96		jsr convertIndexToScreenAndCRAM
3090	.1a28	a9 10		lda #$10		lda #`kVRAM.gameScreen | kVERA.inc_1
3091	.1a2a	8d 22 9f	sta $9f22		sta kVERA.ADDR_Hi
3092	.1a2d	68		pla			pla
3093	.1a2e	20 70 15	jsr $1570		jsr renderTile
3094	.1a31	58		cli			cli
3095	.1a32	60		rts			rts

3097	.1a33					removeAllTilesOf
3098	.1a33	85 13		sta $13			sta ZPTemp5
3099	.1a35	a2 00		ldx #$00		ldx #0
3100	.1a37	86 15		stx $15			stx ActiveTileIndex
3101	.1a39	86 17		stx $17			stx TestingSprX1
3102	.1a3b					_loop
3103	.1a3b	bd 00 a2	lda $a200,x		lda tileMapTemp,x
3104	.1a3e	c5 13		cmp $13			cmp ZPTemp5
3105	.1a40	d0 06		bne $1a48		bne _next
3106	.1a42	20 0b 1a	jsr $1a0b			jsr clearTileNew
3107	.1a45	20 35 18	jsr $1835			jsr CheckForShadowPlots
3108	.1a48					_next
3109	.1a48	e6 17		inc $17			inc TestingSprX1
3110	.1a4a	a6 17		ldx $17			ldx TestingSprX1
3111	.1a4c	86 15		stx $15			stx ActiveTileIndex
3112	.1a4e	e0 c0		cpx #$c0		cpx # kLevelSizeMax
3113	.1a50	d0 e9		bne $1a3b		bne _loop
3114	.1a52	60		rts			rts

3116	.1a53					giveScore
3117	.1a53	0a		asl a			asl a
3118	.1a54	0a		asl a			asl a
3119	.1a55	0a		asl a			asl a
3120	.1a56	09 05		ora #$05		ora #5
3121	.1a58	a8		tay			tay
3122	.1a59	a2 05		ldx #$05		ldx #5
3123	.1a5b	18		clc			clc
3124	.1a5c					_scLoop
3125	.1a5c	bd 0f a0	lda $a00f,x		lda GameData.score,x
3126	.1a5f	79 76 1a	adc $1a76,y		adc FruitScore,y
3127	.1a62	9d 0f a0	sta $a00f,x		sta GameData.score,x
3128	.1a65	c9 0a		cmp #$0a		cmp #10
3129	.1a67	90 06		bcc $1a6f		bcc _ok
3130								;sec
3131	.1a69	e9 0a		sbc #$0a			sbc #10
3132	.1a6b	9d 0f a0	sta $a00f,x			sta GameData.score,x
3133	.1a6e	38		sec				sec ; add 1 more next time
3134	.1a6f					_ok
3135	.1a6f	88		dey			dey
3136	.1a70	ca		dex			dex
3137	.1a71	10 e9		bpl $1a5c		bpl _scLoop
3138	.1a73	4c 36 1b	jmp $1b36		jmp pltScore

3140	.1a76					kScoreIndex .block
3141	=0						fruit = 0
3142	=1						flower = 1
3143	=2						key = 2
3144	=3						boss = 3
3145						.bend

3147	>1a76	00 00 00 01 00 00 0f 0f		FruitScore	.byte 0,0,0,1,0,0,15,15
3148	>1a7e	00 00 00 05 00 00 0f 0f		FlowerScore .byte 0,0,0,5,0,0,15,15
3149	>1a86	00 00 00 02 05 00 0f 0f		KeyScore	.byte 0,0,0,2,5,0,15,15
3150	>1a8e	00 01 00 00 00 00 0f 0f		BossScore	.byte 0,1,0,0,0,0,15,15

3152	.1a96					convertIndexToScreenAndCRAM
3153							; screen is 64 wide and 2 per char so we want to time y * 128
3154							; 2 lines per tile so y*256
3155	.1a96	85 14		sta $14			sta TempX
3156	.1a98	29 f0		and #$f0		and #$F0 ; get y Part
3157	.1a9a	4a		lsr a			lsr a
3158	.1a9b	4a		lsr a			lsr a
3159	.1a9c	4a		lsr a			lsr a
3160	.1a9d	4a		lsr a			lsr a ; >> 4 to get y into the lower half
3161							;clc
3162	.1a9e	69 10		adc #$10		adc #>kVRAM.gameScreen
3163	.1aa0	85 09		sta $09			sta Pointer2.hi ; * 256
3164	.1aa2	a5 14		lda $14			lda TempX
3165	.1aa4	29 0f		and #$0f		and #$0F ; x = x * 2 and 2 per char so *4
3166	.1aa6	0a		asl a			asl a
3167	.1aa7	0a		asl a			asl a
3168							;clc
3169	.1aa8	69 00		adc #$00		adc #<kVRAM.gameScreen
3170	.1aaa	85 08		sta $08			sta Pointer2.lo
3171	.1aac	60		rts			rts

3173						; returns Y into ZPTemp
3174	.1aad					convertIndexToEntSpriteXY
3175	.1aad	85 11		sta $11			sta ZPTemp3
3176	.1aaf	29 f0		and #$f0		and #$f0
3177	.1ab1	9d 72 a3	sta $a372,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
3178	.1ab4	85 0f		sta $0f			sta ZPTemp
3179	.1ab6	a5 11		lda $11			lda ZPTemp3
3180	.1ab8	29 0f		and #$0f		and #$0f
3181	.1aba	0a		asl a			asl a
3182	.1abb	0a		asl a			asl a
3183	.1abc	0a		asl a			asl a
3184	.1abd	0a		asl a			asl a
3185	.1abe	9e 52 a3	stz $a352,x		stz mplexBuffer.xmsb+kEntsSpriteOffset,x ; to be sure sure
3186	.1ac1	9d 32 a3	sta $a332,x		sta mplexBuffer.xpos+kEntsSpriteOffset,x
3187	.1ac4	60		rts			rts

3189						; carry set = not safe, clear = safe
3190	.1ac5					checkSolidTile
3191	.1ac5	ae 1c a0	ldx $a01c		ldx GameData.exitOpen
3192	.1ac8	d0 04		bne $1ace		bne _skipDoorCheck
3193	.1aca	c9 11		cmp #$11			cmp # kTiles.exit
3194	.1acc	f0 14		beq $1ae2			beq _notSafe
3195	.1ace					_skipDoorCheck
3196	.1ace	c9 13		cmp #$13		cmp # kTiles.pipe
3197	.1ad0	f0 10		beq $1ae2		beq _notSafe
3198	.1ad2	c9 21		cmp #$21			cmp # kTiles.dissNoColide
3199	.1ad4	f0 0e		beq $1ae4			beq _exitSafe
3200	.1ad6	c9 14		cmp #$14			cmp # kTiles.diss
3201	.1ad8	b0 0c		bcs $1ae6				bcs _checkNotShadow
3202	.1ada	c9 01		cmp #$01					cmp # kTiles.wall
3203	.1adc	90 06		bcc $1ae4					bcc _exitSafe
3204	.1ade	c9 06		cmp #$06						cmp # kTiles.spike
3205	.1ae0	b0 02		bcs $1ae4						bcs _exitSafe
3206	.1ae2					_notsafe
3207	.1ae2	38		sec			sec
3208	.1ae3	60		rts			rts
3209	.1ae4					_exitSafe
3210	.1ae4	18		clc			clc
3211	.1ae5	60		rts			rts
3212	.1ae6					_checkNotShadow
3213	.1ae6	c9 21		cmp #$21		cmp #kTiles.dissNoColide
3214	.1ae8	90 f8		bcc $1ae2		bcc _notsafe
3215	.1aea	80 f8		bra $1ae4		bra _exitSafe

3217	.1aec					plotStatusArea
3218	.1aec	78		sei			sei
300						.if int(kVRAM.gameScreen+(32*2)|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.1aed	a2 0b		ldx #$0b		ldx #len(VeraDESTAddressLUT)
304	={1048576:10,1052672:8,1052736:11,1053204:5,1055744:9,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVRAM.gameScreen+(32*2)|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000,1055744,$100000,1052736]
							VeraDESTAddressLUT ..=[kVRAM.gameScreen+(32*2)|kVERA.inc_1]
306						.endif
307	.1aef	20 16 2b	jsr $2b16	jsr setVERAAddressPort0_X

3220	.1af2	64 0f		stz $0f			stz ZPTemp
3221	.1af4					_loop
3222	.1af4	a6 0f		ldx $0f			ldx ZPTemp
3223	.1af6	bd 33 28	lda $2833,x		lda statusLines,x
3224	.1af9	0a		asl a			asl a
3225	.1afa	0a		asl a			asl a
3226	.1afb	0a		asl a			asl a
3227	.1afc	aa		tax			tax
3228	.1afd	a0 00		ldy #$00		ldy #0
3229	.1aff					_lineLoop
3230	.1aff	bd db 27	lda $27db,x		lda statusLine0,x
3231	.1b02	8d 23 9f	sta $9f23		sta kVERA.DATA_0
3232	.1b05	9c 23 9f	stz $9f23		stz kVERA.DATA_0
3233	.1b08	e8		inx			inx
3234	.1b09	c8		iny			iny
3235	.1b0a	c0 08		cpy #$08		cpy #8
3236	.1b0c	90 f1		bcc $1aff		bcc _lineLoop
3237	.1b0e	18		clc			clc
3238	.1b0f	ad 20 9f	lda $9f20		lda kVERA.ADDR_Lo
3239	.1b12	69 70		adc #$70		adc #128-16
3240	.1b14	8d 20 9f	sta $9f20		sta kVERA.ADDR_Lo
3241	.1b17	90 03		bcc $1b1c		bcc +
3242	.1b19	ee 21 9f	inc $9f21			inc kVERA.ADDR_Mid
3243	.1b1c	a5 0f		lda $0f		+	lda ZPTemp
3244	.1b1e	18		clc			clc
3245	.1b1f	69 01		adc #$01		adc #1
3246	.1b21	c9 18		cmp #$18		cmp #24
3247	.1b23	b0 04		bcs $1b29		bcs _done
3248	.1b25	85 0f		sta $0f				sta ZPTemp
3249	.1b27	80 cb		bra $1af4			bra _loop
3250	.1b29					_done
3251	.1b29	58		cli			cli
3252	.1b2a	20 36 1b	jsr $1b36		jsr pltScore
3253	.1b2d	20 50 1b	jsr $1b50		jsr pltHighScore
3254	.1b30	20 6a 1b	jsr $1b6a		jsr pltLives
3255	.1b33	4c 83 1b	jmp $1b83		jmp pltFlowers

3257	.1b36					pltScore
3258	.1b36	78		sei			sei
300						.if int(getGameScreenCharPos(33,9)|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.1b37	a2 0c		ldx #$0c		ldx #len(VeraDESTAddressLUT)
304	={1048576:10,1052672:8,1052736:11,1053204:5,1053890:12,1055744:9,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(getGameScreenCharPos(33,9)|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000,1055744,$100000,1052736,1053890]
							VeraDESTAddressLUT ..=[getGameScreenCharPos(33,9)|kVERA.inc_1]
306						.endif
307	.1b39	20 16 2b	jsr $2b16	jsr setVERAAddressPort0_X

3260	.1b3c	a2 00		ldx #$00		ldx #0
3261	.1b3e	bd 0f a0	lda $a00f,x	_l	lda GameData.score,x
3262	.1b41	09 f0		ora #$f0		ora #240
3263	.1b43	8d 23 9f	sta $9f23		sta kVERA.DATA_0 ;kVectors.charBase + 33 + (40*9),x
3264	.1b46	9c 23 9f	stz $9f23		stz kVERA.DATA_0; $d800 + 33 + (40*9),x
3265	.1b49	e8		inx			inx
3266	.1b4a	e0 06		cpx #$06		cpx #6
3267	.1b4c	d0 f0		bne $1b3e		bne _l
3268	.1b4e	58		cli			cli
3269	.1b4f	60		rts			rts

3271	.1b50					pltHighScore
3272	.1b50	78		sei			sei
300						.if int(getGameScreenCharPos(33,13)|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.1b51	a2 0d		ldx #$0d		ldx #len(VeraDESTAddressLUT)
304	={1048576:10,1052672:8,1052736:11,1053204:5,1053890:12,1054402:13,1055744:9,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(getGameScreenCharPos(33,13)|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000,1055744,$100000,1052736,1053890,1054402]
							VeraDESTAddressLUT ..=[getGameScreenCharPos(33,13)|kVERA.inc_1]
306						.endif
307	.1b53	20 16 2b	jsr $2b16	jsr setVERAAddressPort0_X

3274	.1b56	a2 00		ldx #$00		ldx #0
3275	.1b58	bd 15 a0	lda $a015,x	_l	lda GameData.high,x
3276	.1b5b	09 f0		ora #$f0		ora #240
3277	.1b5d	8d 23 9f	sta $9f23		sta kVERA.DATA_0 ;kVectors.charBase + 33 + (40*13),x
3278	.1b60	9c 23 9f	stz $9f23		stz kVERA.DATA_0 ;$d800 + 33 + (40*13),x
3279	.1b63	e8		inx			inx
3280	.1b64	e0 06		cpx #$06		cpx #6
3281	.1b66	d0 f0		bne $1b58		bne _l
3282	.1b68	58		cli			cli
3283	.1b69	60		rts			rts

3285	.1b6a					pltLives
3286	.1b6a	78		sei			sei
300						.if int(getGameScreenCharPos(37,17)|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.1b6b	a2 0e		ldx #$0e		ldx #len(VeraDESTAddressLUT)
304	={1048576:10,1052672:8,1052736:11,1053204:5,1053890:12,1054402:13,1054922:14,1055744:9,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(getGameScreenCharPos(37,17)|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000,1055744,$100000,1052736,1053890,1054402,1054922]
							VeraDESTAddressLUT ..=[getGameScreenCharPos(37,17)|kVERA.inc_1]
306						.endif
307	.1b6d	20 16 2b	jsr $2b16	jsr setVERAAddressPort0_X

3288	.1b70	ad 0d a0	lda $a00d		lda GameData.lives
3289	.1b73	09 f0		ora #$f0		ora #240
3290	.1b75	c9 fa		cmp #$fa		cmp #250
3291	.1b77	90 02		bcc $1b7b		bcc _safe
3292	.1b79	a9 f9		lda #$f9			lda #249
3293	.1b7b					_safe
3294	.1b7b	8d 23 9f	sta $9f23		sta kVERA.DATA_0 ; kVectors.charBase + 37 + (40*17)
3295	.1b7e	9c 23 9f	stz $9f23		stz kVERA.DATA_0 ;$d800 + 37 + (40*17)
3296	.1b81	58		cli			cli
3297	.1b82	60		rts			rts

3299	.1b83					pltFlowers
3300	.1b83	78		sei			sei
300						.if int(getGameScreenCharPos(37,21)|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.1b84	a2 0f		ldx #$0f		ldx #len(VeraDESTAddressLUT)
304	={1048576:10,1052672:8,1052736:11,1053204:5,1053890:12,1054402:13,1054922:14,1055434:15,1055744:9,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(getGameScreenCharPos(37,21)|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000,1055744,$100000,1052736,1053890,1054402,1054922,1055434]
							VeraDESTAddressLUT ..=[getGameScreenCharPos(37,21)|kVERA.inc_1]
306						.endif
307	.1b86	20 16 2b	jsr $2b16	jsr setVERAAddressPort0_X

3302	.1b89	ad 0e a0	lda $a00e		lda GameData.flowers
3303	.1b8c	09 f0		ora #$f0		ora #240
3304	.1b8e	8d 23 9f	sta $9f23		sta kVERA.DATA_0 ;kVectors.charBase + 37 + (40*21)
3305	.1b91	9c 23 9f	stz $9f23		stz kVERA.DATA_0 ;$d800 + 37 + (40*21)
3306	.1b94	58		cli			cli
3307	.1b95	60		rts			rts

3309	.1b96					setPlayerToSpawnPoint
3310	.1b96	ad 20 a0	lda $a020		lda LevelData.playerIndex
3311	.1b99					setPlayerToIndexA
3312	.1b99	48		pha			pha
3313	.1b9a	0a		asl a				asl a
3314	.1b9b	0a		asl a				asl a
3315	.1b9c	0a		asl a				asl a
3316	.1b9d	0a		asl a				asl a
3317	.1b9e	8d 30 a3	sta $a330			sta mplexBuffer.xpos
3318	.1ba1	9c 50 a3	stz $a350			stz mplexBuffer.xmsb
3319	.1ba4	68		pla			pla
3320	.1ba5	29 f0		and #$f0		and #$F0
3321	.1ba7	8d 70 a3	sta $a370		sta mplexBuffer.ypos
3322	.1baa	a9 f8		lda #$f8		lda #kSprites.bulletSprite
3323	.1bac	20 d7 11	jsr $11d7		jsr SetBulletSpriteFromFrame
3324	.1baf	a9 ff		lda #$ff		lda #255
3325	.1bb1	8d 71 a3	sta $a371		sta mplexBuffer.ypos+kBulletSpriteOffset
3326	.1bb4	60		rts			rts


3329	.1bb5					resetPlayerData
3330	.1bb5	9c 25 a0	stz $a025		stz PlayerData.dead ; probably could just inline this tbf
3331	.1bb8	60		rts			rts

3333	.1bb9					updateTickdowns
3334	.1bb9	a2 0d		ldx #$0d		ldx #TICK_DOWN_END - TICK_DOWN_START-1
3335	.1bbb	bd 43 a0	lda $a043,x	_l	lda TickDowns,x
3336	.1bbe	f0 03		beq $1bc3		beq _next
3337	.1bc0	de 43 a0	dec $a043,x		dec TickDowns,x
3338	.1bc3					_next
3339	.1bc3	ca		dex			dex
3340	.1bc4	10 f5		bpl $1bbb		bpl _l
3341	.1bc6	60		rts			rts

3343						; NumEnts followed by XXXXYYYY TTTT--DD
3344						; X x tile
3345						; Y y tile
3346						; T type
3347						; D initial direction
3348						;}}}
3349						.send sSUBS
3350						; ----- @Entity Funcs@ -----
3351						.dsection sEntity
3352						.section sEntity
3353						; {{{
3354	.1bc7					unpackEntityBytes
3355	.1bc7	a0 00		ldy #$00		ldy #0
3356	.1bc9	98		tya			tya
3357	.1bca	a2 19		ldx #$19		ldx #kEntity.maxEntities
3358	.1bcc	9d cf a0	sta $a0cf,x	-	sta EntityData.animBase,x
3359	.1bcf	9d e8 a0	sta $a0e8,x		sta EntityData.animFrame,x
3360	.1bd2	9d 1a a1	sta $a11a,x		sta EntityData.entState,x
3361	.1bd5	ca		dex			dex
3362	.1bd6	10 f4		bpl $1bcc		bpl -
3363	.1bd8	b1 00		lda ($00),y		lda (EntityDataPointer),y
3364	.1bda	85 10		sta $10			sta ZPTemp2 ; number of entities
3365	.1bdc	8d 51 a0	sta $a051		sta EntityData.number
3366	.1bdf	f0 40		beq $1c21		beq _e
3367	.1be1	c8		iny				iny			; next byte
3368	.1be2	a2 00		ldx #$00			ldx #0
3369	.1be4	85 04		sta $04				sta EntNum
3370	.1be6						_l
3371	.1be6	b1 00		lda ($00),y			lda (EntityDataPointer),y
3372	.1be8	20 ad 1a	jsr $1aad			jsr convertIndexToEntSpriteXY
3373	.1beb	c8		iny				iny			; next byte
3374	.1bec	b1 00		lda ($00),y			lda (EntityDataPointer),y
3375	.1bee	4a		lsr a				lsr a
3376	.1bef	4a		lsr a				lsr a
3377	.1bf0	4a		lsr a				lsr a
3378	.1bf1	4a		lsr a				lsr a
3379	.1bf2	9d 52 a0	sta $a052,x			sta EntityData.type,x
3380	.1bf5	c9 08		cmp #$08			cmp #kEntity.Bear
3381	.1bf7	d0 02		bne $1bfb			bne +
3382	.1bf9	80 4e		bra $1c49				gra _BossBear
3383	.1bfb	c9 09		cmp #$09		+	cmp #kEntity.Octopuss
3384	.1bfd	d0 03		bne $1c02			bne +
3385	.1bff	4c d7 1c	jmp $1cd7				jmp _BossOctopuss
3386	.1c02	a5 0f		lda $0f			+	lda ZPTemp
3387	.1c04	9d 01 a1	sta $a101,x			sta EntityData.originalY,x
3388	.1c07	9e 1a a1	stz $a11a,x			stz EntityData.entState,x
3389	.1c0a	9e 97 a1	stz $a197,x			stz EntityData.speed,x
3390	.1c0d	b1 00		lda ($00),y			lda (EntityDataPointer),y
3391	.1c0f	29 03		and #$03			and #3
3392	.1c11	9d 6b a0	sta $a06b,x			sta EntityData.direction,x
3393	.1c14	a9 01		lda #$01			lda #1
3394	.1c16	9d 84 a0	sta $a084,x			sta EntityData.active,x
3395	.1c19						_nextEnt
3396	.1c19	c8		iny				iny 		; next byte
3397	.1c1a	e8		inx				inx
3398	.1c1b	c6 10		dec $10				dec ZPTemp2
3399	.1c1d	a5 10		lda $10				lda ZPTemp2
3400	.1c1f	d0 c5		bne $1be6			bne _l
3401	.1c21					_e
3402	.1c21	ae 51 a0	ldx $a051		ldx EntityData.number ; keep number
3403	.1c24	8e d3 a1	stx $a1d3		stx EntityData.pipeBubbleStart
3404	.1c27	ad c9 a1	lda $a1c9		lda EntityData.numPipes
3405	.1c2a	f0 1c		beq $1c48		beq _noPipes
3406							.cerror kEntity.maxNumBubblesPerMaker != 2, "need to change code so it handles new mul"
3407	.1c2c	0a		asl a			asl a ; times two
3408	.1c2d	18		clc			clc ; probably not needed as num pipes must be below 128
3409	.1c2e	6d 51 a0	adc $a051		adc EntityData.number
3410	.1c31	8d 51 a0	sta $a051		sta EntityData.number ; add the bubble ents
3411	.1c34					_setupBubbleLoop
3412	.1c34	a9 0c		lda #$0c		lda #kEntity.bubble
3413	.1c36	9d 52 a0	sta $a052,x		sta EntityData.type,x
3414	.1c39	9e 1a a1	stz $a11a,x		stz EntityData.entState,x
3415	.1c3c	9e 6b a0	stz $a06b,x		stz EntityData.direction,x
3416	.1c3f	9e 84 a0	stz $a084,x		stz EntityData.active,x
3417	.1c42	e8		inx			inx
3418	.1c43	ec 51 a0	cpx $a051		cpx EntityData.number
3419	.1c46	d0 ec		bne $1c34		bne _setupBubbleLoop
3420	.1c48					_noPipes
3421	.1c48	60		rts			rts
3422	.1c49					_BossBear
3423	.1c49	a9 08		lda #$08		lda #kEntity.bear
3424	.1c4b	9d 52 a0	sta $a052,x		sta EntityData.type,x
3425	.1c4e	a9 0a		lda #$0a		lda #kEntity.bearBody
3426	.1c50	9d 53 a0	sta $a053,x		sta EntityData.type+1,x
3427	.1c53	a9 0d		lda #$0d		lda #kEntity.bossDummy
3428	.1c55	9d 54 a0	sta $a054,x		sta EntityData.type+2,x
3429	.1c58	9d 55 a0	sta $a055,x		sta EntityData.type+3,x
3430	.1c5b	a9 07		lda #$07		lda #kBoss.hitPoints
3431	.1c5d	9d 84 a0	sta $a084,x		sta EntityData.active,x
3432	.1c60					_sharedBoss
3433	.1c60	a9 0d		lda #$0d		lda #kEntity.bossDummy
3434	.1c62	9d 54 a0	sta $a054,x		sta EntityData.type+2,x
3435	.1c65	9d 55 a0	sta $a055,x		sta EntityData.type+3,x
3436	.1c68	ad 51 a0	lda $a051		lda EntityData.number
3437	.1c6b	18		clc			clc
3438	.1c6c	69 03		adc #$03		adc #3 ; insert 3 more ents for the rest of the boss
3439	.1c6e	8d 51 a0	sta $a051		sta EntityData.number
3440	.1c71	a9 01		lda #$01		lda #1
3441	.1c73	9d 85 a0	sta $a085,x		sta EntityData.active+1,x
3442	.1c76	9d 86 a0	sta $a086,x		sta EntityData.active+2,x
3443	.1c79	9d 87 a0	sta $a087,x		sta EntityData.active+3,x
3444	.1c7c	8a		txa			txa
3445	.1c7d	9d 1b a1	sta $a11b,x		sta EntityData.entState+1,x
3446	.1c80	9d 1c a1	sta $a11c,x		sta EntityData.entState+2,x
3447	.1c83	9d 1d a1	sta $a11d,x		sta EntityData.entState+3,x
3448	.1c86	bd 52 a3	lda $a352,x		lda mplexBuffer.xmsb+kEntsSpriteOffset,x
3449	.1c89	9d 53 a3	sta $a353,x		sta mplexBuffer.xmsb+kEntsSpriteOffset+1,x
3450	.1c8c	9d 54 a3	sta $a354,x		sta mplexBuffer.xmsb+kEntsSpriteOffset+2,x
3451	.1c8f	9d 55 a3	sta $a355,x		sta mplexBuffer.xmsb+kEntsSpriteOffset+3,x
3452	.1c92	bd 72 a3	lda $a372,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
3453	.1c95	38		sec			sec
3454	.1c96	e9 09		sbc #$09		sbc #9
3455	.1c98	9d 72 a3	sta $a372,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
3456	.1c9b	9d 73 a3	sta $a373,x		sta mplexBuffer.ypos+kEntsSpriteOffset+1,x
3457	.1c9e	18		clc			clc
3458	.1c9f	69 15		adc #$15		adc #21
3459	.1ca1	9d 74 a3	sta $a374,x		sta mplexBuffer.ypos+kEntsSpriteOffset+2,x
3460	.1ca4	9d 75 a3	sta $a375,x		sta mplexBuffer.ypos+kEntsSpriteOffset+3,x
3461	.1ca7	bd 32 a3	lda $a332,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x
3462	.1caa	38		sec			sec
3463	.1cab	e9 08		sbc #$08		sbc #8
3464	.1cad	9d 32 a3	sta $a332,x		sta mplexBuffer.xpos+kEntsSpriteOffset,x
3465	.1cb0	9d 34 a3	sta $a334,x		sta mplexBuffer.xpos+kEntsSpriteOffset+2,x
3466	.1cb3	18		clc			clc
3467	.1cb4	69 18		adc #$18		adc #24
3468	.1cb6	9d 33 a3	sta $a333,x		sta mplexBuffer.xpos+kEntsSpriteOffset+1,x
3469	.1cb9	9d 35 a3	sta $a335,x		sta mplexBuffer.xpos+kEntsSpriteOffset+3,x
3470	.1cbc	9e 1a a1	stz $a11a,x		stz EntityData.entState,x
3471	.1cbf	9e 97 a1	stz $a197,x		stz EntityData.speed,x
3472	.1cc2	b1 00		lda ($00),y		lda (EntityDataPointer),y
3473	.1cc4	29 03		and #$03		and #3
3474	.1cc6	9d 6b a0	sta $a06b,x		sta EntityData.direction,x
3475	.1cc9	a9 19		lda #$19		lda #25
3476	.1ccb	9d 9d a0	sta $a09d,x		sta EntityData.movTimer,x
3477	.1cce	9d 9e a0	sta $a09e,x		sta EntityData.movTimer+1,x
3478	.1cd1	e8		inx			inx
3479	.1cd2	e8		inx			inx
3480	.1cd3	e8		inx			inx
3481							; x is now + 3 so when nextEnt is called it will be +4
3482	.1cd4	4c 19 1c	jmp $1c19		jmp _nextEnt
3483	.1cd7					_BossOctopuss
3484	.1cd7	a9 09		lda #$09		lda #kEntity.octopuss
3485	.1cd9	9d 52 a0	sta $a052,x		sta EntityData.type,x
3486	.1cdc	a9 0b		lda #$0b		lda #kEntity.octopussBody
3487	.1cde	9d 53 a0	sta $a053,x		sta EntityData.type+1,x
3488	.1ce1	a9 09		lda #$09		lda #kBoss.hitPointsOctopuss
3489	.1ce3	9d 84 a0	sta $a084,x		sta EntityData.active,x
3490	.1ce6	4c 60 1c	jmp $1c60		jmp _sharedBoss

3492	.1ce9					setEntitySprites
3493	.1ce9	ae 51 a0	ldx $a051		ldx EntityData.number
3494	.1cec	f0 1c		beq $1d0a		beq _exit
3495	.1cee					_active
3496	.1cee	86 02		stx $02			stx CurrentEntity
3497	.1cf0	bd 52 a0	lda $a052,x		lda EntityData.type,x
3498	.1cf3	c9 08		cmp #$08		cmp #kEntity.bear
3499	.1cf5	f0 26		beq $1d1d		beq _bossBear
3500	.1cf7	c9 0a		cmp #$0a			cmp #kEntity.bearBody
3501	.1cf9	f0 0c		beq $1d07			beq _nextEnt
3502	.1cfb	c9 09		cmp #$09				cmp #kEntity.octopuss
3503	.1cfd	f0 49		beq $1d48				beq _bossOctopuss
3504	.1cff	c9 0b		cmp #$0b					cmp #kEntity.octopussBody
3505	.1d01	f0 04		beq $1d07					beq _nextEnt
3506	.1d03	a8		tay			tay
3507						;	lda EntitySpriteColours,y
3508							;sta mplexBuffer.sprc+kEntsSpriteOffset,x
3509	.1d04	20 90 22	jsr $2290		jsr setEntSpriteForDirection
3510	.1d07					_nextEnt
3511	.1d07	ca		dex			dex
3512	.1d08	10 e4		bpl $1cee		bpl _active
3513	.1d0a					_exit
3514	.1d0a	ad c9 a1	lda $a1c9		lda EntityData.numPipes
3515	.1d0d	f0 0d		beq $1d1c		beq _exit2
3516	.1d0f	ae d3 a1	ldx $a1d3			ldx EntityData.pipeBubbleStart
3517	.1d12	a9 ff		lda #$ff			lda #$ff
3518	.1d14					_loop
3519	.1d14	9d 72 a3	sta $a372,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
3520	.1d17	e8		inx			inx
3521	.1d18	e0 19		cpx #$19		cpx #kEntity.maxEntities
3522	.1d1a	d0 f8		bne $1d14		bne _loop
3523	.1d1c					_exit2
3524	.1d1c	60		rts			rts

3526	.1d1d					_bossBear
3527	.1d1d	20 73 1d	jsr $1d73		jsr setBossToCorrectColour
3528	.1d20	a9 e0		lda #$e0		lda #kSprBase+96
3529	.1d22	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
3530	.1d25	20 d3 22	jsr $22d3		jsr SetEntSpriteFromFrame
3531	.1d28	e8		inx			inx
3532	.1d29	a9 e3		lda #$e3		lda #kSprBase+99
3533	.1d2b	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
3534	.1d2e	20 d3 22	jsr $22d3		jsr SetEntSpriteFromFrame
3535	.1d31	e8		inx			inx
3536	.1d32	a9 e6		lda #$e6		lda #kSprBase+102
3537	.1d34	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
3538	.1d37	20 d3 22	jsr $22d3		jsr SetEntSpriteFromFrame
3539	.1d3a	e8		inx			inx
3540	.1d3b	a9 e8		lda #$e8		lda #kSprBase+104
3541	.1d3d	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
3542	.1d40	20 d3 22	jsr $22d3		jsr SetEntSpriteFromFrame
3543	.1d43	ca		dex			dex
3544	.1d44	ca		dex			dex
3545	.1d45	ca		dex			dex
3546	.1d46	d0 bf		bne $1d07		bne _nextEnt

3548	.1d48					_bossOctopuss
3549	.1d48	20 73 1d	jsr $1d73		jsr setBossToCorrectColour
3550	.1d4b	a9 ea		lda #$ea		lda #kSprBase+106
3551	.1d4d	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
3552	.1d50	20 d3 22	jsr $22d3		jsr SetEntSpriteFromFrame
3553	.1d53	e8		inx			inx
3554	.1d54	a9 ed		lda #$ed		lda #kSprBase+109
3555	.1d56	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
3556	.1d59	20 d3 22	jsr $22d3		jsr SetEntSpriteFromFrame
3557	.1d5c	e8		inx			inx
3558	.1d5d	a9 f0		lda #$f0		lda #kSprBase+112
3559	.1d5f	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
3560	.1d62	20 d3 22	jsr $22d3		jsr SetEntSpriteFromFrame
3561	.1d65	e8		inx			inx
3562	.1d66	a9 f2		lda #$f2		lda #kSprBase+114
3563	.1d68	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
3564	.1d6b	20 d3 22	jsr $22d3		jsr SetEntSpriteFromFrame
3565	.1d6e	ca		dex			dex
3566	.1d6f	ca		dex			dex
3567	.1d70	ca		dex			dex
3568	.1d71	d0 94		bne $1d07		bne _nextEnt

3570	.1d73					setBossToCorrectColour
3571	.1d73	bd 52 a0	lda $a052,x		lda EntityData.type,x
3572	.1d76	a8		tay			tay
3573							;lda EntitySpriteColours,y
3574	.1d77					setBossSpriteToColour
3575							;sta mplexBuffer.sprc+kEntsSpriteOffset,x ; not worth the effort for this
3576							;sta mplexBuffer.sprc+kEntsSpriteOffset+1,x
3577							;sta mplexBuffer.sprc+kEntsSpriteOffset+2,x
3578							;sta mplexBuffer.sprc+kEntsSpriteOffset+3,x
3579	.1d77	60		rts			rts

3581	.1d78					deactivateAllEntities
3582	.1d78	a2 18		ldx #$18		ldx #kEntity.maxEntities-1
3583	.1d7a	9e 84 a0	stz $a084,x	-	stz EntityData.active,x
3584	.1d7d	ca		dex			dex
3585	.1d7e	10 fa		bpl $1d7a		bpl -
3586	.1d80	60		rts			rts


3589						; build hte collision data for each ent first
3590	.1d81					BuildEntCollisionTable
3591	.1d81	a2 18		ldx #$18		ldx # kEntity.maxEntities-1
3592	.1d83					innerEntitiesLoopColl
3593	.1d83	bd 84 a0	lda $a084,x		lda EntityData.active,x
3594	.1d86	f0 03		beq $1d8b		beq updateEntitiesLoopColl
3595	.1d88	20 0d 25	jsr $250d		jsr MakeMinMaxXYForX
3596	.1d8b					updateEntitiesLoopColl
3597	.1d8b	ca		dex			dex
3598	.1d8c	10 f5		bpl $1d83		bpl innerEntitiesLoopColl
3599	.1d8e	60		rts			rts


3602	.1d8f					addYDeltaEnt
3603	.1d8f	a6 02		ldx $02			ldx CurrentEntity
3604	.1d91	bd 72 a3	lda $a372,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
3605	.1d94	18		clc			clc
3606	.1d95	6d f6 a1	adc $a1f6		adc checkSpriteToCharData.yDeltaCheck
3607	.1d98	9d 72 a3	sta $a372,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
3608	.1d9b	60		rts			rts

3610	.1d9c					updateEntities
3611	.1d9c	a2 18		ldx #$18		ldx #kEntity.maxEntities-1
3612	.1d9e					innerEntitiesLoop
3613	.1d9e	bd 84 a0	lda $a084,x		lda EntityData.active,x
3614	.1da1	d0 1f		bne $1dc2		bne EntitiesActive
3615	.1da3	bd 1a a1	lda $a11a,x		lda EntityData.entState,x
3616	.1da6	10 16		bpl $1dbe		bpl updateEntitiesLoop
3617	.1da8	de 9d a0	dec $a09d,x		dec EntityData.movTimer,x
3618	.1dab	bd 9d a0	lda $a09d,x		lda EntityData.movTimer,x
3619	.1dae	d0 0e		bne $1dbe		bne updateEntitiesLoop
3620	.1db0	bd 01 a1	lda $a101,x		lda EntityData.originalY,x
3621	.1db3	9d 72 a3	sta $a372,x		sta mplexBuffer.yPos+kEntsSpriteOffset,x
3622	.1db6	9e 1a a1	stz $a11a,x		stz EntityData.entState,x
3623	.1db9	a9 01		lda #$01		lda #1
3624	.1dbb	9d 84 a0	sta $a084,x		sta EntityData.active,x
3625	.1dbe					updateEntitiesLoop
3626	.1dbe	ca		dex			dex
3627	.1dbf	10 dd		bpl $1d9e		bpl innerEntitiesLoop
3628	.1dc1	60		rts			rts
3629	.1dc2					EntitiesActive
3630	.1dc2	86 02		stx $02			stx CurrentEntity
3631	.1dc4	bd 52 a0	lda $a052,x		lda EntityData.type,x
3632	.1dc7	a8		tay			tay
14	.1dc8	b9 df 1d	lda $1ddf,y		lda EntUpdateFuncLUT.hi,y
15	.1dcb	48		pha			pha
16	.1dcc	b9 d1 1d	lda $1dd1,y		lda EntUpdateFuncLUT.lo,y
17	.1dcf	48		pha			pha
18	.1dd0	60		rts			rts
3634	.1dd1					EntUpdateFuncLUT
26	>1dd1	ec 37 ec 01 52 f4 9d c6		lo .byte <(entNormalMovement,springEntFunc,EntNormalMovement,entBat,entGhostFunc,entSpiderFunc,entFishFunc,circlerFunc,entBoss,entBoss,nextEnt,nextEnt,entBubble,nextEnt)-1
	>1dd9	49 49 67 67 6c 67
27	>1ddf	1d 20 1d 22 21 1e 1e 1f		hi .byte >(entNormalMovement,springEntFunc,EntNormalMovement,entBat,entGhostFunc,entSpiderFunc,entFishFunc,circlerFunc,entBoss,entBoss,nextEnt,nextEnt,entBubble,nextEnt)-1
	>1de7	23 23 22 22 22 22

3636	.1ded					entNormalMovement
3637	.1ded	20 ad 22	jsr $22ad	+	jsr updateEntAnimAndSetSprite
3638	.1df0	b9 46 27	lda $2746,y		lda CollFrameForEnt,y
3639	.1df3	85 1e		sta $1e			sta CollideSpriteBoxIndex
435	.1df5	e8		inx			inx
436	.1df6	e8		inx			inx
3641	.1df7	86 1d		stx $1d			stx CollideSpriteToCheck
3642	.1df9	a9 24		lda #$24		lda #<handleEntCollisionResult
3643	.1dfb	85 06		sta $06			sta Pointer1
3644	.1dfd	a9 22		lda #$22		lda #>handleEntCollisionResult
3645	.1dff	85 07		sta $07			sta Pointer1+1
3646	.1e01	a6 02		ldx $02			ldx CurrentEntity
3647	.1e03	bd 97 a1	lda $a197,x		lda EntityData.speed,x
3648	.1e06	a8		tay			tay
3649	.1e07	bd 6b a0	lda $a06b,x		lda EntityData.direction,x
3650	.1e0a	aa		tax			tax
3651	.1e0b	64 05		stz $05			stz CollisionResult
14	.1e0d	bd 1a 1e	lda $1e1a,x		lda ENTDirectionCheckFuncLUT.hi,x
15	.1e10	48		pha			pha
16	.1e11	bd 16 1e	lda $1e16,x		lda ENTDirectionCheckFuncLUT.lo,x
17	.1e14	48		pha			pha
18	.1e15	60		rts			rts
3653	.1e16					ENTDirectionCheckFuncLUT
26	>1e16	25 44 61 80			lo .byte <(entRight,entUp,entLeft,entDown)-1
27	>1e1a	1e 1e 1e 1e			hi .byte >(entRight,entUp,entLeft,entDown)-1

3655	>1e1e	02 04				entPositiveTBL   .byte 002,004
3656	>1e20	01 02				entPositiveTBLUD .byte 001,002
3657	>1e22	fe fc				entNegativeTBL   .byte 254,252
3658	>1e24	ff fe				entNegativeTBLUD .byte 255,254

3660	.1e26					entRight
3661	.1e26	b9 1e 1e	lda $1e1e,y		lda entPositiveTBL,y
3662	.1e29	8d f5 a1	sta $a1f5		sta checkSpriteToCharData.xDeltaCheck
3663	.1e2c	a9 00		lda #$00		lda #0
3664	.1e2e	8d f6 a1	sta $a1f6		sta checkSpriteToCharData.yDeltaCheck
3665	.1e31					entRightNoDelta
3666	.1e31	20 56 16	jsr $1656		jsr newCollision
3667	.1e34	a5 22		lda $22			lda CollideCharTRC
3668	.1e36	20 c5 1a	jsr $1ac5		jsr checkSolidTile
3669	.1e39	26 05		rol $05			rol CollisionResult
3670	.1e3b	a5 26		lda $26			lda CollideCharBRC
3671	.1e3d	20 c5 1a	jsr $1ac5		jsr checkSolidTile
3672	.1e40	26 05		rol $05			rol CollisionResult
3673	.1e42	6c 06 00	jmp ($0006)		jmp (Pointer1)

3675	.1e45					entUp
3676	.1e45	9c f5 a1	stz $a1f5		stz checkSpriteToCharData.xDeltaCheck
3677	.1e48	b9 24 1e	lda $1e24,y		lda entNegativeTBLUD,y
3678	.1e4b	8d f6 a1	sta $a1f6		sta checkSpriteToCharData.yDeltaCheck
3679	.1e4e					entUpNoDelta
3680	.1e4e	20 56 16	jsr $1656		jsr newCollision
3681	.1e51	a5 20		lda $20			lda CollideCharTLC
3682	.1e53	20 c5 1a	jsr $1ac5		jsr checkSolidTile
3683	.1e56	26 05		rol $05			rol CollisionResult
3684	.1e58	a5 22		lda $22			lda CollideCharTRC
3685	.1e5a	20 c5 1a	jsr $1ac5		jsr checkSolidTile
3686	.1e5d	26 05		rol $05			rol CollisionResult
3687	.1e5f	6c 06 00	jmp ($0006)		jmp (Pointer1)

3689	.1e62					entLeft
3690	.1e62	b9 22 1e	lda $1e22,y		lda entNegativeTBL,y
3691	.1e65	8d f5 a1	sta $a1f5		sta checkSpriteToCharData.xDeltaCheck
3692	.1e68	a9 00		lda #$00		lda #0
3693	.1e6a	8d f6 a1	sta $a1f6		sta checkSpriteToCharData.yDeltaCheck
3694	.1e6d					entLeftNoDelta
3695	.1e6d	20 56 16	jsr $1656		jsr newCollision
3696	.1e70	a5 20		lda $20			lda CollideCharTLC
3697	.1e72	20 c5 1a	jsr $1ac5		jsr checkSolidTile
3698	.1e75	26 05		rol $05			rol CollisionResult
3699	.1e77	a5 24		lda $24			lda CollideCharBLC
3700	.1e79	20 c5 1a	jsr $1ac5		jsr checkSolidTile
3701	.1e7c	26 05		rol $05			rol CollisionResult
3702	.1e7e	6c 06 00	jmp ($0006)		jmp (Pointer1)

3704	.1e81					entDown
3705	.1e81	9c f5 a1	stz $a1f5		stz checkSpriteToCharData.xDeltaCheck
3706	.1e84	b9 20 1e	lda $1e20,y		lda entPositiveTBLUD,y
3707	.1e87	8d f6 a1	sta $a1f6		sta checkSpriteToCharData.yDeltaCheck
3708	.1e8a					entDownNoDelta
3709	.1e8a	20 56 16	jsr $1656		jsr newCollision
3710	.1e8d	a5 24		lda $24			lda CollideCharBLC
3711	.1e8f	20 c5 1a	jsr $1ac5		jsr checkSolidTile
3712	.1e92	26 05		rol $05			rol CollisionResult
3713	.1e94	a5 26		lda $26			lda CollideCharBRC
3714	.1e96	20 c5 1a	jsr $1ac5		jsr checkSolidTile
3715	.1e99	26 05		rol $05			rol CollisionResult
3716	.1e9b	6c 06 00	jmp ($0006)		jmp (Pointer1)

3718	.1e9e					entFishFunc
3719	.1e9e	de 9d a0	dec $a09d,x		dec EntityData.movTimer,x
3720	.1ea1	bd 9d a0	lda $a09d,x		lda EntityData.movTimer,x
3721	.1ea4	30 0e		bmi $1eb4		bmi _next
3722	.1ea6	29 01		and #$01			and #1
3723	.1ea8	d0 07		bne $1eb1			bne _exit
3724	.1eaa	bd 1a a1	lda $a11a,x			lda EntityData.entState,x
3725	.1ead	f0 02		beq $1eb1			beq _exit
3726	.1eaf	80 17		bra $1ec8				bra _keepGoing
3727	.1eb1					_exit
3728	.1eb1	4c 68 22	jmp $2268		jmp NextEnt
3729	.1eb4					_next
3730	.1eb4	a9 04		lda #$04		lda #4
3731	.1eb6	9d 9d a0	sta $a09d,x		sta EntityData.movTimer,x
3732	.1eb9					_moveFish
3733	.1eb9	bd 1a a1	lda $a11a,x		lda EntityData.entState,x
3734	.1ebc	18		clc			clc
3735	.1ebd	69 01		adc #$01		adc #1
3736	.1ebf	c9 22		cmp #$22		cmp #kSinJumpMax
3737	.1ec1	d0 02		bne $1ec5		bne _storeDirect
3738	.1ec3	a9 21		lda #$21			lda #kSinJumpMax-1
3739	.1ec5					_storeDirect
3740	.1ec5	9d 1a a1	sta $a11a,x		sta EntityData.entState,x
3741	.1ec8					_keepGoing
3742	.1ec8	a8		tay			tay
3743	.1ec9	bd 72 a3	lda $a372,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
3744	.1ecc	18		clc			clc
3745	.1ecd	79 6a 27	adc $276a,y		adc SinJumpTable,y
3746	.1ed0	c9 c5		cmp #$c5		cmp #kFishLimits.maxY
3747	.1ed2	90 0a		bcc $1ede		bcc _store
3748	.1ed4	9e 1a a1	stz $a11a,x			stz EntityData.entState,x
3749	.1ed7	a9 20		lda #$20			lda #32
3750	.1ed9	9d 9d a0	sta $a09d,x			sta EntityData.movTimer,x
3751	.1edc	a9 c5		lda #$c5			lda #kFishLimits.maxY
3752	.1ede					_store
3753	.1ede	9d 72 a3	sta $a372,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
3754	.1ee1	bd 1a a1	lda $a11a,x		lda EntityData.entState,x
3755	.1ee4	4a		lsr a			lsr a
3756	.1ee5	4a		lsr a			lsr a ; div 4
3757	.1ee6	c9 08		cmp #$08		cmp #8
3758	.1ee8	90 02		bcc $1eec		bcc _safe
3759	.1eea	a9 07		lda #$07			lda #7
3760	.1eec					_safe
3761	.1eec	18		clc			clc
3762	.1eed	69 d0		adc #$d0		adc #kSprites.fish
3763	.1eef	20 d3 22	jsr $22d3		jsr SetEntSpriteFromFrame
3764	.1ef2	4c 68 22	jmp $2268		jmp nextEnt

3766	.1ef5					entSpiderFunc
3767	.1ef5	bd 1a a1	lda $a11a,x		lda EntityData.entState,x
3768	.1ef8	a8		tay			tay
14	.1ef9	b9 05 1f	lda $1f05,y		lda SpiderEntFuncLUT.hi,y
15	.1efc	48		pha			pha
16	.1efd	b9 02 1f	lda $1f02,y		lda SpiderEntFuncLUT.lo,y
17	.1f00	48		pha			pha
18	.1f01	60		rts			rts
3770	.1f02					SpiderEntFuncLUT
26	>1f02	07 67 a5			lo .byte <(spiderLookPlayer,spiderFall,spiderRise)-1
27	>1f05	1f 1f 1f			hi .byte >(spiderLookPlayer,spiderFall,spiderRise)-1

3772	.1f08					spiderLookPlayer
3773	.1f08	a2 00		ldx #$00		ldx #0
3774	.1f0a	86 10		stx $10			stx ZPTemp2
3775	.1f0c	20 52 16	jsr $1652		jsr convertXSingleByteEntX
3776	.1f0f	85 0f		sta $0f			sta ZPTemp
3777	.1f11	a6 02		ldx $02			ldx CurrentEntity
435	.1f13	e8		inx			inx
436	.1f14	e8		inx			inx
3779	.1f15	20 52 16	jsr $1652		jsr convertXSingleByteEntX
3780	.1f18	e5 0f		sbc $0f			sbc ZPTemp
3781	.1f1a	85 0f		sta $0f			sta ZPTemp
3782	.1f1c	b0 31		bcs $1f4f		bcs _left
3783	.1f1e	c9 d1		cmp #$d1		cmp #kSpiderValues.rightStartWiggle
3784	.1f20	90 11		bcc $1f33		bcc +
3785	.1f22	a9 01		lda #$01		lda #1
3786	.1f24	85 10		sta $10			sta ZPTemp2
3787	.1f26	a5 0f		lda $0f			lda ZPTemp
3788	.1f28	c9 e1		cmp #$e1		cmp #kSpiderValues.rightStartFall
3789	.1f2a	90 07		bcc $1f33		bcc +
3790	.1f2c	a9 01		lda #$01		lda #1
3791	.1f2e	a6 02		ldx $02			ldx CurrentEntity
3792	.1f30	9d 1a a1	sta $a11a,x		sta EntityData.entState,x
3793	.1f33	a9 ca		lda #$ca	+	lda #kSprites.spiderRight
3794	.1f35					_storeSprite
3795	.1f35	a6 02		ldx $02			ldx CurrentEntity
3796	.1f37	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
3797	.1f3a	a5 10		lda $10			lda ZPTemp2
3798	.1f3c	f0 06		beq $1f44		beq _noAnim
3799	.1f3e	20 ad 22	jsr $22ad		jsr updateEntAnimAndSetSprite
3800	.1f41	4c 68 22	jmp $2268		jmp nextEnt
3801	.1f44					_noAnim
3802	.1f44	a6 02		ldx $02			ldx CurrentEntity
3803	.1f46	bd cf a0	lda $a0cf,x		lda EntityData.animBase,x
3804	.1f49	20 d3 22	jsr $22d3		jsr SetEntSpriteFromFrame
3805	.1f4c	4c 68 22	jmp $2268		jmp nextEnt
3806	.1f4f					_left
3807	.1f4f	c9 2e		cmp #$2e		cmp #kSpiderValues.leftStartWiggle
3808	.1f51	b0 11		bcs $1f64		bcs +
3809	.1f53	a9 01		lda #$01			lda #1
3810	.1f55	85 10		sta $10				sta ZPTemp2
3811	.1f57	a5 0f		lda $0f				lda ZPTemp
3812	.1f59	c9 1e		cmp #$1e			cmp #kSpiderValues.leftStartFall
3813	.1f5b	b0 07		bcs $1f64			bcs +
3814	.1f5d	a9 01		lda #$01			lda #1
3815	.1f5f	a6 02		ldx $02				ldx CurrentEntity
3816	.1f61	9d 1a a1	sta $a11a,x			sta EntityData.entState,x
3817	.1f64	a9 c8		lda #$c8	+	lda #kSprites.spiderLeft
3818	.1f66	80 cd		bra $1f35		bra _storeSprite

3820	.1f68					spiderFall
3821	.1f68	20 ad 22	jsr $22ad		jsr updateEntAnimAndSetSprite
3822							;ldy #kEntity.spider
3823	.1f6b	ad 4b 27	lda $274b		lda CollFrameForEnt+kEntity.spider ;,y
3824	.1f6e	85 1e		sta $1e			sta CollideSpriteBoxIndex
3825	.1f70	a6 02		ldx $02			ldx CurrentEntity
435	.1f72	e8		inx			inx
436	.1f73	e8		inx			inx
3827	.1f74	86 1d		stx $1d			stx CollideSpriteToCheck
3828	.1f76	9c f5 a1	stz $a1f5		stz checkSpriteToCharData.xDeltaCheck
3829	.1f79	a9 02		lda #$02		lda #kSpiderValues.yFallDelta
3830	.1f7b	8d f6 a1	sta $a1f6		sta checkSpriteToCharData.yDeltaCheck
3831	.1f7e	20 56 16	jsr $1656		jsr newCollision
3832	.1f81	a5 24		lda $24			lda CollideCharBLC
3833	.1f83	20 c5 1a	jsr $1ac5		jsr checkSolidTile
3834	.1f86	90 0f		bcc $1f97		bcc _noColide
3835	.1f88						_collide
3836	.1f88	a9 02		lda #$02			lda #2
3837	.1f8a	a6 02		ldx $02				ldx CurrentEntity
3838	.1f8c	9d 1a a1	sta $a11a,x			sta EntityData.entState,x
3839	.1f8f	a9 20		lda #$20			lda #kSpiderValues.pauseEndFallFrames
3840	.1f91	9d 9d a0	sta $a09d,x			sta EntityData.movTimer,x
3841	.1f94	4c 68 22	jmp $2268			jmp nextEnt
3842	.1f97					_noColide
3843	.1f97	a6 02		ldx $02			ldx CurrentEntity
3844	.1f99	bd 72 a3	lda $a372,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
3845	.1f9c	c9 ab		cmp #$ab		cmp #kBounds.screenMaxY-21
3846	.1f9e	b0 e8		bcs $1f88		bcs _collide
3847	.1fa0	20 8f 1d	jsr $1d8f			jsr addYDeltaEnt
3848	.1fa3	4c 68 22	jmp $2268			jmp nextEnt

3850	.1fa6					spiderRise
3851	.1fa6	de 9d a0	dec $a09d,x		dec EntityData.movTimer,x
3852	.1fa9	bd 9d a0	lda $a09d,x		lda EntityData.movTimer,x
3853	.1fac	10 16		bpl $1fc4		bpl +
3854	.1fae	a9 03		lda #$03		lda #kSpiderValues.riseDelayTime
3855	.1fb0	9d 9d a0	sta $a09d,x		sta EntityData.movTimer,x
3856	.1fb3	bd 72 a3	lda $a372,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
3857	.1fb6	38		sec			sec
3858	.1fb7	e9 01		sbc #$01		sbc #1
3859	.1fb9	9d 72 a3	sta $a372,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
3860	.1fbc	dd 01 a1	cmp $a101,x		cmp EntityData.originalY,x
3861	.1fbf	d0 03		bne $1fc4		bne +
3862	.1fc1	9e 1a a1	stz $a11a,x			stz EntityData.entState,x
3863	.1fc4	4c 68 22	jmp $2268	+	jmp nextEnt

3865	.1fc7					circlerFunc
3866	.1fc7	bd 9d a0	lda $a09d,x		lda EntityData.movTimer,x
3867	.1fca	38		sec			sec
3868	.1fcb	e9 01		sbc #$01		sbc #1
3869	.1fcd	30 06		bmi $1fd5		bmi _cirActive
3870	.1fcf	9d 9d a0	sta $a09d,x		sta EntityData.movTimer,x
3871	.1fd2	4c 68 22	jmp $2268		jmp nextEnt
3872	.1fd5					_cirActive
3873	.1fd5	a9 04		lda #$04		lda #4
3874	.1fd7	9d 9d a0	sta $a09d,x		sta EntityData.movTimer,x
3875	.1fda	bd 1a a1	lda $a11a,x		lda EntityData.entState,x
3876	.1fdd	a4 02		ldy $02			ldy CurrentEntity
3877	.1fdf	aa		tax			tax
3878	.1fe0	bd 9e 27	lda $279e,x		lda CircleJumpTableStart,x
3879	.1fe3	8d f5 a1	sta $a1f5		sta checkSpriteToCharData.xDeltaCheck
3880							; add X with MSB offset
3881	.1fe6	b9 32 a3	lda $a332,y		lda mplexBuffer.xpos+kEntsSpriteOffset,y
3882	.1fe9	18		clc			clc
3883	.1fea	6d f5 a1	adc $a1f5		adc checkSpriteToCharData.xDeltaCheck
3884	.1fed	85 0f		sta $0f			sta ZPTemp
3885							; xdelta +ve if this is +ve but original was -ve we have gone over
3886	.1fef	ad f5 a1	lda $a1f5		lda checkSpriteToCharData.xDeltaCheck
3887	.1ff2	30 10		bmi $2004		bmi _subbedX
3888	.1ff4	b9 32 a3	lda $a332,y			lda mplexBuffer.xpos+kEntsSpriteOffset,y
3889	.1ff7	10 19		bpl $2012			bpl _loadX
3890									; so last pos in negative >80
3891	.1ff9	a5 0f		lda $0f					lda ZPTemp
3892	.1ffb	30 15		bmi $2012				bmi _storeX
3893									; new pos is positive 0-80
3894	.1ffd	a9 01		lda #$01					lda #1			; enable MSB
3895	.1fff	99 52 a3	sta $a352,y					sta mplexBuffer.xmsb+kEntsSpriteOffset,y
3896	.2002	80 0e		bra $2012					bra _storeX
3897	.2004					_subbedX
3898							; xdelta -ve if this is -ve but original was +ve we have gone over
3899	.2004	b9 32 a3	lda $a332,y		lda mplexBuffer.xpos+kEntsSpriteOffset,y
3900	.2007	30 09		bmi $2012		bmi _loadX
3901								; last post is positive >80
3902	.2009	a5 0f		lda $0f				lda ZPTemp
3903	.200b	10 05		bpl $2012			bpl _storeX
3904	.200d	a9 00		lda #$00				lda #0
3905	.200f	99 52 a3	sta $a352,y				sta mplexBuffer.xmsb+kEntsSpriteOffset,y ; clear msb
3906	.2012					_loadX
3907	.2012					_storeX
3908	.2012	a5 0f		lda $0f			lda ZPTemp
3909	.2014	99 32 a3	sta $a332,y		sta mplexBuffer.xpos+kEntsSpriteOffset,y

3911	.2017	b9 72 a3	lda $a372,y		lda mplexBuffer.ypos+kEntsSpriteOffset,y
3912	.201a	18		clc			clc
3913	.201b	7d ab 27	adc $27ab,x		adc CircleJumpTableStart + ( CircleJumpTableCount / 4) + 1,x
3914	.201e	99 72 a3	sta $a372,y		sta mplexBuffer.ypos+kEntsSpriteOffset,y
3915	.2021	a6 02		ldx $02			ldx CurrentEntity
3916	.2023	bd 1a a1	lda $a11a,x		lda EntityData.entState,x
3917	.2026	18		clc			clc
3918	.2027	69 01		adc #$01		adc #1
3919	.2029	c9 30		cmp #$30		cmp # CircleJumpTableCount
3920	.202b	d0 02		bne $202f		bne _cirStore
3921	.202d	a9 00		lda #$00		lda #0
3922	.202f					_cirStore
3923	.202f	9d 1a a1	sta $a11a,x		sta EntityData.entState,x
3924	.2032	20 ad 22	jsr $22ad		jsr updateEntAnimAndSetSprite
3925	.2035	4c 68 22	jmp $2268		jmp nextEnt

3927	.2038					springEntFunc
3928	.2038	bd 9d a0	lda $a09d,x		lda EntityData.movTimer,x
3929	.203b	38		sec			sec
3930	.203c	e9 01		sbc #$01		sbc #1
3931	.203e	30 06		bmi $2046		bmi _move
3932	.2040	9d 9d a0	sta $a09d,x		sta EntityData.movTimer,x
3933	.2043	4c 68 22	jmp $2268		jmp nextEnt
3934	.2046					_move
3935	.2046	a9 03		lda #$03		lda #3
3936	.2048	9d 9d a0	sta $a09d,x		sta EntityData.movTimer,x
3937							; update Y component
3938	.204b	bd 1a a1	lda $a11a,x		lda EntityData.entState,x
3939	.204e	85 0f		sta $0f			sta ZPTemp
3940	.2050	a8		tay			tay
3941	.2051	b9 6a 27	lda $276a,y		lda SinJumpTable,y
3942	.2054	8d f6 a1	sta $a1f6		sta checkSpriteToCharData.yDeltaCheck
3943	.2057	9c f5 a1	stz $a1f5		stz checkSpriteToCharData.xDeltaCheck
3944	.205a	64 05		stz $05			stz CollisionResult
3945	.205c	a9 02		lda #$02		lda #2 ; this might change per frame
3946	.205e	85 1e		sta $1e			sta CollideSpriteBoxIndex
435	.2060	e8		inx			inx
436	.2061	e8		inx			inx
3948	.2062	86 1d		stx $1d			stx CollideSpriteToCheck
3949	.2064	a9 7e		lda #$7e		lda #<springEntYCollideEnd
3950	.2066	85 06		sta $06			sta Pointer1
3951	.2068	a9 20		lda #$20		lda #>springEntYCollideEnd
3952	.206a	85 07		sta $07			sta Pointer1+1
3953	.206c	a5 0f		lda $0f			lda ZPTemp
3954	.206e	c9 11		cmp #$11		cmp #kSinJumpFall
3955	.2070	b0 07		bcs $2079		bcs _falling
3956							; rising
3957	.2072	a9 11		lda #$11		lda #kSinJumpFall ; start falling
3958	.2074	85 10		sta $10			sta ZPTemp2
3959	.2076	4c 4e 1e	jmp $1e4e		jmp entUpNoDelta
3960	.2079					_falling
3961	.2079	64 10		stz $10			stz ZPTemp2
3962	.207b	4c 8a 1e	jmp $1e8a		jmp entDownNoDelta
3963	.207e					springEntYCollideEnd
3964	.207e	a5 05		lda $05			lda CollisionResult
3965	.2080	d0 21		bne $20a3		bne _hit
3966	.2082	20 9a 24	jsr $249a			jsr collideEntAgainstRest
3967	.2085	b0 1c		bcs $20a3			bcs _hit
3968									; didn't hit so carry on
3969	.2087	a6 02		ldx $02					ldx CurrentEntity
3970	.2089	bd 72 a3	lda $a372,x				lda mplexBuffer.ypos+kEntsSpriteOffset,x
3971									;clc
3972	.208c	6d f6 a1	adc $a1f6				adc checkSpriteToCharData.yDeltaCheck
3973	.208f	9d 72 a3	sta $a372,x				sta mplexBuffer.ypos+kEntsSpriteOffset,x
3974	.2092	bd 1a a1	lda $a11a,x				lda EntityData.entState,x
3975	.2095	18		clc					clc
3976	.2096	69 01		adc #$01				adc #1
3977	.2098	c9 22		cmp #$22				cmp #kSinJumpMax
3978	.209a	90 02		bcc $209e				bcc _store
3979	.209c	a9 21		lda #$21					lda #kSinJumpMax-1
3980	.209e					_store
3981	.209e	9d 1a a1	sta $a11a,x		sta EntityData.entState,x
3982	.20a1	80 07		bra $20aa		gra springEntHandleX
3983	.20a3					_hit
3984	.20a3	a6 02		ldx $02			ldx CurrentEntity
3985	.20a5	a5 10		lda $10			lda ZPTemp2
3986	.20a7	9d 1a a1	sta $a11a,x		sta EntityData.entState,x
3987	.20aa					springEntHandleX
3988	.20aa	9c f6 a1	stz $a1f6		stz checkSpriteToCharData.yDeltaCheck
3989	.20ad	64 05		stz $05			stz CollisionResult
3990	.20af	a9 ce		lda #$ce		lda #<springEntXCollideEnd
3991	.20b1	85 06		sta $06			sta Pointer1
3992	.20b3	a9 20		lda #$20		lda #>springEntXCollideEnd
3993	.20b5	85 07		sta $07			sta Pointer1+1
3994	.20b7	bd 6b a0	lda $a06b,x		lda EntityData.direction,x
3995	.20ba	85 0f		sta $0f			sta ZPTemp
3996	.20bc	18		clc			clc
3997	.20bd	69 04		adc #$04		adc #4
3998	.20bf	a8		tay			tay
3999	.20c0	b9 62 27	lda $2762,y		lda SpringDirectionToDeltaLUT,y
4000	.20c3	8d f5 a1	sta $a1f5		sta checkSpriteToCharData.xDeltaCheck
4001	.20c6	30 03		bmi $20cb		bmi _left
4002	.20c8	4c 31 1e	jmp $1e31		jmp entRightNoDelta
4003	.20cb					_left
4004	.20cb	4c 6d 1e	jmp $1e6d		jmp entLeftNoDelta
4005	.20ce					springEntXCollideEnd
4006	.20ce	a6 02		ldx $02			ldx CurrentEntity
4007	.20d0	a5 0f		lda $0f			lda ZPTemp
4008	.20d2	30 30		bmi $2104		bmi springEntXLeft
4009	.20d4	a5 05		lda $05			lda CollisionResult
4010	.20d6	f0 09		beq $20e1		beq _noCollideRight
4011	.20d8					_hit
4012	.20d8	a9 ff		lda #$ff		lda #256-1
4013	.20da	a6 02		ldx $02			ldx CurrentEntity
4014	.20dc	9d 6b a0	sta $a06b,x		sta EntityData.direction,x
4015	.20df	80 54		bra $2135		bra springEndAnimate
4016	.20e1					_noCollideRight
4017	.20e1	20 9a 24	jsr $249a		jsr collideEntAgainstRest
4018	.20e4	b0 f2		bcs $20d8		bcs _hit
4019	.20e6	a6 02		ldx $02			ldx CurrentEntity
435	.20e8	e8		inx			inx
436	.20e9	e8		inx			inx
4021	.20ea	20 8d 0e	jsr $0e8d		jsr addXWithMSBAndClip
440	.20ed	ca		dex			dex
441	.20ee	ca		dex			dex
4023	.20ef	a5 2f		lda $2f			lda DidClipX
4024	.20f1	f0 04		beq $20f7		beq _noclip
4025	.20f3	a9 ff		lda #$ff			lda #256-1
4026	.20f5	30 08		bmi $20ff			bmi _store
4027	.20f7					_noclip
4028	.20f7	bd 6b a0	lda $a06b,x		lda EntityData.direction,x
4029	.20fa	18		clc			clc
4030	.20fb	69 01		adc #$01		adc #1
4031	.20fd	29 03		and #$03		and #3
4032	.20ff					_store
4033	.20ff	9d 6b a0	sta $a06b,x		sta EntityData.direction,x
4034	.2102	80 31		bra $2135		gra springEndAnimate
4035	.2104					springEntXLeft
4036	.2104	a5 05		lda $05			lda CollisionResult
4037	.2106	f0 09		beq $2111		beq _noCollideLeft
4038	.2108					_hit
4039	.2108	a9 01		lda #$01		lda #1
4040	.210a	a6 02		ldx $02			ldx CurrentEntity
4041	.210c	9d 6b a0	sta $a06b,x		sta EntityData.direction,x
4042	.210f	80 24		bra $2135		gra springEndAnimate
4043	.2111					_noCollideLeft
4044	.2111	20 9a 24	jsr $249a		jsr collideEntAgainstRest
4045	.2114	b0 f2		bcs $2108		bcs _hit
4046	.2116	a6 02		ldx $02			ldx CurrentEntity
435	.2118	e8		inx			inx
436	.2119	e8		inx			inx
4048	.211a	20 8d 0e	jsr $0e8d		jsr addXWithMSBAndClip
440	.211d	ca		dex			dex
441	.211e	ca		dex			dex
4050	.211f	a5 2f		lda $2f			lda DidClipX
4051	.2121	f0 04		beq $2127		beq _noclip2
4052	.2123	a9 01		lda #$01			lda #1
4053	.2125	80 0b		bra $2132			bra _store2
4054	.2127					_noClip2
4055	.2127	bd 6b a0	lda $a06b,x		lda EntityData.direction,x
4056	.212a	38		sec			sec
4057	.212b	e9 01		sbc #$01		sbc #1
4058	.212d	c9 fb		cmp #$fb		cmp #256-5
4059	.212f	d0 01		bne $2132		bne _store2
4060	.2131	1a		inc a				inc a  ;256-4
4061	.2132					_store2
4062	.2132	9d 6b a0	sta $a06b,x		sta EntityData.direction,x
4063	.2135					springEndAnimate
4064	.2135	a6 02		ldx $02			ldx CurrentEntity
4065	.2137	bd 1a a1	lda $a11a,x		lda EntityData.entState,x
4066	.213a	a8		tay			tay
4067	.213b	c9 11		cmp #$11		cmp #kSinJumpFall
4068	.213d	b0 09		bcs $2148		bcs _fall
4069	.213f	b9 8d 27	lda $278d,y			lda SpringFrameFrameTable,y
4070	.2142	20 d3 22	jsr $22d3			jsr SetEntSpriteFromFrame
4071	.2145	4c 68 22	jmp $2268			jmp nextEnt
4072	.2148					_fall
4073	.2148	a9 ac		lda #$ac		lda #kSprites.springFall
4074	.214a	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
4075	.214d	20 ad 22	jsr $22ad		jsr updateEntAnimAndSetSprite
4076	.2150	4c 68 22	jmp $2268		jmp nextEnt

4078	.2153					entGhostFunc
4079	.2153	a9 7b		lda #$7b		lda #<entGhostXResults
4080	.2155	85 06		sta $06			sta Pointer1
4081	.2157	a9 21		lda #$21		lda #>entGhostXResults
4082	.2159	85 07		sta $07			sta Pointer1+1
435	.215b	e8		inx			inx
436	.215c	e8		inx			inx
4084	.215d	86 1d		stx $1d			stx CollideSpriteToCheck
4085	.215f	a6 02		ldx $02			ldx CurrentEntity
4086	.2161	bd 97 a1	lda $a197,x		lda EntityData.speed,x
4087	.2164	a8		tay			tay
4088	.2165	bd 6b a0	lda $a06b,x		lda EntityData.direction,x
4089	.2168	c9 04		cmp #$04		cmp #4
4090	.216a	90 05		bcc $2171		bcc +
4091	.216c	a9 00		lda #$00		lda #0
4092	.216e	9d 6b a0	sta $a06b,x		sta EntityData.direction,x
4093							; 0 00= UpRight
4094							; 1 01= UpLeft
4095	.2171	29 01		and #$01	+	and #1
4096	.2173	f0 03		beq $2178		beq ghostLeft
4097						; ghostRight
4098	.2175	4c 26 1e	jmp $1e26		jmp entRight
4099	.2178					ghostLeft
4100	.2178	4c 62 1e	jmp $1e62		jmp entLeft
4101	.217b					entGhostXResults
4102	.217b	a6 02		ldx $02			ldx CurrentEntity
4103	.217d	a5 05		lda $05			lda CollisionResult
4104	.217f	f0 1b		beq $219c		beq _addXDelta
4105	.2181					_toggleX
4106	.2181	a6 02		ldx $02			ldx CurrentEntity
4107	.2183	bd b0 a1	lda $a1b0,x		lda EntityData.ignoreColl,x
4108	.2186	d0 23		bne $21ab		bne _ignoreCollision
4109	.2188	09 01		ora #$01			ora #1
4110	.218a	9d b0 a1	sta $a1b0,x			sta EntityData.ignoreColl,x
4111	.218d					_toggleXForce
4112	.218d	a6 02		ldx $02			ldx CurrentEntity
4113	.218f	bd 6b a0	lda $a06b,x		lda EntityData.direction,x
4114	.2192	49 01		eor #$01		eor #1
4115	.2194	9d 6b a0	sta $a06b,x		sta EntityData.direction,x
4116	.2197	20 90 22	jsr $2290		jsr setEntSpriteForDirection
4117	.219a	80 18		bra $21b4		gra entGhostCheckY
4118	.219c					_addXDelta
4119	.219c	20 9a 24	jsr $249a		jsr collideEntAgainstRest
4120	.219f	b0 e0		bcs $2181		bcs _togglex
4121	.21a1	a6 02		ldx $02				ldx CurrentEntity
4122	.21a3	bd b0 a1	lda $a1b0,x			lda EntityData.ignoreColl,x
4123	.21a6	29 fe		and #$fe			and #$fe ; clear bit 0
4124	.21a8	9d b0 a1	sta $a1b0,x			sta EntityData.ignoreColl,x
4125	.21ab					_ignoreCollision
435	.21ab	e8		inx			inx
436	.21ac	e8		inx			inx
4127	.21ad	20 8d 0e	jsr $0e8d		jsr addXWithMSBAndClip
4128	.21b0	a5 2f		lda $2f			lda DidClipX
4129	.21b2	d0 d9		bne $218d		bne _toggleXForce
4130	.21b4					entGhostCheckY
4131	.21b4	a9 cf		lda #$cf		lda #<entGhostYResults
4132	.21b6	85 06		sta $06			sta Pointer1
4133	.21b8	a9 21		lda #$21		lda #>entGhostYResults
4134	.21ba	85 07		sta $07			sta Pointer1+1
4135	.21bc	a6 02		ldx $02			ldx CurrentEntity
4136	.21be	bd 97 a1	lda $a197,x		lda EntityData.speed,x
4137	.21c1	a8		tay			tay
4138	.21c2	bd 6b a0	lda $a06b,x		lda EntityData.direction,x
4139	.21c5	29 02		and #$02		and #2
4140						; 2 10= DownRight
4141						; 3 11= DownLeft
4142	.21c7	d0 03		bne $21cc		bne _down
4143							; up
4144	.21c9	4c 45 1e	jmp $1e45		gra entUp
4145	.21cc					_down
4146	.21cc	4c 81 1e	jmp $1e81		gra entDown
4147	.21cf					entGhostYResults
4148	.21cf	a6 02		ldx $02			ldx CurrentEntity
4149	.21d1	a5 05		lda $05			lda CollisionResult
4150	.21d3	f0 16		beq $21eb		beq _entGhostCheckSprites
4151	.21d5					_toggleY
4152	.21d5	a6 02		ldx $02			ldx CurrentEntity
4153	.21d7	bd b0 a1	lda $a1b0,x		lda EntityData.ignoreColl,x
4154	.21da	d0 1e		bne $21fa		bne _ignoreCollision
4155	.21dc	09 02		ora #$02			ora #2
4156	.21de	9d b0 a1	sta $a1b0,x			sta EntityData.ignoreColl,x
4157	.21e1	bd 6b a0	lda $a06b,x			lda EntityData.direction,x
4158	.21e4	49 02		eor #$02			eor #2
4159	.21e6	9d 6b a0	sta $a06b,x			sta EntityData.direction,x
4160	.21e9					_entHitAndGoNext
4161	.21e9	80 7d		bra $2268		gra nextEnt
4162	.21eb					_entGhostCheckSprites
4163	.21eb	20 9a 24	jsr $249a		jsr collideEntAgainstRest
4164	.21ee	b0 e5		bcs $21d5		bcs _toggleY
4165	.21f0	a6 02		ldx $02				ldx CurrentEntity
4166	.21f2	bd b0 a1	lda $a1b0,x			lda EntityData.ignoreColl,x
4167	.21f5	29 fd		and #$fd			and #%11111101
4168	.21f7	9d b0 a1	sta $a1b0,x			sta EntityData.ignoreColl,x
4169	.21fa					_ignoreCollision
4170	.21fa	20 8f 1d	jsr $1d8f		jsr addYDeltaEnt
4171	.21fd	20 ad 22	jsr $22ad		jsr updateEntAnimAndSetSprite
4172	.2200	80 66		bra $2268		gra nextEnt

4174	.2202					entBat
4175							; we check to see if we can fall down
4176	.2202	ad 49 27	lda $2749		lda CollFrameForEnt+kEntity.bat ; this might change per frame
4177	.2205	85 1e		sta $1e			sta CollideSpriteBoxIndex
435	.2207	e8		inx			inx
436	.2208	e8		inx			inx
4179	.2209	86 1d		stx $1d			stx CollideSpriteToCheck
4180	.220b	a9 18		lda #$18		lda #<entBatYResults
4181	.220d	85 06		sta $06			sta Pointer1
4182	.220f	a9 22		lda #$22		lda #>entBatYResults
4183	.2211	85 07		sta $07			sta Pointer1+1
4184	.2213	a0 01		ldy #$01		ldy #1 ; fall fast
4185	.2215	4c 81 1e	jmp $1e81		gra entDown
4186	.2218					entBatYResults
4187	.2218	a6 02		ldx $02			ldx CurrentEntity
4188	.221a	a5 05		lda $05			lda CollisionResult
4189	.221c	d0 03		bne $2221		bne _dontFall
4190							; yes update Y
4191	.221e	20 8f 1d	jsr $1d8f		jsr addYDeltaEnt
4192	.2221					_dontFall
4193							; jump to normal left right update
4194	.2221	4c ed 1d	jmp $1ded		jmp entNormalMovement

4196	.2224					handleEntCollisionResult
4197	.2224	a6 02		ldx $02			ldx CurrentEntity
4198	.2226	a5 05		lda $05			lda CollisionResult
4199	.2228	f0 13		beq $223d		beq _addDeltas
4200	.222a	80 0c		bra $2238			bra _skipIgnore

4202	.222c					_entHitAndGoNext
4203	.222c	a6 02		ldx $02			ldx CurrentEntity
4204	.222e	bd b0 a1	lda $a1b0,x		lda EntityData.ignoreColl,x
4205	.2231	d0 1c		bne $224f	 	bne _ignoreCollision
4206	.2233	a9 04		lda #$04			lda #4
4207	.2235	9d b0 a1	sta $a1b0,x			sta EntityData.ignoreColl,x
4208	.2238					_skipIgnore
4209	.2238	20 82 22	jsr $2282		jsr setNextEntDir
4210	.223b	80 2b		bra $2268		gra nextEnt
4211	.223d					_addDeltas
4212	.223d	20 9a 24	jsr $249a		jsr collideEntAgainstRest
4213	.2240	b0 ea		bcs $222c		bcs _entHitAndGoNext
4214	.2242	a6 02		ldx $02				ldx CurrentEntity
4215	.2244	bd b0 a1	lda $a1b0,x			lda EntityData.ignoreColl,x
4216	.2247	f0 06		beq $224f			beq _ignoreCollision
4217	.2249	38		sec					sec			; hasn't collided so clear flag
4218	.224a	e9 01		sbc #$01				sbc #1
4219	.224c	9d b0 a1	sta $a1b0,x				sta EntityData.ignoreColl,x
4220	.224f					_ignoreCollision
4221	.224f	20 8f 1d	jsr $1d8f		jsr addYDeltaEnt ; will set X to current Ent
435	.2252	e8		inx			inx
436	.2253	e8		inx			inx
4223	.2254	20 8d 0e	jsr $0e8d		jsr addXWithMSBAndClip
4224	.2257	a5 2f		lda $2f			lda DidClipX
4225	.2259	f0 0d		beq $2268		beq _skipFlipDueToX
4226	.225b	bd 30 a3	lda $a330,x			lda mplexBuffer.xpos,x	; x was increased above
4227	.225e	38		sec				sec
4228	.225f	ed f5 a1	sbc $a1f5			sbc checkSpriteToCharData.xDeltaCheck ; undo the move
4229	.2262	9d 30 a3	sta $a330,x			sta mplexBuffer.xpos,x
4230	.2265	20 82 22	jsr $2282			jsr setNextEntDir
4231	.2268					_skipFlipDueToX
4232	.2268					nextEnt
4233	.2268	a6 02		ldx $02			ldx CurrentEntity
4234	.226a	4c be 1d	jmp $1dbe		jmp updateEntitiesLoop

4236	.226d					entBubble
4237	.226d	bd 72 a3	lda $a372,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
4238	.2270	38		sec			sec
4239	.2271	e9 01		sbc #$01		sbc #1
4240	.2273	d0 05		bne $227a		bne _safe
4241	.2275	9e 84 a0	stz $a084,x			stz EntityData.active,x
4242	.2278	a9 ff		lda #$ff			lda #$FF ; disable sprite
4243	.227a					_safe
4244	.227a	9d 72 a3	sta $a372,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
4245	.227d	20 ad 22	jsr $22ad		jsr updateEntAnimAndSetSprite
4246	.2280	80 e6		bra $2268		gra nextEnt ; for now

4248	.2282					setNextEntDir
4249	.2282	20 9f 22	jsr $229f		jsr getEntTableIndex
4250	.2285	b9 e4 26	lda $26e4,y		lda NextDirectionLUT,y
4251	.2288	9d 6b a0	sta $a06b,x		sta EntityData.direction,x
4252	.228b	05 0f		ora $0f			ora ZPTemp ; add the ent type offset to it
4253	.228d	a8		tay			tay
4254	.228e	80 03		bra $2293		gra setEntFrameForDir

4256	.2290					setEntSpriteForDirection
4257	.2290	20 9f 22	jsr $229f		jsr getEntTableIndex
4258							;jmp setEntFrameForDir
4259	.2293					setEntFrameForDir
4260	.2293	b9 04 27	lda $2704,y		lda BaseAnimeFrameForDir,y
4261	.2296	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
4262	.2299	18		clc			clc
4263	.229a	7d e8 a0	adc $a0e8,x		adc EntityData.animFrame,x
4264	.229d	80 34		bra $22d3		gra SetEntSpriteFromFrame
4265							;rts

4267	.229f					getEntTableIndex
4268	.229f	a6 02		ldx $02			ldx CurrentEntity
4269	.22a1	bd 52 a0	lda $a052,x		lda EntityData.type,x
4270	.22a4	0a		asl a			asl a
4271	.22a5	0a		asl a			asl a
4272	.22a6	85 0f		sta $0f			sta ZPTemp
4273	.22a8	1d 6b a0	ora $a06b,x		ora EntityData.direction,x
4274	.22ab	a8		tay			tay
4275	.22ac	60		rts			rts

4277	.22ad					updateEntAnimAndSetSprite
4278	.22ad	bd 52 a0	lda $a052,x		lda EntityData.type,x
4279	.22b0	a8		tay			tay
4280	.22b1	fe b6 a0	inc $a0b6,x		inc EntityData.animTimer,x
4281	.22b4	bd b6 a0	lda $a0b6,x		lda EntityData.animTimer,x
4282	.22b7	d9 54 27	cmp $2754,y		cmp AnimFrameTimerForEnt,y
4283	.22ba	d0 3d		bne $22f9		bne SetEntSpriteFromFrame._notAnimUpdate ; rts
4284	.22bc	9e b6 a0	stz $a0b6,x			stz EntityData.animTimer,x
4285	.22bf	fe e8 a0	inc $a0e8,x			inc EntityData.animFrame,x
4286	.22c2	bd e8 a0	lda $a0e8,x			lda EntityData.animFrame,x
4287	.22c5	d9 38 27	cmp $2738,y			cmp FrameCountForEnt,y
4288	.22c8	d0 05		bne $22cf			bne _dontResetFrames
4289	.22ca	a9 00		lda #$00				lda #0
4290	.22cc	9d e8 a0	sta $a0e8,x				sta EntityData.animFrame,x
4291	.22cf						_dontResetFrames
4292	.22cf	18		clc				clc
4293	.22d0	7d cf a0	adc $a0cf,x			adc EntityData.animBase,x
4294	.22d3					SetEntSpriteFromFrame
4295	.22d3	9d f2 a2	sta $a2f2,x		sta mplexBuffer.sprp+kEntsSpriteOffset,x ; this needs to be x16 | $800
4296	.22d6	9e 12 a3	stz $a312,x		stz mplexBuffer.sprph+kEntsSpriteOffset,x
4297	.22d9	1e f2 a2	asl $a2f2,x		asl mplexBuffer.sprp+kEntsSpriteOffset,x ; x2
4298	.22dc	3e 12 a3	rol $a312,x		rol mplexBuffer.sprph+kEntsSpriteOffset,x
4299	.22df	1e f2 a2	asl $a2f2,x		asl mplexBuffer.sprp+kEntsSpriteOffset,x ; x4
4300	.22e2	3e 12 a3	rol $a312,x		rol mplexBuffer.sprph+kEntsSpriteOffset,x
4301	.22e5	1e f2 a2	asl $a2f2,x		asl mplexBuffer.sprp+kEntsSpriteOffset,x ; x8
4302	.22e8	3e 12 a3	rol $a312,x		rol mplexBuffer.sprph+kEntsSpriteOffset,x
4303	.22eb	1e f2 a2	asl $a2f2,x		asl mplexBuffer.sprp+kEntsSpriteOffset,x ; x16
4304	.22ee	3e 12 a3	rol $a312,x		rol mplexBuffer.sprph+kEntsSpriteOffset,x
4305	.22f1	bd 12 a3	lda $a312,x		lda mplexBuffer.sprph+kEntsSpriteOffset,x
4306	.22f4	09 08		ora #$08		ora #$08
4307	.22f6	9d 12 a3	sta $a312,x		sta mplexBuffer.sprph+kEntsSpriteOffset,x
4308	.22f9					_notAnimUpdate
4309	.22f9	60		rts			rts


4312	.22fa					updateBubbles
4313	.22fa	ae c9 a1	ldx $a1c9		ldx EntityData.numPipes
4314	.22fd	f0 4a		beq $2349		beq _exit
4315	.22ff	ad 49 a0	lda $a049			lda TickDowns.bubbleTimer
4316	.2302	d0 45		bne $2349			bne _exit
4317	.2304	ae d3 a1	ldx $a1d3				ldx EntityData.pipeBubbleStart
4318	.2307					_findFreeEnt
4319	.2307	bd 84 a0	lda $a084,x		lda EntityData.active,x
4320	.230a	f0 08		beq $2314		beq _foundOne
4321	.230c	e8		inx				inx
4322	.230d	ec 51 a0	cpx $a051			cpx EntityData.number
4323	.2310	d0 f5		bne $2307			bne _findFreeEnt
4324	.2312	80 35		bra $2349				bra _exit
4325	.2314					_foundOne
4326	.2314	86 10		stx $10			stx ZPTemp2 ; bubble ent number
4327	.2316	a9 01		lda #$01		lda #1
4328	.2318	9d 84 a0	sta $a084,x		sta EntityData.active,x
4329	.231b	ac d2 a1	ldy $a1d2		ldy EntityData.lastPipeUsed
4330	.231e	b9 ca a1	lda $a1ca,y		lda EntityData.pipeIndex,y
4331	.2321	20 ad 1a	jsr $1aad		jsr convertIndexToEntSpriteXY
4332	.2324	bd 32 a3	lda $a332,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x
4333	.2327	38		sec			sec
4334	.2328	e9 04		sbc #$04		sbc #4
4335	.232a	9d 32 a3	sta $a332,x		sta mplexBuffer.xpos+kEntsSpriteOffset,x
4336	.232d	b0 05		bcs $2334		bcs +
4337	.232f	a9 03		lda #$03			lda #3
4338	.2331	9d 52 a3	sta $a352,x			sta mplexBuffer.xmsb+kEntsSpriteOffset,x
4339	.2334	a9 1e		lda #$1e	+	lda #kTimers.spawnBubble
4340	.2336	8d 49 a0	sta $a049		sta TickDowns.bubbleTimer
4341	.2339	ad d2 a1	lda $a1d2		lda EntityData.lastPipeUsed
4342	.233c	18		clc			clc
4343	.233d	69 01		adc #$01		adc #1
4344	.233f	cd c9 a1	cmp $a1c9		cmp EntityData.numPipes
4345	.2342	d0 02		bne $2346		bne _store
4346	.2344	a9 00		lda #$00			lda #0
4347	.2346					_store
4348	.2346	8d d2 a1	sta $a1d2		sta EntityData.lastPipeUsed
4349	.2349					_exit
4350	.2349	60		rts			rts

4352	.234a					entBoss
4353	.234a	bd 1a a1	lda $a11a,x		lda EntityData.entState,x
4354	.234d	a8		tay			tay
14	.234e	b9 59 23	lda $2359,y		lda BossLUT.hi,y
15	.2351	48		pha			pha
16	.2352	b9 57 23	lda $2357,y		lda BossLUT.lo,y
17	.2355	48		pha			pha
18	.2356	60		rts			rts
4356	.2357					BossLut
26	>2357	5a c0				lo .byte <(BossNormal,BossDeath)-1
27	>2359	23 23				hi .byte >(BossNormal,BossDeath)-1

4358	.235b					BossNormal
4359	.235b	bd 9e a0	lda $a09e,x		lda EntityData.movTimer+1,x
4360	.235e	f0 08		beq $2368		beq _notFlash
4361	.2360	de 9e a0	dec $a09e,x			dec EntityData.movTimer+1,x
4362	.2363	d0 03		bne $2368			bne _notFlash
4363	.2365	20 73 1d	jsr $1d73				jsr setBossToCorrectColour
4364	.2368					_notFlash
4365	.2368	20 2c 24	jsr $242c		jsr AnimateUpperHalfBoss
4366	.236b	de 9d a0	dec $a09d,x		dec EntityData.movTimer,x
4367	.236e	f0 3f		beq $23af		beq _doneMove
4368	.2370	bd 9d a0	lda $a09d,x			lda EntityData.movTimer,x
4369	.2373	c9 10		cmp #$10			cmp #16
4370	.2375	b0 45		bcs $23bc			bcs _noMove
4371	.2377	20 fb 23	jsr $23fb				jsr AnimateLowerHalfBoss
4372	.237a	bd 6b a0	lda $a06b,x				lda EntityData.direction,x
4373	.237d	d0 1b		bne $239a				bne _left
4374	.237f	de 32 a3	dec $a332,x					dec mplexBuffer.xpos+kEntsSpriteOffset,x
4375	.2382	de 34 a3	dec $a334,x					dec mplexBuffer.xpos+kEntsSpriteOffset+2,x
4376	.2385	de 33 a3	dec $a333,x					dec mplexBuffer.xpos+kEntsSpriteOffset+1,x
4377	.2388	de 35 a3	dec $a335,x					dec mplexBuffer.xpos+kEntsSpriteOffset+3,x
4378	.238b	bd 32 a3	lda $a332,x					lda mplexBuffer.xpos+kEntsSpriteOffset,x
4379										; cmp #kBounds.screenMinX this is now 0
4380										.cerror kBounds.screenMinX != 0, "put cmp back"
4381	.238e	d0 2c		bne $23bc					bne _noMove
4382	.2390									_toggleDir
4383	.2390	bd 6b a0	lda $a06b,x						lda EntityData.direction,x
4384	.2393	49 02		eor #$02						eor #2 ; switch from 0 & 2
4385	.2395	9d 6b a0	sta $a06b,x						sta EntityData.direction,x
4386	.2398	80 22		bra $23bc						bra _noMove
4387	.239a						_left
4388	.239a	fe 32 a3	inc $a332,x			inc mplexBuffer.xpos+kEntsSpriteOffset,x
4389	.239d	fe 34 a3	inc $a334,x			inc mplexBuffer.xpos+kEntsSpriteOffset+2,x
4390	.23a0	fe 33 a3	inc $a333,x			inc mplexBuffer.xpos+kEntsSpriteOffset+1,x
4391	.23a3	fe 35 a3	inc $a335,x			inc mplexBuffer.xpos+kEntsSpriteOffset+3,x
4392	.23a6	bd 33 a3	lda $a333,x			lda mplexBuffer.xpos+kEntsSpriteOffset+1,x
4393	.23a9	c9 e7		cmp #$e7			cmp #$ff-24
4394	.23ab	f0 e3		beq $2390			beq _toggleDir
4395	.23ad	80 0d		bra $23bc				bra _noMove
4396	.23af					_doneMove
4397	.23af	bd 52 a0	lda $a052,x		lda EntityData.type,x
4398	.23b2	38		sec			sec
4399	.23b3	e9 08		sbc #$08		sbc #kEntity.bear
4400	.23b5	a8		tay			tay
4401	.23b6	b9 bf 23	lda $23bf,y		lda BossMoveTimerLut,y
4402	.23b9	9d 9d a0	sta $a09d,x		sta EntityData.movTimer,x
4403	.23bc					_noMove
4404	.23bc	4c 68 22	jmp $2268		jmp nextEnt

4406	>23bf	20 18				BossMoveTimerLut .byte 32,24

4408	.23c1					BossDeath
4409	.23c1	de 72 a3	dec $a372,x		dec mplexBuffer.ypos+kEntsSpriteOffset,x
4410	.23c4	de 73 a3	dec $a373,x		dec mplexBuffer.ypos+kEntsSpriteOffset+1,x
4411	.23c7	fe 74 a3	inc $a374,x		inc mplexBuffer.ypos+kEntsSpriteOffset+2,x
4412	.23ca	fe 75 a3	inc $a375,x		inc mplexBuffer.ypos+kEntsSpriteOffset+3,x
4413	.23cd	de 32 a3	dec $a332,x		dec mplexBuffer.xpos+kEntsSpriteOffset,x
4414	.23d0	de 34 a3	dec $a334,x		dec mplexBuffer.xpos+kEntsSpriteOffset+2,x
4415	.23d3	fe 33 a3	inc $a333,x		inc mplexBuffer.xpos+kEntsSpriteOffset+1,x
4416	.23d6	fe 35 a3	inc $a335,x		inc mplexBuffer.xpos+kEntsSpriteOffset+3,x
4417	.23d9	de 9d a0	dec $a09d,x		dec EntityData.movTimer,x
4418	.23dc	d0 1a		bne $23f8		bne _exit
4419	.23de	9e 84 a0	stz $a084,x			stz EntityData.active,x
4420	.23e1	9e 85 a0	stz $a085,x			stz EntityData.active+1,x
4421	.23e4	9e 86 a0	stz $a086,x			stz EntityData.active+2,x
4422	.23e7	9e 87 a0	stz $a087,x			stz EntityData.active+3,x
4423	.23ea	a9 ff		lda #$ff			lda #$ff
4424	.23ec	9d 72 a3	sta $a372,x			sta mplexBuffer.ypos+kEntsSpriteOffset,x
4425	.23ef	9d 73 a3	sta $a373,x			sta mplexBuffer.ypos+kEntsSpriteOffset+1,x
4426	.23f2	9d 74 a3	sta $a374,x			sta mplexBuffer.ypos+kEntsSpriteOffset+2,x
4427	.23f5	9d 75 a3	sta $a375,x			sta mplexBuffer.ypos+kEntsSpriteOffset+3,x
4428	.23f8					_exit
4429	.23f8	4c 68 22	jmp $2268		jmp nextEnt

4431	.23fb					AnimateLowerHalfBoss
4432	.23fb	bd b6 a0	lda $a0b6,x		lda EntityData.animTimer,x
4433	.23fe	f0 04		beq $2404		beq _anim
4434	.2400	de b6 a0	dec $a0b6,x			dec EntityData.animTimer,x
4435	.2403	60		rts				rts
4436	.2404					_anim
4437	.2404	bd ea a0	lda $a0ea,x		lda EntityData.animFrame+2,x
4438	.2407	49 01		eor #$01		eor #1
4439	.2409	9d ea a0	sta $a0ea,x		sta EntityData.animFrame+2,x
4440	.240c	85 0f		sta $0f			sta ZPTemp
4441	.240e	bd d1 a0	lda $a0d1,x		lda EntityData.animBase+2,x
4442	.2411	18		clc			clc
4443	.2412	65 0f		adc $0f			adc ZPTemp
4444	.2414	e8		inx			inx
4445	.2415	e8		inx			inx
4446	.2416	20 d3 22	jsr $22d3		jsr SetEntSpriteFromFrame
4447	.2419	bd d0 a0	lda $a0d0,x		lda EntityData.animBase+1,x ; x has been increased by 2
4448	.241c	18		clc			clc
4449	.241d	65 0f		adc $0f			adc ZPTemp
4450	.241f	e8		inx			inx
4451	.2420	20 d3 22	jsr $22d3		jsr SetEntSpriteFromFrame
4452	.2423	ca		dex			dex
4453	.2424	ca		dex			dex
4454	.2425	ca		dex			dex
4455	.2426	a9 04		lda #$04		lda #4
4456	.2428	9d b6 a0	sta $a0b6,x		sta EntityData.animTimer,x
4457	.242b	60		rts			rts

4459						;<<<<<32--0--32>>>>>
4460	.242c					AnimateUpperHalfBoss
4461	.242c	86 0f		stx $0f			stx ZPTemp
435	.242e	e8		inx			inx
436	.242f	e8		inx			inx
4463	.2430	20 52 16	jsr $1652		jsr convertXSingleByteEntX
4464	.2433	85 10		sta $10			sta ZPTemp2
4465	.2435	a2 00		ldx #$00		ldx #0 ; player
4466	.2437	20 52 16	jsr $1652		jsr convertXSingleByteEntX
4467	.243a	85 11		sta $11			sta ZPTemp3
4468	.243c	c5 10		cmp $10			cmp ZPTemp2
4469	.243e	90 0c		bcc $244c		bcc _playerLeft
4470	.2440	e5 10		sbc $10				sbc ZPTemp2 ; carry is already set
4471	.2442	c9 20		cmp #$20			cmp #32
4472	.2444	90 03		bcc $2449			bcc _under
4473	.2446	a9 02		lda #$02				lda #2
4474	>2448	2c							.byte $2c ; bit XXXX
4475	.2449						_under
4476	.2449	a9 01		lda #$01			lda #1
4477	>244b	2c						.byte $2c
4478	.244c					_playerLeft
4479	.244c	a9 00		lda #$00		lda #0
4480	.244e	85 12		sta $12			sta ZPTemp4
4481	.2450	a6 0f		ldx $0f			ldx ZPTemp
4482	.2452	9d e8 a0	sta $a0e8,x		sta EntityData.animFrame,x
4483	.2455	18		clc			clc
4484	.2456	7d cf a0	adc $a0cf,x		adc EntityData.animBase,x
4485	.2459	20 d3 22	jsr $22d3		jsr SetEntSpriteFromFrame
4486	.245c	a5 12		lda $12			lda ZPTemp4
4487	.245e	18		clc			clc
4488	.245f	7d d0 a0	adc $a0d0,x		adc EntityData.animBase+1,x
4489	.2462	e8		inx			inx
4490	.2463	20 d3 22	jsr $22d3		jsr SetEntSpriteFromFrame
4491	.2466	ca		dex			dex
4492	.2467	60		rts			rts

4494						; }}}
4495						.send sEntity
4496						; ----- @Collision@ -----
4497						.dsection sCollision
4498						.section sCollision
4499						; {{{
4500	.2468					collideBulletAgainstRest
4501	.2468	a0 03		ldy #$03		ldy #3
4502	.246a	a2 01		ldx #$01		ldx #1
4503	.246c	80 04		bra $2472		bra collideAgainstRestEntry
4504	.246e					collidePlayerAgainstRest
4505	.246e	a2 00		ldx #$00		ldx #0
4506	.2470	a0 00		ldy #$00		ldy #0
4507	.2472					collideAgainstRestEntry
4508	.2472	bd 70 a3	lda $a370,x		lda mplexBuffer.ypos,x
4509	.2475	18		clc			clc
4510	.2476	79 42 16	adc $1642,y		adc CollisionBoxesY,y
4511	.2479	85 0a		sta $0a			sta Pointer3
4512	.247b	85 19		sta $19			sta TestingSprY1
4513	.247d	18		clc			clc
4514	.247e	79 4a 16	adc $164a,y		adc CollisionBoxesH,y
4515	.2481	85 0b		sta $0b			sta Pointer3+1
4516	.2483	85 1a		sta $1a			sta TestingSprY2
4517	.2485	20 52 16	jsr $1652		jsr convertXSingleByteEntX
4518	.2488	18		clc			clc
4519	.2489	79 32 16	adc $1632,y		adc CollisionBoxesX,y
4520	.248c	85 17		sta $17			sta TestingSprX1
4521	.248e	18		clc			clc
4522	.248f	79 3a 16	adc $163a,y		adc CollisionBoxesW,y
4523	.2492	85 18		sta $18			sta TestingSprX2
4524	.2494	a9 ff		lda #$ff		lda #$FF
4525	.2496	85 02		sta $02			sta CurrentEntity ; so we don't skip any
4526	.2498	80 28		bra $24c2		bra collideAgainstEntPlayerEntry
4527	.249a					collideEntAgainstRest
4528							; start at the mplex y + 1 and check to see if the Y is in Range
4529							; to do this we need to know which collsiion box the ent we are is using
4530							; and the one that the other is using
4531							; a hit is if my x1 <= y2 && y1 <= x2
4532							; where x1 = my Ent Y, x2 = my Ent Y+Height
4533							; y1 = Other Ent Y, y2 = other Ent Y+Height
4534							;dec $d020
4535	.249a	a6 02		ldx $02			ldx CurrentEntity
4536	.249c	a0 00		ldy #$00		ldy #0
4537	.249e	bd 33 a1	lda $a133,x		lda EntityData.collisionX1,x
4538	.24a1	18		clc			clc
4539	.24a2	6d f5 a1	adc $a1f5		adc checkSpriteToCharData.xDeltaCheck
4540	.24a5	85 17		sta $17			sta TestingSprX1 ; cache X
4541	.24a7	bd 4c a1	lda $a14c,x		lda EntityData.collisionX2,x
4542	.24aa	18		clc			clc
4543	.24ab	6d f5 a1	adc $a1f5		adc checkSpriteToCharData.xDeltaCheck
4544	.24ae	85 18		sta $18			sta TestingSprX2
4545	.24b0	bd 65 a1	lda $a165,x		lda EntityData.collisionY1,x
4546	.24b3	18		clc			clc
4547	.24b4	6d f6 a1	adc $a1f6		adc checkSpriteToCharData.yDeltaCheck
4548	.24b7	85 19		sta $19			sta TestingSprY1
4549	.24b9	bd 7e a1	lda $a17e,x		lda EntityData.collisionY2,x
4550	.24bc	18		clc			clc
4551	.24bd	6d f6 a1	adc $a1f6		adc checkSpriteToCharData.yDeltaCheck
4552	.24c0	85 1a		sta $1a			sta TestingSprY2
4553							;inc $d020
4554	.24c2					collideAgainstEntPlayerEntry
4555							;dec $d020
4556	.24c2	a0 02		ldy #$02		ldy #2 ; other slot
4557	.24c4	a2 00		ldx #$00		ldx #0
4558	.24c6	e4 02		cpx $02		-	cpx CurrentEntity
4559	.24c8	f0 1f		beq $24e9		beq Ent_Ent_Coll_skipSelf
4560	.24ca	bd 84 a0	lda $a084,x		lda EntityData.active,x
4561	.24cd	f0 1a		beq $24e9		beq Ent_Ent_Coll_skipSelf
4562	.24cf	30 18		bmi $24e9		bmi Ent_Ent_Coll_skipSelf ; if there active is 0 or - don't collide
4563	.24d1	64 0f		stz $0f			stz ZPTemp
4564	.24d3	a5 19		lda $19			lda TestingSprY1
4565	.24d5	dd 7e a1	cmp $a17e,x		cmp EntityData.collisionY2,x
4566	.24d8	20 3c 25	jsr $253c		jsr doMinMaxBitTest
4567	.24db	bd 65 a1	lda $a165,x		lda EntityData.collisionY1,x
4568	.24de	c5 1a		cmp $1a			cmp TestingSprY2
4569	.24e0	20 3c 25	jsr $253c		jsr doMinMaxBitTest
4570	.24e3	a5 0f		lda $0f			lda ZPTemp
4571	.24e5	29 03		and #$03		and #3
4572	.24e7	f0 08		beq $24f1		beq hitY
4573	.24e9					Ent_Ent_Coll_skipSelf
4574	.24e9	e8		inx			inx
4575	.24ea	ec 51 a0	cpx $a051		cpx EntityData.number
4576	.24ed	d0 d7		bne $24c6		bne -
4577							;inc $d020
4578	.24ef	18		clc			clc
4579	.24f0	60		rts			rts

4581	.24f1					hitY ; now we need to do the same thing but for the X
4582	.24f1	64 0f		stz $0f			stz ZPTemp
4583	.24f3	a5 17		lda $17			lda TestingSprX1
4584	.24f5	dd 4c a1	cmp $a14c,x		cmp EntityData.collisionX2,x
4585	.24f8	20 3c 25	jsr $253c		jsr doMinMaxBitTest
4586	.24fb	bd 33 a1	lda $a133,x		lda EntityData.collisionX1,x
4587	.24fe	c5 18		cmp $18			cmp TestingSprX2
4588	.2500	20 3c 25	jsr $253c		jsr doMinMaxBitTest
4589	.2503	a5 0f		lda $0f			lda ZPTemp
4590	.2505	29 03		and #$03		and #3
4591	.2507	f0 02		beq $250b		beq hitX
4592	.2509	80 de		bra $24e9			bra Ent_Ent_Coll_skipSelf
4593	.250b					hitX
4594	.250b	38		sec			sec
4595	.250c	60		rts			rts

4597	.250d					MakeMinMaxXYForX
4598	.250d	bd 52 a0	lda $a052,x		lda EntityData.type,x
4599	.2510	a8		tay			tay
4600	.2511	b9 46 27	lda $2746,y		lda CollFrameForEnt,y
4601	.2514	a8		tay			tay
435	.2515	e8		inx			inx
436	.2516	e8		inx			inx
4603	.2517	20 52 16	jsr $1652		jsr convertXSingleByteEntX
440	.251a	ca		dex			dex
441	.251b	ca		dex			dex
4605	.251c	18		clc			clc
4606	.251d	79 32 16	adc $1632,y		adc CollisionBoxesX,y
4607	.2520	9d 33 a1	sta $a133,x		sta EntityData.collisionX1,x
4608	.2523	18		clc			clc
4609	.2524	79 3a 16	adc $163a,y		adc CollisionBoxesW,y
4610	.2527	9d 4c a1	sta $a14c,x		sta EntityData.collisionX2,x
4611	.252a	bd 72 a3	lda $a372,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
4612	.252d	18		clc			clc
4613	.252e	79 42 16	adc $1642,y		adc CollisionBoxesY,y
4614	.2531	9d 65 a1	sta $a165,x		sta EntityData.collisionY1,x
4615	.2534	18		clc			clc
4616	.2535	79 4a 16	adc $164a,y		adc CollisionBoxesH,y
4617	.2538	9d 7e a1	sta $a17e,x		sta EntityData.collisionY2,x
4618	.253b	60		rts			rts

4620	.253c					doMinMaxBitTest
4621	.253c	f0 04		beq $2542		beq _secPass
4622	.253e	90 02		bcc $2542		bcc _secPass
4623	.2540	b0 01		bcs $2543			bcs _secFail
4624	.2542					_secPass
4625	.2542	18		clc			clc
4626	.2543					_secFail
4627	.2543	26 0f		rol $0f			rol ZPTemp
4628	.2545	60		rts			rts
4629						.send sCollision
4630						; }}}

4632	.2546					plotStringAAtIndexXGameScreen
4633	.2546	9c 7e 25	stz $257e		stz psaaixCommon._cram+1
4634	.2549	80 05		bra $2550		bra psaaixCommon
4635	.254b					plotStringAAtIndexX
4636	.254b	a0 01		ldy #$01		ldy #1
4637	.254d	8c 7e 25	sty $257e		sty psaaixCommon._cram+1
4638	.2550					psaaixCommon
4639	.2550	9c 25 9f	stz $9f25		stz kVERA.CTRL
4640	.2553	bd 52 2b	lda $2b52,x		lda TitleScreenData.stringPos.lo,x
4641	.2556	8d 20 9f	sta $9f20		sta kVERA.ADDR_Lo
4642	.2559	bd 64 2b	lda $2b64,x		lda TitleScreenData.stringPos.hi,x
4643	.255c	8d 21 9f	sta $9f21		sta kVERA.ADDR_Mid
4644	.255f	bd 76 2b	lda $2b76,x		lda TitleScreenData.stringPos.bank,x
4645	.2562	8d 22 9f	sta $9f22		sta kVERA.ADDR_Hi
4646	.2565	bc 40 2b	ldy $2b40,x		ldy TitleScreenData.string,x
4647	.2568	b9 94 2b	lda $2b94,y		lda StringTableLUTLo,y
4648	.256b	85 06		sta $06			sta Pointer1.lo
4649	.256d	b9 a4 2b	lda $2ba4,y		lda StringTableLUTHi,y
4650	.2570	85 07		sta $07			sta Pointer1.hi
4651	.2572	a0 00		ldy #$00		ldy #0
4652	.2574	b1 06		lda ($06),y	_l	lda (Pointer1),y
4653	.2576	c9 ff		cmp #$ff		cmp #$ff
4654	.2578	f0 0b		beq $2585		beq _done
4655	.257a	8d 23 9f	sta $9f23			sta kVERA.DATA_0
4656	.257d						_cram
4657	.257d	a9 01		lda #$01			lda #$01	; this needs to changed depending on the screen mode
4658	.257f	8d 23 9f	sta $9f23			sta kVERA.DATA_0
4659	.2582	c8		iny				iny
4660	.2583	d0 ef		bne $2574			bne _l
4661	.2585					_done
4662	.2585	60		rts			rts



4666						; ----- @multiplexor@ -----
4667						.dsection multiplexer
4668						.section multiplexer
4669						; {{{
4670	.2586					setirq
4671	.2586	78		sei			sei			 ;set interrupt disable
4672	.2587	a9 01		lda #$01		lda #1
4673	.2589	8d 26 9f	sta $9f26		sta kVERA.IEN ; enable vsync pulse
4674	.258c	a9 98		lda #$98		lda #<IRQ
4675	.258e	8d 14 03	sta $0314		sta $0314
4676	.2591	a9 25		lda #$25		lda #>IRQ
4677	.2593	8d 15 03	sta $0315		sta $0315
4678	.2596	58		cli			cli
4679	.2597	60		rts			rts

4681	.2598					IRQ
4682	.2598	ee f9 a1	inc $a1f9		inc mplexZP.lsbtod
4683	.259b	ad 27 9f	lda $9f27		lda kVERA.ISR
4684	.259e	8d 27 9f	sta $9f27		sta kVERA.ISR

4686	.25a1	20 06 ff	jsr $ff06		jsr GETJOY
4687							; blast the Sprite data into VRAM
4688	.25a4	9c 25 9f	stz $9f25		stz kVERA.CTRL
4689	.25a7	a9 08		lda #$08		lda #<kVERA.SpriteAttributes+8 ; skip first due to cursor
4690	.25a9	8d 20 9f	sta $9f20		sta kVERA.ADDR_Lo
4691	.25ac	a9 50		lda #$50		lda #>kVERA.SpriteAttributes
4692	.25ae	8d 21 9f	sta $9f21		sta kVERA.ADDR_Mid
4693	.25b1	a9 1f		lda #$1f		lda #`kVERA.SpriteAttributes|kVERA.inc_1
4694	.25b3	8d 22 9f	sta $9f22		sta kVERA.ADDR_Hi

4696	.25b6	a2 00		ldx #$00		ldx #0
4697	.25b8	bd f0 a2	lda $a2f0,x	-	lda mplexBuffer.sprp,x
4698	.25bb	8d 23 9f	sta $9f23		sta kVERA.DATA_0
4699	.25be	bd 10 a3	lda $a310,x		lda mplexBuffer.sprph,x
4700	.25c1	8d 23 9f	sta $9f23		sta kVERA.DATA_0
4701	.25c4	bd 30 a3	lda $a330,x		lda mplexBuffer.xpos,x
4702	.25c7	8d 23 9f	sta $9f23		sta kVERA.DATA_0
4703	.25ca	bd 50 a3	lda $a350,x		lda mplexBuffer.xmsb,x
4704	.25cd	8d 23 9f	sta $9f23		sta kVERA.DATA_0
4705	.25d0	bd 70 a3	lda $a370,x		lda mplexBuffer.ypos,x
4706	.25d3	8d 23 9f	sta $9f23		sta kVERA.DATA_0
4707	.25d6	9c 23 9f	stz $9f23		stz kVERA.DATA_0 ; for y high to be 0, it just as fast as a load
4708	.25d9	ad 23 9f	lda $9f23		lda kVERA.DATA_0
4709	.25dc	ad 23 9f	lda $9f23		lda kVERA.DATA_0 ; skip next two bytes
4710	.25df	e8		inx			inx
4711	.25e0	e0 1e		cpx #$1e		cpx #mplex.kMaxSpr-1
4712	.25e2	d0 d4		bne $25b8		bne -
4713	.25e4	7a		ply			ply
4714	.25e5	fa		plx			plx
4715	.25e6	68		pla			pla
4716	.25e7	40		rti			rti

4718						; }}}
4719						.send multiplexer
4720						; ----- @Sprite and Char@ -----
4721						.dsection sSprChar
4722						.section sSprChar
4723						; {{{
4724	.25e8					setupBackDisolveFruitChars
4725	.25e8	ae 24 a0	ldx $a024			ldx LevelData.levelGraphicsSet
4726	.25eb	bd dc 26	lda $26dc,x			lda BackCharsLUT.lo,x
4727	.25ee	85 06		sta $06				sta Pointer1.lo
4728	.25f0	bd e0 26	lda $26e0,x			lda BackCharsLUT.hi,x
4729	.25f3	85 07		sta $07				sta Pointer1.hi
4730								; set up VERA DEST
4731	.25f5	78		sei				sei
300						.if int(kVRAM.gameChars|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.25f6	a2 10		ldx #$10		ldx #len(VeraDESTAddressLUT)
304	={1048576:10,1052672:8,1052736:11,1053204:5,1053890:12,1054402:13,1054922:14,1055434:15,1055744:9,1058304:16,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVRAM.gameChars|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000,1055744,$100000,1052736,1053890,1054402,1054922,1055434,$102600]
							VeraDESTAddressLUT ..=[kVRAM.gameChars|kVERA.inc_1]
306						.endif
307	.25f8	20 16 2b	jsr $2b16	jsr setVERAAddressPort0_X

4733									; copy $680 bytes to VRAM
4734	.25fb	a2 05		ldx #$05				ldx #5
4735	.25fd	a0 00		ldy #$00				ldy #0
4736	.25ff	b1 06		lda ($06),y			-	lda (Pointer1),y
4737	.2601	8d 23 9f	sta $9f23				sta kVERA.DATA_0
4738	.2604	c8		iny					iny
4739	.2605	d0 f8		bne $25ff				bne -
4740	.2607	e6 07		inc $07					inc Pointer1.hi
4741	.2609	ca		dex					dex
4742	.260a	10 f3		bpl $25ff				bpl -
4743	.260c	b1 06		lda ($06),y			-	lda (Pointer1),y
4744	.260e	8d 23 9f	sta $9f23				sta kVERA.DATA_0
4745	.2611	c8		iny					iny
4746	.2612	c0 80		cpy #$80				cpy #$80
4747	.2614	d0 f6		bne $260c				bne -
4748	.2616	58		cli				cli
4749	.2617	60		rts				rts


4752	.2618					copyStuff
4753	.2618	a2 03		ldx #$03		ldx #len(CopyDataFields.values)-1
4754	.261a	86 0f		stx $0f			stx ZPTemp
4755							; use x to index and set up VRAM ports
4756	.261c	9c 25 9f	stz $9f25		stz kVERA.CTRL ; port 0
4757	.261f					_loopSet
4758	.261f	a6 0f		ldx $0f			ldx ZPTemp
4759	.2621	bd 61 5e	lda $5e61,x		lda CopyDataFields.dest.lo,x
4760	.2624	8d 20 9f	sta $9f20		sta kVERA.ADDR_Lo
4761	.2627	bd 65 5e	lda $5e65,x		lda CopyDataFields.dest.hi,x
4762	.262a	8d 21 9f	sta $9f21		sta kVERA.ADDR_Mid
4763	.262d	bd 69 5e	lda $5e69,x		lda CopyDataFields.dest.bank,x
4764	.2630	8d 22 9f	sta $9f22		sta kVERA.ADDR_Hi
4765	.2633	bd 59 5e	lda $5e59,x		lda CopyDataFields.src.lo,x
4766	.2636	85 06		sta $06			sta Pointer1.lo
4767	.2638	bd 5d 5e	lda $5e5d,x		lda CopyDataFields.src.hi,x
4768	.263b	85 07		sta $07			sta Pointer1.hi
4769	.263d	bd 6d 5e	lda $5e6d,x		lda CopyDataFields.pages,x
4770	.2640	aa		tax			tax
4771	.2641	a0 00		ldy #$00		ldy #0
4772	.2643					_loopPage
4773	.2643	b1 06		lda ($06),y		lda (Pointer1),y
4774	.2645	8d 23 9f	sta $9f23		sta kVERA.DATA_0
4775	.2648	c8		iny			iny
4776	.2649	d0 f8		bne $2643		bne _loopPage
4777	.264b	e6 07		inc $07			inc Pointer1.hi
4778	.264d	ca		dex			dex
4779	.264e	d0 f3		bne $2643		bne _loopPage
4780	.2650	c6 0f		dec $0f			dec ZPTemp
4781	.2652	10 cb		bpl $261f		bpl _loopSet
4782	.2654	60		rts			rts
4783						.cerror size(CopyDataFields.pages)-1	> 127, "need to change branch"



4787	.2655					PlotTransitionScreenAndMakeNextChars
4788	.2655	20 b7 26	jsr $26b7			jsr ClearMapScreenToSolidBlack
4789								; we need to copy in the current wall char
4790	.2658	78		sei				sei
300						.if int(kVRAM.gameChars+(124*4*8) | kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.2659	a2 11		ldx #$11		ldx #len(VeraDESTAddressLUT)
304	={1048576:10,1052672:8,1052736:11,1053204:5,1053890:12,1054402:13,1054922:14,1055434:15,1055744:9,1058304:16,1062272:17,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVRAM.gameChars+(124*4*8) | kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000,1055744,$100000,1052736,1053890,1054402,1054922,1055434,$102600,1062272]
							VeraDESTAddressLUT ..=[kVRAM.gameChars+(124*4*8) | kVERA.inc_1]
306						.endif
307	.265b	20 16 2b	jsr $2b16	jsr setVERAAddressPort0_X

4792	.265e	ae 24 a0	ldx $a024				ldx LevelData.levelGraphicsSet
4793	.2661	bd ee 46	lda $46ee,x				lda WallCharLUT.lo,x
4794	.2664	85 06		sta $06					sta Pointer1.lo
4795	.2666	bd f2 46	lda $46f2,x				lda WallCharLUT.hi,x
4796	.2669	85 07		sta $07					sta Pointer1.hi
4797	.266b	a0 00		ldy #$00				ldy #0
4798	.266d	b1 06		lda ($06),y			-	lda (Pointer1),y
4799	.266f	8d 23 9f	sta $9f23				sta kVERA.DATA_0
4800	.2672	c8		iny					iny
4801	.2673	c0 80		cpy #$80				cpy #(4*8*4) ; copy 4 chars
4802	.2675	d0 f6		bne $266d				bne -
4803	.2677	58		cli				cli

4805	.2678	a9 50		lda #$50			lda #kIntermission.firstExit
4806	.267a	85 15		sta $15				sta ActiveTileIndex
4807	.267c	8d 20 a0	sta $a020			sta LevelData.playerIndex
4808	.267f	8d 21 a0	sta $a021			sta LevelData.exitIndex
4809	.2682	a9 0e		lda #$0e			lda #kDoorOpen
4810	.2684	20 21 1a	jsr $1a21			jsr pltSingleTileNoLookupNew
4811	.2687	a9 5f		lda #$5f			lda #kIntermission.secondExit
4812	.2689	85 15		sta $15				sta ActiveTileIndex
4813	.268b	a9 0a		lda #$0a			lda #kDoorClosed
4814	.268d	20 21 1a	jsr $1a21			jsr pltSingleTileNoLookupNew
4815	.2690	a2 07		ldx #$07			ldx #(kTileXCount/2)-1
4816	.2692					_firstLoop
4817	.2692	8a		txa				txa
4818	.2693	48		pha				pha
4819	.2694	e6 15		inc $15				inc ActiveTileIndex
4820	.2696	a9 25		lda #$25			lda #kTiles.intermissionOldWall
4821	.2698	20 21 1a	jsr $1a21			jsr pltSingleTileNoLookupNew
4822	.269b	68		pla				pla
4823	.269c	aa		tax				tax
4824	.269d	ca		dex				dex
4825	.269e	10 f2		bpl $2692			bpl _firstLoop

4827	.26a0	20 17 0a	jsr $0a17			jsr incLevelGraphicSet
4828	.26a3	20 e8 25	jsr $25e8			jsr setupBackDisolveFruitChars

4830	.26a6	a2 07		ldx #$07			ldx #(kTileXCount/2)-1
4831	.26a8					_secondLoop
4832	.26a8	8a		txa				txa
4833	.26a9	48		pha				pha
4834	.26aa	e6 15		inc $15				inc ActiveTileIndex
4835	.26ac	a9 01		lda #$01			lda #kTiles.wall
4836	.26ae	20 1d 1a	jsr $1a1d			jsr pltSingleTileNew
4837	.26b1	68		pla				pla
4838	.26b2	aa		tax				tax
4839	.26b3	ca		dex				dex
4840	.26b4	10 f2		bpl $26a8			bpl _secondLoop
4841	.26b6	60		rts				rts

4843	.26b7					ClearMapScreenToSolidBlack
4844	.26b7	78		sei			sei
300						.if int(kVRAM.gameScreen | kVERA.inc_2) in VeraDESTAddressLUTLookup
302						.else
303	.26b8	a2 12		ldx #$12		ldx #len(VeraDESTAddressLUT)
304	={1048576:10,1052672:8,1052736:11,1053204:5,1053890:12,1054402:13,1054922:14,1055434:15,1055744:9,1058304:16,1062272:17,2031617:0,2039808:6,2043904:7,2048000:4,2101248:18,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVRAM.gameScreen | kVERA.inc_2):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000,1055744,$100000,1052736,1053890,1054402,1054922,1055434,$102600,1062272,$201000]
							VeraDESTAddressLUT ..=[kVRAM.gameScreen | kVERA.inc_2]
306						.endif
307	.26ba	20 16 2b	jsr $2b16	jsr setVERAAddressPort0_X

4846	.26bd	a2 17		ldx #$17			ldx #kTileYCount*2-1
4847	.26bf					_yloop
4848	.26bf	a0 1f		ldy #$1f			ldy #(kTileXCount*2)-1
4849	.26c1	a9 2f		lda #$2f			lda #47
4850	.26c3					_xloop
4851	.26c3	8d 23 9f	sta $9f23			sta kVERA.DATA_0
4852	.26c6	88		dey				dey
4853	.26c7	10 fa		bpl $26c3			bpl _xloop
4854	.26c9	ad 20 9f	lda $9f20			lda kVERA.ADDR_Lo
4855	.26cc	18		clc				clc
4856	.26cd	69 40		adc #$40			adc #128-64
4857	.26cf	8d 20 9f	sta $9f20			sta kVERA.ADDR_Lo
4858	.26d2	90 03		bcc $26d7			bcc +
4859	.26d4	ee 21 9f	inc $9f21				inc kVERA.ADDR_Mid
4860	.26d7	ca		dex			+	dex
4861	.26d8	10 e5		bpl $26bf			bpl _yloop
4862	.26da	58		cli			cli
4863	.26db	60		rts			rts

4865	.26dc					BackCharsLUT .block
4866	=($2cee,$336e,$39ee,$406e)			positions = (BackChars1,BackChars2,BackChars3,BackChars4)
4867	>26dc	ee 6e ee 6e				lo .byte <(positions)
4868	>26e0	2c 33 39 40				hi .byte >(positions)
4869						.bend

4871						; 0 = right, 1 = up, 2 = left, 3 = down
4872						;DirectionXLUT	.byte 6,	24-12,	25,		24-12
4873						;DirectionXLUT	.byte 8,	12,		24,	 	12
4874						;DirectionYLUT	.byte 50-8,	50,		50-8,	50-16 ; raw sprite Y offsets
4875	.26e4					NextDirectionLUT
4876	>26e4	03 03 01 01			.byte 3,3,1,1 ; heli
4877	>26e8	00 00 00 00			.byte 0,0,0,0 ; spring
4878	>26ec	02 02 00 00			.byte 2,2,0,0 ; worm
4879	>26f0	02 02 00 00			.byte 2,2,0,0 ; bat
4880	>26f4	03 00 01 02			.byte 3,0,1,2 ; ghost
4881	>26f8	03 03 01 01			.byte 3,3,1,1 ; spider
4882	>26fc	00 00 00 00			.byte 0,0,0,0 ; fish - not used
4883	>2700	00 00 00 00			.byte 0,0,0,0 ; flying thing - not used
4884	.2704					BaseAnimeFrameForDir
4885	>2704	a0 a0 a0 a0			.byte kSprBase+32,kSprBase+32,kSprBase+32,kSprBase+32 ; heli
4886	>2708	a8 a8 a8 a8			.byte kSprBase+40,kSprBase+40,kSprBase+40,kSprBase+40 ; spring
4887	>270c	b4 b4 b0 b0			.byte kSprBase+52,kSprBase+52,kSprBase+48,kSprBase+48 ; worm
4888	>2710	bc bc b8 b8			.byte kSprBase+60,kSprBase+60,kSprBase+56,kSprBase+56 ; bat
4889	>2714	c0 c4 c0 c4			.byte kSprBase+64,kSprBase+68,kSprBase+64,kSprBase+68 ; ghost
4890	>2718	c8 c8 c8 c8			.byte kSprBase+72,kSprBase+72,kSprBase+72,kSprBase+72 ; spider
4891	>271c	d0 d0 d4 d4			.byte kSprBase+80,kSprBase+80,kSprBase+84,kSprBase+84 ; fish
4892	>2720	dc dc d8 d8			.byte kSprBase+92,kSprBase+92,kSprBase+88,kSprBase+88 ; flying thing
4893	>2724	00 00 00 00			.byte 0,0,0,0 ; bear
4894	>2728	00 00 00 00			.byte 0,0,0,0 ; other bear
4895	>272c	00 00 00 00			.byte 0,0,0,0 ; octopus
4896	>2730	00 00 00 00			.byte 0,0,0,0 ; other octopus
4897	>2734	fc fc fc fc			.byte kSprBase+124,kSprBase+124,kSprBase+124,kSprBase+124 ; bubble
4898	.2738					FrameCountForEnt
4899	>2738	08 04 04 04 04 02 04 04		.byte 008,004,004,004,004,002,004,004,002,002,002,002,003,000
	>2740	02 02 02 02 03 00
4900	.2746					CollFrameForEnt
4901	>2746	00 00 00 00 00 00 00 00		.byte 000,000,000,000,000,000,000,000,004,004,005,005,007,006
	>274e	04 04 05 05 07 06
4902						;CollisionResultEORForEnt
4903						;.byte 000,000,000,001,000,000,000,000,000,000,000,000,000,000
4904	.2754					AnimFrameTimerForEnt
4905	>2754	08 02 08 08 08 08 01 02		.byte 008,002,008,008,008,008,001,002,004,004,004,004,012,004
	>275c	04 04 04 04 0c 04
4906	.2762					SpringDirectionToDeltaLUT
4907	>2762	fe ff ff ff 01 01 01 02		.char -2,-1,-1,-1,01,01,01,02
4908	.276a					SinJumpTable
4909	>276a	fb fb fc fc fb fd		.char -5, -5, -4, -4, -5, -3
4910	>2770	fc fd fe fd ff fe ff 00		.char -4, -3, -2, -3, -1, -2, -1, 0, -1, -1, 0
	>2778	ff ff 00
4911	=17					kSinJumpFall = * - SinJumpTable
4912	>277b	01 02 01 03 02 03 04		.char  1,  2,  1,  3,  2,  3,  4
4913	>2782	03 05 04 05 06 05 06 06		.char  3,  5,  4,  5,  6,  5, 6,  6,  7, 8, 8
	>278a	07 08 08
4914	=34					kSinJumpMax = * - SinJumpTable - 1
4915	.278d					SpringFrameFrameTable
4916	>278d	a9 a9 a9			.byte kSprites.springCompress,kSprites.springCompress,kSprites.springCompress
4917	>2790	a8 a8 a8			.byte kSprites.springNormal,kSprites.springNormal,kSprites.springNormal
4918	>2793	aa aa aa			.byte kSprites.springExpand,kSprites.springExpand,kSprites.springExpand
4919	>2796	ab ab ab			.byte kSprites.springFull,kSprites.springFull,kSprites.springFull
4920	>2799	ab aa aa a8 a8			.byte kSprites.springFull,kSprites.springExpand,kSprites.springExpand,kSprites.springNormal,kSprites.springNormal

4922	.279e					CircleJumpTableStart
4923	>279e	05 05 05 05 04 04 04 03		.char  5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 1, 1, 0,-1,-1,-2,-2,-3,-4,-4,-4,-5,-5,-5,-5
	>27a6	02 02 01 01 00 ff ff fe fe fd fc fc fc fb fb fb
	>27b6	fb
4924	>27b7	fb fb fb fc fc fc fd fd		.char -5,-5,-5,-4,-4,-4,-3,-3,-2,-1,-1, 0, 1, 1, 2, 3, 3, 4, 4, 4, 5, 5, 5
	>27bf	fe ff ff 00 01 01 02 03 03 04 04 04 05 05 05
4925	=48					CircleJumpTableCount = * - CircleJumpTableStart
4926	>27ce	05 05 05 05 04 04 04 03		.char  5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 1, 1, 0
	>27d6	02 02 01 01 00

4928	>27db	ce cf cf cf cf cf cf d1		statusLine0 .byte kSBC.TL,kSBC.T,kSBC.T,kSBC.T,kSBC.T,kSBC.T,kSBC.T,kSBC.TR
4929	>27e3	d0 cd cd cd cd cd cd d2		statusLine1 .byte kSBC.L ,kSBC.M,kSBC.M,kSBC.M,kSBC.M,kSBC.M,kSBC.M,kSBC.R
4930	>27eb	fa fb fb fb fb fb fb fc		statusLine2 .byte kSBC.BL,kSBC.B,kSBC.B,kSBC.B,kSBC.B,kSBC.B,kSBC.B,kSBC.BR
4931	>27f3	d0 d3 d4 d5 d6 d7 d8 d2		statusLine3 .byte kSBC.L ,kSBC.QWAKT,kSBC.QWAKT+1,kSBC.QWAKT+2,kSBC.QWAKT+3,kSBC.QWAKT+4,kSBC.QWAKT+5,kSBC.R
4932	>27fb	d0 d9 da db dc dd de d2		statusLine4 .byte kSBC.L ,kSBC.QWAKB,kSBC.QWAKB+1,kSBC.QWAKB+2,kSBC.QWAKB+3,kSBC.QWAKB+4,kSBC.QWAKB+5,kSBC.R
4933	>2803	d0 df e0 e1 e2 e3 e4 d2		statusLine5 .byte kSBC.L ,kSBC.Score,kSBC.Score+1,kSBC.Score+2,kSBC.Score+3,kSBC.Score+4,kSBC.Score+5,kSBC.R
4934	>280b	d0 cd e5 e6 e7 e5 cd d2		statusLine6 .byte kSBC.L ,kSBC.M,kSBC.High,kSBC.High+1,kSBC.High+2,kSBC.High,kSBC.M,kSBC.R
4935	>2813	d0 cd e8 e9 cd cd cd d2		statusLine7 .byte kSBC.L ,kSBC.M,kSBC.QwakP,kSBC.QwakP+1,kSBC.M,kSBC.M,kSBC.M,kSBC.R
4936	>281b	d0 cd ea eb cc cd cd d2		statusLine8 .byte kSBC.L ,kSBC.M,kSBC.QwakP+2,kSBC.QwakP+3,kSBC.X,kSBC.M,kSBC.M,kSBC.R
4937	>2823	d0 cd ec ed cd cd cd d2		statusLine9 .byte kSBC.L ,kSBC.M,kSBC.Flower,kSBC.Flower+1,kSBC.M,kSBC.M,kSBC.M,kSBC.R
4938	>282b	d0 cd ee ef cc cd cd d2		statusLine10 .byte kSBC.L ,kSBC.M,kSBC.Flower+2,kSBC.Flower+3,kSBC.X,kSBC.M,kSBC.M,kSBC.R
4939						.comment
4951						.endc
4952	>2833	00 01 03 04 01 02 00 01		statusLines .byte 0,1,3,4,1,2,0,1,5,1,1,1,6,1,1,1,7,8,1,1,9,10,1,2
	>283b	05 01 01 01 06 01 01 01 07 08 01 01 09 0a 01 02

4954						; }}}
4955						.send sSprChar

4957						.dsection sPassword
4958						.section sPassword
4959						; ----- @password functions@ -----
4960	.284b					loadPasswordTemp
4961	.284b	a2 0f		ldx #$0f		ldx #15
4962	.284d	bd 0d a0	lda $a00d,x	-	lda GameData,x
4963	.2850	9d d4 a1	sta $a1d4,x		sta PasswordTemp,x
4964	.2853	ca		dex			dex
4965	.2854	10 f7		bpl $284d		bpl -
4966	.2856	ad 24 a0	lda $a024		lda LevelData.levelGraphicsSet
4967	.2859	0a		asl a			asl a
4968	.285a	0a		asl a			asl a
4969	.285b	8d db a1	sta $a1db		sta PasswordTemp.score+5
4970	.285e	60		rts			rts

4972	.285f					unloadPasswordTemp
4973	.285f	a2 0f		ldx #$0f		ldx #15
4974	.2861	bd d4 a1	lda $a1d4,x	-	lda PasswordTemp,x
4975	.2864	9d 0d a0	sta $a00d,x		sta GameData,x
4976	.2867	ca		dex			dex
4977	.2868	10 f7		bpl $2861		bpl -
4978	.286a	ad db a1	lda $a1db		lda PasswordTemp.score+5
4979	.286d	4a		lsr a			lsr a
4980	.286e	4a		lsr a			lsr a
4981	.286f	29 03		and #$03		and #3
4982	.2871	8d 24 a0	sta $a024		sta LevelData.levelGraphicsSet
4983	.2874	60		rts			rts

4985						; carry set = fail
4986	.2875					validateExtractedPassword
4987	.2875	a2 05		ldx #$05		ldx #5
4988	.2877	bd dc a1	lda $a1dc,x	-	lda PasswordTemp.high,x
4989	.287a	c9 0a		cmp #$0a		cmp #10
4990	.287c	b0 0f		bcs $288d		bcs _fail
4991	.287e	bd d6 a1	lda $a1d6,x		lda PasswordTemp.score,x
4992	.2881	c9 0a		cmp #$0a		cmp #10
4993	.2883	b0 08		bcs $288d		bcs _fail
4994	.2885	ca		dex			dex
4995	.2886	10 ef		bpl $2877		bpl -
4996	.2888	ad d4 a1	lda $a1d4		lda PasswordTemp.lives
4997	.288b	c9 0a		cmp #$0a		cmp #10
4998	.288d					_fail
4999	.288d	60		rts			rts

5001	.288e					makePassword
5002	.288e	a2 0b		ldx #$0b		ldx #11
5003	.2890	a9 00		lda #$00		lda #0
5004	.2892	9d e3 a1	sta $a1e3,x	-	sta ActivePassword,x
5005	.2895	ca		dex			dex
5006	.2896	10 fa		bpl $2892		bpl -
5007	.2898	aa		tax			tax
5008	.2899	64 0f		stz $0f			stz ZPTemp ; score index
5009	.289b	64 10		stz $10			stz ZPTemp2 ; password index
5010	.289d	64 11		stz $11			stz ZPTemp3 ; password counter
5011	.289f	64 12		stz $12			stz ZPTemp4 ; score counter
5012							;1st 5 bits SHVSH
5013	.28a1	20 ca 29	jsr $29ca		jsr pushOutScoreHiscorePair ; SH
5014	.28a4	4e e2 a1	lsr $a1e2		lsr PasswordTemp.currLevel
5015	.28a7	2e e3 a1	rol $a1e3		rol ActivePassword				; V
5016	.28aa	e6 11		inc $11			inc ZPTemp3					; count V
5017	.28ac	20 ca 29	jsr $29ca		jsr pushOutScoreHiscorePair ; SH
5018							;2nd 5 bits VSHVS
5019	.28af	4e e2 a1	lsr $a1e2		lsr PasswordTemp.currLevel
5020	.28b2	2e e4 a1	rol $a1e4		rol ActivePassword+1				; V
5021	.28b5	e6 11		inc $11			inc ZPTemp3
5022	.28b7	20 ca 29	jsr $29ca		jsr pushOutScoreHiscorePair ; SH
5023	.28ba	4e e2 a1	lsr $a1e2		lsr PasswordTemp.currLevel
5024	.28bd	2e e4 a1	rol $a1e4		rol ActivePassword+1				; V
5025	.28c0	e6 11		inc $11			inc ZPTemp3
5026	.28c2	20 ca 29	jsr $29ca		jsr pushOutScoreHiscorePair ; S
5027							; 3rd 5 bits HVSHV
5028														; H
5029	.28c5	4e e2 a1	lsr $a1e2		lsr PasswordTemp.currLevel
5030	.28c8	2e e5 a1	rol $a1e5		rol ActivePassword+2				; V
5031	.28cb	e6 11		inc $11			inc ZPTemp3
5032	.28cd	20 ca 29	jsr $29ca		jsr pushOutScoreHiscorePair ; SH
5033	.28d0	4e e2 a1	lsr $a1e2		lsr PasswordTemp.currLevel
5034	.28d3	2e e5 a1	rol $a1e5		rol ActivePassword+2				; V
5035	.28d6	20 e6 29	jsr $29e6		jsr nextPassword
5036							; 4th 5 bits SHLSH
5037	.28d9	20 ca 29	jsr $29ca		jsr pushOutScoreHiscorePair ; SH
5038	.28dc	4e d4 a1	lsr $a1d4		lsr PasswordTemp.lives
5039	.28df	2e e6 a1	rol $a1e6		rol ActivePassword+3				; L
5040	.28e2	e6 11		inc $11			inc ZPTemp3
5041	.28e4	20 ca 29	jsr $29ca		jsr pushOutScoreHiscorePair ; SH
5042							; 5th 5 bits LSHLS
5043	.28e7	4e d4 a1	lsr $a1d4		lsr PasswordTemp.lives
5044	.28ea	2e e7 a1	rol $a1e7		rol ActivePassword+4				; L
5045	.28ed	e6 11		inc $11			inc ZPTemp3
5046	.28ef	20 ca 29	jsr $29ca		jsr pushOutScoreHiscorePair ; SH
5047	.28f2	4e d4 a1	lsr $a1d4		lsr PasswordTemp.lives
5048	.28f5	2e e7 a1	rol $a1e7		rol ActivePassword+4				; L
5049	.28f8	e6 11		inc $11			inc ZPTemp3
5050	.28fa	20 ca 29	jsr $29ca		jsr pushOutScoreHiscorePair ; S
5051							; 6th 5 bits HLSHF
5052														; H
5053	.28fd	4e d4 a1	lsr $a1d4		lsr PasswordTemp.lives
5054	.2900	2e e8 a1	rol $a1e8		rol ActivePassword+5				; L
5055	.2903	e6 11		inc $11			inc ZPTemp3
5056	.2905	20 ca 29	jsr $29ca		jsr pushOutScoreHiscorePair ; SH
5057	.2908	4e d5 a1	lsr $a1d5		lsr PasswordTemp.Flowers
5058	.290b	2e e8 a1	rol $a1e8		rol ActivePassword+5				; F
5059	.290e	20 e6 29	jsr $29e6		jsr nextPassword
5060							; 7th 5 bits SHFSH
5061	.2911	20 ca 29	jsr $29ca		jsr pushOutScoreHiscorePair ; SH
5062	.2914	4e d5 a1	lsr $a1d5		lsr PasswordTemp.Flowers
5063	.2917	2e e9 a1	rol $a1e9		rol ActivePassword+6				; F
5064	.291a	e6 11		inc $11			inc ZPTemp3
5065	.291c	20 ca 29	jsr $29ca		jsr pushOutScoreHiscorePair ; SH
5066							; 8th 5 bits FSHSH
5067	.291f	4e d5 a1	lsr $a1d5		lsr PasswordTemp.Flowers
5068	.2922	2e ea a1	rol $a1ea		rol ActivePassword+7				; F
5069	.2925	e6 11		inc $11			inc ZPTemp3
5070	.2927	a0 0b		ldy #$0b		ldy #11
5071	.2929	20 ca 29	jsr $29ca	-	jsr pushOutScoreHiscorePair ; SH
5072	.292c	88		dey			dey
5073	.292d	10 fa		bpl $2929		bpl -
5074	.292f	60		rts			rts

5076	.2930					extractPassword
5077	.2930	a2 03		ldx #$03		ldx #3
5078	.2932	86 12		stx $12			stx ZPTemp4 ; score counter
5079	.2934	e8		inx			inx
5080	.2935	86 11		stx $11			stx ZPTemp3 ; password counter
5081	.2937	e8		inx			inx
5082	.2938	86 0f		stx $0f			stx ZPTemp ; score index
5083	.293a	a0 0b		ldy #$0b		ldy #11
5084	.293c	84 10		sty $10			sty ZPTemp2 ; password index
5085	.293e	20 00 2a	jsr $2a00	-	jsr pullOutHiScoreScorePair ; SH
5086	.2941	88		dey			dey
5087	.2942	10 fa		bpl $293e		bpl -
5088	.2944	4e ea a1	lsr $a1ea		lsr ActivePassword+7				; F
5089	.2947	2e d5 a1	rol $a1d5		rol PasswordTemp.Flowers
5090	.294a	20 1c 2a	jsr $2a1c		jsr prevPassword
5091							;
5092	.294d	20 00 2a	jsr $2a00		jsr pullOutHiScoreScorePair ; SH
5093	.2950	4e e9 a1	lsr $a1e9		lsr ActivePassword+6				; F
5094	.2953	2e d5 a1	rol $a1d5		rol PasswordTemp.Flowers
5095	.2956	c6 11		dec $11			dec ZPTemp3
5096	.2958	20 00 2a	jsr $2a00		jsr pullOutHiScoreScorePair ; sh
5097							;
5098	.295b	4e e8 a1	lsr $a1e8		lsr ActivePassword+5				; F
5099	.295e	2e d5 a1	rol $a1d5		rol PasswordTemp.Flowers
5100	.2961	c6 11		dec $11			dec ZPTemp3
5101	.2963	20 00 2a	jsr $2a00		jsr pullOutHiScoreScorePair ; sh
5102	.2966	4e e8 a1	lsr $a1e8		lsr ActivePassword+5
5103	.2969	2e d4 a1	rol $a1d4		rol PasswordTemp.Lives					; l
5104	.296c	c6 11		dec $11			dec ZPTemp3
5105	.296e	20 00 2a	jsr $2a00		jsr pullOutHiScoreScorePair ; s
5106							;
5107														; h
5108	.2971	4e e7 a1	lsr $a1e7		lsr ActivePassword+4
5109	.2974	2e d4 a1	rol $a1d4		rol PasswordTemp.Lives					; l
5110	.2977	c6 11		dec $11			dec ZPTemp3
5111	.2979	20 00 2a	jsr $2a00		jsr pullOutHiScoreScorePair ; sh
5112	.297c	4e e7 a1	lsr $a1e7		lsr ActivePassword+4
5113	.297f	2e d4 a1	rol $a1d4		rol PasswordTemp.Lives					; l
5114	.2982	20 1c 2a	jsr $2a1c		jsr prevPassword
5115							;
5116	.2985	20 00 2a	jsr $2a00		jsr pullOutHiScoreScorePair ; sh
5117	.2988	4e e6 a1	lsr $a1e6		lsr ActivePassword+3
5118	.298b	2e d4 a1	rol $a1d4		rol PasswordTemp.Lives					; l
5119	.298e	c6 11		dec $11			dec ZPTemp3
5120	.2990	20 00 2a	jsr $2a00		jsr pullOutHiScoreScorePair ; sh
5121							;
5122	.2993	4e e5 a1	lsr $a1e5		lsr ActivePassword+2				; V
5123	.2996	2e e2 a1	rol $a1e2		rol PasswordTemp.currLevel
5124	.2999	c6 11		dec $11			dec ZPTemp3
5125	.299b	20 00 2a	jsr $2a00		jsr pullOutHiScoreScorePair ; sh
5126	.299e	4e e5 a1	lsr $a1e5		lsr ActivePassword+2				; V
5127	.29a1	2e e2 a1	rol $a1e2		rol PasswordTemp.currLevel
5128	.29a4	c6 11		dec $11			dec ZPTemp3
5129	.29a6	20 00 2a	jsr $2a00		jsr pullOutHiScoreScorePair ; s
5130							;
5131														; h
5132	.29a9	4e e4 a1	lsr $a1e4		lsr ActivePassword+1				; V
5133	.29ac	2e e2 a1	rol $a1e2		rol PasswordTemp.currLevel
5134	.29af	c6 11		dec $11			dec ZPTemp3
5135	.29b1	20 00 2a	jsr $2a00		jsr pullOutHiScoreScorePair ;sh
5136	.29b4	4e e4 a1	lsr $a1e4		lsr ActivePassword+1				; V
5137	.29b7	2e e2 a1	rol $a1e2		rol PasswordTemp.currLevel
5138	.29ba	20 1c 2a	jsr $2a1c		jsr prevPassword
5139							;
5140	.29bd	20 00 2a	jsr $2a00		jsr pullOutHiScoreScorePair ;sh
5141	.29c0	4e e3 a1	lsr $a1e3		lsr ActivePassword				; V
5142	.29c3	2e e2 a1	rol $a1e2		rol PasswordTemp.currLevel
5143	.29c6	c6 11		dec $11			dec ZPTemp3
5144	.29c8	80 36		bra $2a00		gra pullOutHiScoreScorePair ;sh
5145							;rts

5147	.29ca					pushOutScoreHiscorePair
5148	.29ca	a6 0f		ldx $0f			ldx ZPTemp
5149	.29cc	5e d6 a1	lsr $a1d6,x		lsr PasswordTemp.Score,x
5150	.29cf	a6 10		ldx $10			ldx ZPTemp2
5151	.29d1	3e e3 a1	rol $a1e3,x		rol ActivePassword,x
5152	.29d4	20 e6 29	jsr $29e6		jsr nextPassword
5153	.29d7	a6 0f		ldx $0f			ldx ZPTemp
5154	.29d9	5e dc a1	lsr $a1dc,x		lsr PasswordTemp.high,x
5155	.29dc	a6 10		ldx $10			ldx ZPTemp2
5156	.29de	3e e3 a1	rol $a1e3,x		rol ActivePassword,x
5157	.29e1	20 e6 29	jsr $29e6		jsr nextpassword
5158	.29e4	80 0d		bra $29f3		bra nextScore

5160	.29e6					nextPassword
5161	.29e6	e6 11		inc $11			inc ZPTemp3
5162	.29e8	a5 11		lda $11			lda ZPTemp3
5163	.29ea	c9 05		cmp #$05		cmp #5
5164	.29ec	d0 04		bne $29f2		bne +
5165	.29ee	64 11		stz $11				stz ZPTemp3
5166	.29f0	e6 10		inc $10				inc ZPTemp2
5167	.29f2	60		rts		+	rts

5169	.29f3					nextScore
5170	.29f3	e6 12		inc $12			inc ZPTemp4
5171	.29f5	a5 12		lda $12			lda ZPTemp4
5172	.29f7	c9 04		cmp #$04		cmp #4
5173	.29f9	d0 04		bne $29ff		bne +
5174	.29fb	64 12		stz $12				stz ZPTemp4
5175	.29fd	e6 0f		inc $0f				inc ZPTemp
5176	.29ff	60		rts		+	rts

5178	.2a00					pullOutHiScoreScorePair
5179	.2a00	a6 10		ldx $10			ldx ZPTemp2
5180	.2a02	5e e3 a1	lsr $a1e3,x		lsr ActivePassword,x
5181	.2a05	a6 0f		ldx $0f			ldx ZPTemp
5182	.2a07	3e dc a1	rol $a1dc,x		rol PasswordTemp.high,x
5183	.2a0a	20 1c 2a	jsr $2a1c		jsr prevPassword
5184	.2a0d	a6 10		ldx $10			ldx ZPTemp2
5185	.2a0f	5e e3 a1	lsr $a1e3,x		lsr ActivePassword,x
5186	.2a12	a6 0f		ldx $0f			ldx ZPTemp
5187	.2a14	3e d6 a1	rol $a1d6,x		rol PasswordTemp.Score,x
5188	.2a17	20 1c 2a	jsr $2a1c		jsr prevPassword
5189	.2a1a	80 0b		bra $2a27		bra prevScore

5191	.2a1c					prevPassword
5192	.2a1c	c6 11		dec $11			dec ZPTemp3
5193	.2a1e	10 06		bpl $2a26		bpl +
5194	.2a20	a9 04		lda #$04		lda #4
5195	.2a22	85 11		sta $11			sta ZPTemp3
5196	.2a24	c6 10		dec $10			dec ZPTemp2
5197	.2a26	60		rts		+	rts

5199	.2a27					prevScore
5200	.2a27	c6 12		dec $12			dec ZPTemp4
5201	.2a29	10 06		bpl $2a31		bpl +
5202	.2a2b	a9 03		lda #$03		lda #3
5203	.2a2d	85 12		sta $12			sta ZPTemp4
5204	.2a2f	c6 0f		dec $0f			dec ZPTemp
5205	.2a31	60		rts		+	rts

5207	.2a32					convertToPasswordLetter
5208	.2a32	f0 32		beq $2a66		beq _at
5209	.2a34	c9 16		cmp #$16		cmp #22
5210	.2a36	f0 31		beq $2a69		beq _zero
5211	.2a38	18		clc			clc
5212	.2a39	69 80		adc #$80		adc #128
5213	.2a3b	c9 80		cmp #$80		cmp #0+128
5214	.2a3d	f0 26		beq $2a65		beq _exit
5215	.2a3f	18		clc			clc
5216	.2a40	69 01		adc #$01		adc #1 ; 1 = B
5217	.2a42	c9 82		cmp #$82		cmp #2+128
5218	.2a44	f0 1f		beq $2a65		beq _exit
5219	.2a46	18		clc			clc
5220	.2a47	69 01		adc #$01		adc #1 ; 2 = D
5221	.2a49	c9 8b		cmp #$8b		cmp #11+128
5222	.2a4b	90 18		bcc $2a65		bcc _exit
5223	.2a4d	18		clc			clc
5224	.2a4e	69 01		adc #$01		adc #1 ; 9 = L
5225	.2a50	c9 91		cmp #$91		cmp #17+128
5226	.2a52	90 11		bcc $2a65		bcc _exit
5227	.2a54	18		clc			clc
5228	.2a55	69 01		adc #$01		adc #1 ; 14 = R
5229	.2a57	c9 97		cmp #$97		cmp #23+128
5230	.2a59	90 0a		bcc $2a65		bcc _exit
5231	.2a5b	18		clc			clc
5232	.2a5c	69 01		adc #$01		adc #1 ; 19 = X
5233	.2a5e	c9 9b		cmp #$9b		cmp #27+128
5234	.2a60	90 03		bcc $2a65		bcc _exit
5235	.2a62	18		clc			clc
5236	.2a63	69 15		adc #$15		adc #21 ; 22 = 0
5237	.2a65					_exit
5238	.2a65	60		rts			rts
5239	.2a66					_at
5240	.2a66	a9 bd		lda #$bd		lda #61+128
5241	.2a68	60		rts			rts
5242	.2a69					_zero
5243	.2a69	a9 ab		lda #$ab		lda #43+128
5244	.2a6b	60		rts			rts

5246	.2a6c					convertLetterToNumber
5247	.2a6c	38		sec			sec
5248	.2a6d	e9 80		sbc #$80		sbc #128
5249	.2a6f	f0 0e		beq $2a7f		beq _exit ; @ case
5250	.2a71	c9 2b		cmp #$2b			cmp #43 ; +
5251	.2a73	f0 0b		beq $2a80			beq _fake0
5252	.2a75	c9 3d		cmp #$3d				cmp #61
5253	.2a77	f0 0a		beq $2a83				beq _fakeAt ; = case
5254	.2a79	c9 30		cmp #$30					cmp #48
5255	.2a7b	90 09		bcc $2a86					bcc _notANum
5256											;sec branch make sec
5257	.2a7d	e9 1a		sbc #$1a						sbc #26 ; 0-9 convertion
5258	.2a7f					_exit
5259	.2a7f	60		rts			rts

5261	.2a80					_fake0
5262	.2a80	a9 16		lda #$16		lda #22
5263	.2a82	60		rts			rts

5265	.2a83					_fakeAt
5266	.2a83	a9 00		lda #$00		lda #0
5267	.2a85	60		rts			rts

5269	.2a86					_notANum
5270	.2a86	38		sec			sec
5271	.2a87	e9 01		sbc #$01		sbc #1 ; B
5272	.2a89	c9 03		cmp #$03		cmp #3
5273	.2a8b	90 f2		bcc $2a7f		bcc _exit
5274								;sec
5275	.2a8d	e9 01		sbc #$01			sbc #1 ; D
5276	.2a8f	c9 09		cmp #$09			cmp #9
5277	.2a91	90 ec		bcc $2a7f			bcc _exit
5278									;sec
5279	.2a93	e9 01		sbc #$01				sbc #1
5280	.2a95	c9 0e		cmp #$0e				cmp #14
5281	.2a97	90 e6		bcc $2a7f				bcc _exit
5282										;sec
5283	.2a99	e9 01		sbc #$01					sbc #1
5284	.2a9b	c9 13		cmp #$13					cmp #19
5285	.2a9d	90 e0		bcc $2a7f					bcc _exit
5286											;sec branch makes sec
5287	.2a9f	e9 01		sbc #$01						sbc #1
5288	.2aa1	60		rts							rts

5290	.2aa2					convertASCIIToQwakChar
5291	.2aa2	c9 2b		cmp #$2b		cmp #43 ; +
5292	.2aa4	f0 0b		beq $2ab1		beq _number ; add 128
5293	.2aa6	c9 3d		cmp #$3d		cmp #61
5294	.2aa8	f0 07		beq $2ab1		beq _number ; add 128
5295	.2aaa	c9 40		cmp #$40		cmp #64
5296	.2aac	90 03		bcc $2ab1		bcc _number
5297	.2aae	69 3f		adc #$3f		adc #63
5298	.2ab0	60		rts			rts
5299	.2ab1					_number
5300	.2ab1	18		clc			clc
5301	.2ab2	69 80		adc #$80		adc #128
5302	.2ab4	60		rts			rts

5304	.2ab5					isValidLetter
5305	.2ab5	c9 ab		cmp #$ab		cmp #43+128 ; +
5306	.2ab7	f0 0c		beq $2ac5		beq _yes
5307	.2ab9	c9 bd		cmp #$bd		cmp #61+128 ; =
5308	.2abb	f0 08		beq $2ac5		beq _yes
5309	.2abd	c9 b1		cmp #$b1		cmp #49+128
5310	.2abf	90 06		bcc $2ac7		bcc _checkAZ
5311	.2ac1	c9 ba		cmp #$ba		cmp #58+128
5312	.2ac3	b0 16		bcs $2adb		bcs _no
5313	.2ac5					_yes
5314	.2ac5	38		sec			sec
5315	.2ac6	60		rts			rts
5316	.2ac7					_checkAZ
5317	.2ac7	c9 9b		cmp #$9b		cmp #91+64	; {
5318	.2ac9	b0 10		bcs $2adb		bcs _no
5319	.2acb	c9 82		cmp #$82		cmp #66+64	; <A
5320	.2acd	90 0c		bcc $2adb		bcc _no
5321	.2acf	c9 8b		cmp #$8b		cmp #75+64	; K
5322	.2ad1	f0 08		beq $2adb		beq _no
5323	.2ad3	c9 91		cmp #$91		cmp #81+64	; Q
5324	.2ad5	f0 04		beq $2adb		beq _no
5325	.2ad7	c9 97		cmp #$97		cmp #87+64	; W
5326	.2ad9	d0 ea		bne $2ac5		bne _yes
5327	.2adb					_no
5328	.2adb	18		clc			clc
5329	.2adc	60		rts			rts


5332						.send sPassword

5334	.2add					VERADestStructLUT .block
5335	>2add	01 06 07 03 00 14 00 00			lo .byte <(VeraDESTAddressLUT)
	>2ae5	00 00 00 40 c2 c2 ca ca 00 80 00
5336	>2af0	00 50 50 50 40 12 20 30			hi .byte >(VeraDESTAddressLUT)
	>2af8	10 1c 00 10 14 16 18 1a 26 35 10
5337	>2b03	1f 4f 4f 4f 1f 10 1f 1f			bank .byte `(VeraDESTAddressLUT)
	>2b0b	10 10 10 10 10 10 10 10 10 10 20
5338						.bend

5340	.2b16					setVERAAddressPort0_X
5341	.2b16	9c 25 9f	stz $9f25		stz kVERA.CTRL
5342	.2b19	bd dd 2a	lda $2add,x		lda VERADestStructLUT.lo,x
5343	.2b1c	8d 20 9f	sta $9f20		sta kVERA.ADDR_Lo
5344	.2b1f	bd f0 2a	lda $2af0,x		lda VERADestStructLUT.hi,x
5345	.2b22	8d 21 9f	sta $9f21		sta kVERA.ADDR_Mid
5346	.2b25	bd 03 2b	lda $2b03,x		lda VERADestStructLUT.bank,x
5347	.2b28	8d 22 9f	sta $9f22		sta kVERA.ADDR_Hi
5348	.2b2b	60		rts			rts


5351						; ----- @TitleScreen Data@ -----
5352						; {{{
5353						.dsection sTitleScreenData
5354						.section sTitleScreenData
5355	.2b2c					TitleScreenData .block

5357	.2b2c					SpriteStruct .block
5358							sprites = [(getVeraSpriteAddress32x32(kSprites.Q), 99,10),
5359											(getVeraSpriteAddress32x32(kSprites.W),136,10),
5360											(getVeraSpriteAddress32x32(kSprites.A),171,10),
5361											(getVeraSpriteAddress32x32(kSprites.K),206,10)
5362	=[(3904,99,10),(3920,136,10),(3936,171,10),(3952,206,10)]
										  ]
5363	.2b2c						ptr .block
5364	>2b2c	40 50 60 70					lo .byte <(sprites[:,0])
5365	>2b30	0f 0f 0f 0f					hi .byte >(sprites[:,0])
5366							.bend
5367	.2b34						x .block
5368	>2b34	63 88 ab ce					lo .byte <(sprites[:,1])
5369	>2b38	00 00 00 00					hi .byte >(sprites[:,1])
5370							.bend
5371	>2b3c	0a 0a 0a 0a				y .byte (sprites[:,2])
5372						.bend

5374	=(13,12,4)				Version = (kStrings.version,12,4)
5375	=(1,3,6)				Original = (kStrings.original,3,6)
5376	=(2,5,8)				Ported = (kStrings.cx16port,5,8)
5377	=(3,11,10)				Code = (kStrings.program,11,10)
5378	=(4,11,11)				Art = (kStrings.art,11,11)
5379	=(5,11,12)				Music = (kStrings.music,11,12)
5380	=(6,12,14)				Special = (kStrings.specialThanks,12,14)
5381	=(7,12,16)				Soci = (kStrings.soci,12,16)
5382	=(8,15,17)				Didi = (kStrings.martinPiper,15,17)
5383	=(9,17,11)				Saul1 = (kStrings.saul,17,11)
5384	=(9,17,12)				Saul2 = (kStrings.saul,17,12)
5385	=(12,7,22)				Both = (kStrings.both,7,22)
5386	=(5,15,22)				Music2 = (kStrings.music,15,22)
5387	=(10,24,22)				SFX = (kStrings.sfx,24,22)
5388	=(11,30,22)				None = (kStrings.none,30,22)
5389	=(14,5,19)				Password = (kStrings.password,5,19)
5390	=(15,14,20)				PasswordBlank = (kStrings.passwordBlank,14,20)

5392	=((13,12,4),(1,3,6),(2,5,8),(3,11,10))	G1 = (Version,Original,Ported,Code)
5393	=((4,11,11),(5,11,12),(6,12,14),(7,12,16))
						G2 = (Art,Music,Special,Soci)
5394	=((8,15,17),(9,17,11),(9,17,12),(12,7,22))
						G3 = (Didi,Saul1,Saul2,Both)
5395	=((5,15,22),(10,24,22),(11,30,22),(14,5,19))
						G4 = (Music2,SFX,None,Password)
5396	=((15,14,20),)				G5 = (PasswordBlank,) ;this use to have game over in it as well
5397	=((13,12,4),(1,3,6),(2,5,8),(3,11,10),(4,11,11),(5,11,12),(6,12,14),(7,12,16),(8,15,17),(9,17,11),(9,17,12),(12,7,22),(5,15,22),(10,24,22),(11,30,22),(14,5,19),(15,14,20))
						AllStrings = G1 .. G2 .. G3 .. G4 .. G5

5399	>2b40	0d 01 02 03 04 05 06 07		string .byte AllStrings[:,0]..(kStrings.gameOver,)
	>2b48	08 09 09 0c 05 0a 0b 0e 0f 00
5400	=(536,774,1034,1302,1430,1558,1816,2072,2206,1442,1570,2830,2846,2864,2876,2442,2588,5142)
						allPos = (kVRAM.titleScreen+(AllStrings[:,2]*128)+(AllStrings[:,1]*2)).. (kVRAM.gameScreen+8*128+11*2,)
5401	.2b52					stringPos .block
5402	>2b52	18 06 0a 16 96 16 18 18			lo .byte <(allPos)
	>2b5a	9e a2 22 0e 1e 30 3c 8a 1c 16
5403	>2b64	02 03 04 05 05 06 07 08			hi .byte >(allPos)
	>2b6c	08 05 06 0b 0b 0b 0b 09 0a 14
5404	>2b76	10 10 10 10 10 10 10 10			bank .byte `(allPos|kVERA.inc_1)
	>2b7e	10 10 10 10 10 10 10 10 10 10
5405						.bend



5409	>2b88	07 0d 0e 0a			spriteCol	.byte 7,13,14,10

5411	>2b8c	3c 2e 1e 0e			menuOffsetsStart	.byte (30,23,15,7)*2
5412	>2b90	4a 3c 2c 1c			menuOffsetsEnd		.byte (37,30,22,14)*2

5414						.bend ; titlescreendata

5416	.2b94					kStrings .block
5417	=0					gameOver = 0
5418	=1					original = 1
5419	=2					cx16port = 2
5420	=3					program = 3
5421	=4					art = 4
5422	=5					music = 5
5423	=6					specialThanks = 6
5424	=7					soci = 7
5425	=8					martinPiper = 8
5426	=9					saul = 9
5427	=10					sfx = 10
5428	=11					none = 11
5429	=12					both = 12
5430	=13					version = 13
5431	=14					password = 14
5432	=15					passwordBlank = 15
5433						.bend

5435	>2b94	b4 be e1 00 13 24 38 4a		StringTableLUTLo .byte <GAMEOVER,<ORIGINAL,<CX16PORT,<PROGRAM,<ART,<MUSIC,<SPECIALTHANKS,<SOCI,<MARTINPIPER,<SAUL,<SFX,<NONE,<BOTH,<VERSION,<PASSWORD,<PASSWORDBLANK
	>2b9c	5d 17 2a 2e 33 6a 7c 9b
5436	>2ba4	2b 2b 2b 2c 2c 2c 2c 2c		StringTableLUTHi .byte >GAMEOVER,>ORIGINAL,>CX16PORT,>PROGRAM,>ART,>MUSIC,>SPECIALTHANKS,>SOCI,>MARTINPIPER,>SAUL,>SFX,>NONE,>BOTH,>VERSION,>PASSWORD,>PASSWORDBLANK
	>2bac	2c 2c 2c 2c 2c 2c 2c 2c

5438	>2bb4	87 81 8d 85 a0 8f 96 85		GAMEOVER 		.text "GAME OVER"
	>2bbc	92
5439	>2bbd	ff						 			.byte $FF
5440	>2bbe	8f 92 89 87 89 8e 81 8c		ORIGINAL 		.text "ORIGINAL CONCEPT : JAMIE WOODHOUSE"
	>2bc6	a0 83 8f 8e 83 85 90 94 a0 ba a0 8a 81 8d 89 85
	>2bd6	a0 97 8f 8f 84 88 8f 95 93 85
5441	>2be0	ff									.byte $FF
5442	>2be1	90 8f 92 94 85 84 a0 94		CX16PORT  		.text "PORTED TO THE COMMANDER X16 BY"
	>2be9	8f a0 94 88 85 a0 83 8f 8d 8d 81 8e 84 85 92 a0
	>2bf9	98 b1 b6 a0 82 99
5443	>2bff	ff									.byte $FF
5444	>2c00	83 8f 84 85 a0 a0 ba a0		PROGRAM	 		.text "CODE  : OZIPHANTOM"
	>2c08	8f 9a 89 90 88 81 8e 94 8f 8d
5445	>2c12	ff									.byte $FF
5446	>2c13	81 92 94			ART		 		.text "ART"
5447	>2c16	ff									.byte $FF
5448	>2c17	ba a0 93 81 95 8c a0 83		SAUL				.text ": SAUL CROSS"
	>2c1f	92 8f 93 93
5449	>2c23	ff									.byte $FF
5450	>2c24	8d 95 93 89 83			MUSIC 	 		.text "MUSIC"
5451	>2c29	ff									.byte $FF
5452	>2c2a	93 86 98			SFX				.text "SFX"
5453	>2c2d	ff									.byte $FF
5454	>2c2e	8e 8f 8e 85			NONE				.text "NONE"
5455	>2c32	ff									.byte $FF
5456	>2c33	82 8f 94 88			BOTH				.text "BOTH"
5457	>2c37	ff									.byte $FF
5458	>2c38	93 90 85 83 89 81 8c a0		SPECIALTHANKS 	.text "SPECIAL THANKS TO"
	>2c40	94 88 81 8e 8b 93 a0 94 8f
5459	>2c49	ff									.byte $FF
5460	>2c4a	93 8f 83 89 ac a0 8d 81		SOCI		  		.text "SOCI, MARTIN PIPER"
	>2c52	92 94 89 8e a0 90 89 90 85 92
5461	>2c5c	ff									.byte $FF
5462	>2c5d	84 89 84 89 ac a0 94 88		MARTINPIPER	  	.text "DIDI, THERYK"
	>2c65	85 92 99 8b
5463	>2c69	ff									.byte $FF
5464	>2c6a	83 98 a0 b1 b6 a0 85 84		VERSION			.text "CX 16 EDITION 1.3",$FF
	>2c72	89 94 89 8f 8e a0 b1 ae b3 ff
5465	>2c7c	94 99 90 85 a0 90 81 93		PASSWORD			.text "TYPE PASSWORD : SPACE TO CLEAR",$FF
	>2c84	93 97 8f 92 84 a0 ba a0 93 90 81 83 85 a0 94 8f
	>2c94	a0 83 8c 85 81 92 ff
5466	>2c9b	ad ad ad ad ad ad ad ad		PASSWORDBLANK	.text "------------",$FF
	>2ca3	ad ad ad ad ff

5468	>2ca8	88 8f 94 8f 90 81 81 83		PASSWORD_LIVES 	.byte $88,$8f,$94,$8f,$90,$81,$81,$83,$92,$8f,$93,$93 ; hotopaacross
	>2cb0	92 8f 93 93
5469	>2cb4	89 93 88 8f 8f 94 92 85		PASSWORD_RED 		.byte $89,$93,$88,$8f,$8f,$94,$92,$85,$84,$81,$8c,$8c ; ishootredall
	>2cbc	84 81 8c 8c
5470	>2cc0	8d 81 99 84 81 99 8d 81		PASSWORD_SPRING	.byte $8d,$81,$99,$84,$81,$99,$8d,$81,$99,$84,$81,$99 ; maydaymayday
	>2cc8	99 84 81 99
5471	>2ccc	93 94 85 90 90 85 84 8f		PASSWORD_LEVEL  	.byte $93,$94,$85,$90,$90,$85,$84,$8f,$96,$85,$92,$81 ; steppedovera
	>2cd4	96 85 92 81
5472						; }}}


5475	>2cd8	04 09 0e 13 18 1d		BossLevels 		.byte 4,4+5,4+10,4+15,4+20,4+25

5477	.2cde					kSFX .block
5478	=0					flower = 0
5479	=1					door =1
5480	=2					collect = 2
5481	=3					bubble = 3
5482	=4					ebubble = 4
5483	=5					powerup = 5
5484	=6					jump = 6
5485	=7					hurt = 7
5486						.bend
5487	.2cde					SNDTBL
35	>2cde	00 00 00 00 00 00 00 00		lo .byte <(SND_FLOWER,SND_DOOR,SND_COLLECT,SND_BUBBLE,SND_EBUBBLE,SND_POWER_UP,SND_JUMP,SND_HURT)
36	>2ce6	a0 a0 a0 a0 a0 a0 a0 a0		hi .byte >(SND_FLOWER,SND_DOOR,SND_COLLECT,SND_BUBBLE,SND_EBUBBLE,SND_POWER_UP,SND_JUMP,SND_HURT)
5488						.send sTitleScreenData

5490						.dsection sCharSprData
5491						.section sCharSprData
5492						.union
5493	>2cee	90 99 00 00 09 09 00 99			.binary "back_shadow.ver"
	>2cf6	00 09 09 99 99 90 09 90 00 00 90 99 99 99 00 00
	>2d06	99 09 90 09 90 90 90 99 99 90 09 90 99 99 09 00
	>2d16	99 00 90 99 90 90 90 00 00 09 09 99 99 90 99 99
	>2d26	00 00 99 99 90 90 99 99 09 00 90 99 90 00 90 00
	>2d36	00 09 09 99 99 90 99 99 00 09 99 09 99 09 09 90
	>2d46	90 90 90 00 99 90 09 99 00 00 09 09 99 99 90 90
	>2d56	99 99 09 09 90 90 09 00 09 00 90 00 00 09 09 99
	>2d66	99 90 99 99 00 00 99 99 00 09 00 00 00 00 00 00
	>2d76	00 09 00 00 90 90 00 00 00 00 00 09 90 90 00 00
	>2d86	09 09 00 09 90 90 90 90 00 00 00 00 00 00 00 00
	>2d96	00 00 00 00 00 00 00 00 00 09 09 09 90 90 90 90
	>2da6	00 00 09 09 90 90 90 90 00 00 00 00 00 00 00 00
	>2db6	00 00 00 00 00 00 00 00 00 00 00 09 00 00 00 00
	>2dc6	00 00 00 09 00 00 90 90 00 00 00 00 00 00 00 00
	>2dd6	00 00 00 00 00 00 00 00 00 00 00 09 90 90 00 00
	>2de6	09 09 00 09 90 90 90 90 00 00 00 00 00 00 00 90
	>2df6	00 00 09 09 00 00 00 90 00 00 00 09 90 90 00 00
	>2e06	09 09 00 09 90 90 90 90 99 09 00 09 90 00 00 99
	>2e16	00 09 09 99 90 90 09 90 00 00 00 99 00 00 00 00
	>2e26	00 00 00 09 00 00 90 90 00 00 00 09 00 00 90 00
	>2e36	00 00 09 09 00 00 90 90 00 00 09 09 00 00 00 90
	>2e46	00 00 00 00 00 00 00 90 00 00 00 00 00 00 00 90
	>2e56	00 00 09 09 00 00 00 90 00 00 00 09 00 00 00 00
	>2e66	00 00 00 09 00 00 90 90 00 00 00 00 09 09 09 09
	>2e76	00 00 00 00 09 00 00 00 00 00 00 09 09 00 00 90
	>2e86	00 00 00 00 09 00 00 90 00 00 00 00 09 09 09 00
	>2e96	00 00 00 90 00 00 00 00 90 00 00 90 09 00 00 00
	>2ea6	00 00 00 90 09 00 00 00 00 00 90 00 09 00 09 00
	>2eb6	00 00 00 90 09 00 00 09 00 00 00 00 09 00 00 00
	>2ec6	00 90 90 90 00 00 00 00 00 09 00 90 00 90 00 00
	>2ed6	09 00 00 90 90 00 00 00 00 00 00 90 00 00 00 00
	>2ee6	90 90 90 90 00 00 00 00 99 33 11 11 33 11 11 33
	>2ef6	11 11 33 11 11 33 33 33 33 11 33 33 11 33 33 33
	>2f06	33 33 33 33 11 33 33 33 11 11 33 99 11 33 11 33
	>2f16	33 33 33 33 33 33 33 33 33 33 33 99 33 33 33 33
	>2f26	33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33
	>2f36	33 33 33 33 11 33 33 33 33 33 33 33 33 33 33 33
	>2f46	33 99 33 99 00 33 99 33 33 33 33 99 33 33 33 33
	>2f56	33 33 33 99 33 33 99 33 33 33 33 99 99 33 99 99
	>2f66	33 99 33 99 99 99 99 00 99 33 11 11 33 11 11 33
	>2f76	11 11 33 11 11 33 33 33 33 11 33 33 11 33 33 33
	>2f86	33 33 33 33 11 33 33 33 11 11 33 99 11 33 11 33
	>2f96	33 33 33 33 33 33 33 33 33 33 33 99 33 33 33 33
	>2fa6	33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33
	>2fb6	33 33 33 33 11 33 33 33 33 33 33 33 33 33 33 33
	>2fc6	33 99 33 99 00 33 99 33 33 33 33 99 33 33 33 33
	>2fd6	33 33 33 99 33 33 99 33 33 33 33 99 99 33 99 99
	>2fe6	33 99 33 99 99 99 99 00 33 33 33 33 33 33 33 33
	>2ff6	33 33 33 33 11 33 33 33 33 33 33 33 99 33 99 33
	>3006	33 99 33 99 99 99 99 99 33 33 33 99 33 33 33 33
	>3016	33 33 33 99 33 33 99 33 33 33 33 99 99 33 99 99
	>3026	33 99 33 99 99 99 99 99 33 33 33 33 33 33 33 33
	>3036	33 33 33 33 99 33 99 33 33 99 33 99 99 99 99 99
	>3046	00 99 00 99 99 00 99 00 33 33 33 99 33 33 33 33
	>3056	33 33 33 99 99 33 99 33 33 99 33 99 99 99 99 99
	>3066	00 99 00 99 99 00 99 00 33 33 33 33 99 33 99 33
	>3076	33 99 33 99 99 99 99 99 00 99 00 99 99 00 99 00
	>3086	00 00 00 00 00 00 00 00 33 33 33 99 99 33 99 33
	>3096	33 99 33 99 99 99 99 99 00 99 00 99 99 00 99 00
	>30a6	00 00 00 00 00 00 00 00 33 99 33 99 99 99 99 99
	>30b6	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>30c6	00 00 00 00 00 00 00 00 33 99 33 99 99 99 99 99
	>30d6	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>30e6	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>30f6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3106	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3116	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3126	00 00 00 00 00 00 00 00 99 33 11 11 33 11 11 33
	>3136	11 11 33 11 11 33 33 33 33 11 33 33 11 33 33 33
	>3146	33 33 33 33 99 33 99 33 11 11 33 99 11 33 11 33
	>3156	33 33 33 33 33 33 33 33 33 33 33 99 33 33 33 33
	>3166	33 33 33 33 99 33 99 33 99 33 11 11 33 11 11 33
	>3176	11 11 33 11 11 33 33 33 33 11 33 33 99 33 99 33
	>3186	33 99 33 99 99 99 99 99 11 11 33 99 11 33 11 33
	>3196	33 33 33 33 33 33 33 33 33 33 33 99 99 33 99 33
	>31a6	33 99 33 99 99 99 99 99 99 33 11 11 33 11 11 33
	>31b6	11 11 33 11 99 33 99 33 33 99 33 99 99 99 99 99
	>31c6	00 99 00 99 99 00 99 00 11 11 33 99 11 33 11 33
	>31d6	33 33 33 33 99 33 99 33 33 99 33 99 99 99 99 99
	>31e6	00 99 00 99 99 00 99 00 99 33 11 11 99 11 99 33
	>31f6	11 99 33 99 99 99 99 99 00 99 00 99 99 00 99 00
	>3206	00 00 00 00 00 00 00 00 11 11 33 99 99 33 99 33
	>3216	33 99 33 99 99 99 99 99 00 99 00 99 99 00 99 00
	>3226	00 00 00 00 00 00 00 00 99 99 11 99 99 99 99 99
	>3236	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>3246	00 00 00 00 00 00 00 00 11 99 33 99 99 99 99 99
	>3256	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>3266	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3276	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3286	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3296	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>32a6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>32b6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>32c6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>32d6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>32e6	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>32f6	00 99 00 55 99 00 00 99 00 99 00 00 99 00 55 99
	>3306	00 55 55 55 00 55 11 55 00 00 00 99 55 55 55 00
	>3316	99 55 99 00 55 99 00 00 99 00 00 99 00 99 00 00
	>3326	55 55 99 00 55 55 55 00 00 55 11 55 00 55 55 55
	>3336	00 55 55 55 00 99 55 55 00 00 99 55 99 00 55 99
	>3346	00 99 00 99 99 00 99 00 55 55 99 00 55 99 99 00
	>3356	55 55 99 00 55 99 99 00 99 99 00 99 55 99 00 00
	>3366	99 00 00 99 00 00 99 00 00 00 00 00 90 99 99 99
	>3376	00 99 99 99 00 90 00 00 00 00 00 00 99 99 90 09
	>3386	99 09 00 99 00 00 00 90 00 00 00 00 90 99 99 99
	>3396	00 99 99 09 00 90 00 00 00 00 00 00 99 99 90 99
	>33a6	99 99 00 99 00 00 00 90 00 00 00 00 90 09 99 99
	>33b6	00 99 99 99 00 90 00 00 00 00 00 00 99 09 90 99
	>33c6	99 99 00 99 00 00 00 90 00 00 00 00 90 99 99 09
	>33d6	00 99 99 99 00 90 00 00 00 00 00 00 99 99 90 09
	>33e6	99 99 00 99 00 00 00 90 00 00 00 00 00 09 00 00
	>33f6	00 90 00 00 00 00 00 00 00 00 00 00 09 09 00 09
	>3406	99 90 00 90 00 00 00 00 00 00 00 00 00 00 00 00
	>3416	00 00 00 00 00 00 00 00 00 00 00 00 09 09 00 09
	>3426	90 90 00 90 00 00 00 00 00 00 00 00 00 00 00 00
	>3436	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 09
	>3446	00 00 00 90 00 00 00 00 00 00 00 00 00 00 00 00
	>3456	00 00 00 00 00 00 00 00 00 00 00 00 09 09 00 09
	>3466	90 90 00 90 00 00 00 00 00 00 00 00 00 00 09 09
	>3476	00 00 90 90 00 00 00 00 00 00 00 00 09 09 00 09
	>3486	90 90 00 90 00 00 00 00 00 00 00 00 90 09 09 99
	>3496	00 90 90 99 00 00 00 00 00 00 00 00 00 00 00 09
	>34a6	00 00 00 90 00 00 00 00 00 00 00 00 00 00 09 09
	>34b6	00 00 90 90 00 00 00 00 00 00 00 00 00 00 00 09
	>34c6	00 00 00 90 00 00 00 00 00 00 00 00 00 00 09 09
	>34d6	00 00 90 90 00 00 00 00 00 00 00 00 00 00 00 09
	>34e6	00 00 00 90 00 00 00 00 00 00 00 00 09 09 09 09
	>34f6	00 00 00 00 09 00 00 00 00 00 00 09 09 00 00 90
	>3506	00 00 00 00 09 00 00 90 00 00 00 00 09 09 09 00
	>3516	00 00 00 90 00 00 00 00 90 00 00 90 09 00 00 00
	>3526	00 00 00 90 09 00 00 00 00 00 90 00 09 00 09 00
	>3536	00 00 00 90 09 00 00 09 00 00 00 00 09 00 00 00
	>3546	00 90 90 90 00 00 00 00 00 09 00 90 00 90 00 00
	>3556	09 00 00 90 90 00 00 00 00 00 00 90 00 00 00 00
	>3566	90 90 90 90 00 00 00 00 00 00 99 99 00 44 44 44
	>3576	99 44 11 44 44 11 11 44 44 11 11 44 44 11 44 44
	>3586	44 44 44 44 44 44 44 44 99 99 00 00 44 44 99 00
	>3596	44 44 44 99 44 44 44 44 44 44 44 99 44 44 44 44
	>35a6	44 44 44 99 44 44 99 44 44 44 44 44 44 44 44 44
	>35b6	44 44 44 44 99 44 44 44 44 44 44 99 99 44 99 44
	>35c6	00 99 00 99 00 00 99 99 44 44 44 99 44 44 99 99
	>35d6	44 99 00 99 44 44 99 99 44 99 00 99 99 00 00 99
	>35e6	00 00 99 00 99 99 00 00 00 00 99 99 00 44 44 44
	>35f6	99 44 11 44 44 11 11 44 44 11 11 44 44 11 44 44
	>3606	44 44 44 44 44 44 44 44 99 99 00 00 44 44 99 00
	>3616	44 44 44 99 44 44 44 44 44 44 44 99 44 44 44 44
	>3626	44 44 44 99 44 44 99 44 44 44 44 44 44 44 44 44
	>3636	44 44 44 44 99 44 44 44 44 44 44 99 99 44 99 44
	>3646	00 99 00 99 00 00 99 99 44 44 44 99 44 44 99 99
	>3656	44 99 00 99 44 44 99 99 44 99 00 99 99 00 00 99
	>3666	00 00 99 00 99 99 00 00 44 44 44 44 44 44 44 44
	>3676	44 44 44 44 99 44 44 44 44 44 44 99 99 44 99 44
	>3686	00 99 00 99 99 99 99 99 44 44 44 99 44 44 99 99
	>3696	44 99 00 99 44 44 99 99 44 99 00 99 99 00 99 99
	>36a6	00 99 99 99 99 99 99 99 44 44 44 44 44 44 44 44
	>36b6	44 44 44 44 99 44 99 44 44 99 44 99 99 99 99 99
	>36c6	00 99 00 99 99 00 99 00 44 44 44 99 44 44 99 99
	>36d6	44 99 00 99 99 44 99 99 44 99 00 99 99 99 99 99
	>36e6	00 99 00 99 99 00 99 00 44 44 44 44 99 44 99 44
	>36f6	44 99 44 99 99 99 99 99 00 99 00 99 99 00 99 00
	>3706	00 00 00 00 00 00 00 00 44 44 44 99 99 44 99 99
	>3716	44 99 00 99 99 99 99 99 00 99 00 99 99 00 99 00
	>3726	00 00 00 00 00 00 00 00 44 99 44 99 99 99 99 99
	>3736	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>3746	00 00 00 00 00 00 00 00 44 99 44 99 99 99 99 99
	>3756	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>3766	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3776	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3786	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3796	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>37a6	00 00 00 00 00 00 00 00 00 00 99 99 00 44 44 44
	>37b6	99 44 11 44 44 11 11 44 44 11 11 44 44 11 44 44
	>37c6	44 44 44 44 99 44 99 44 99 99 00 00 44 44 99 00
	>37d6	44 44 44 99 44 44 44 44 44 44 44 99 44 44 44 44
	>37e6	44 44 44 99 99 44 99 44 00 00 99 99 00 44 44 44
	>37f6	99 44 11 44 44 11 11 44 44 11 11 44 99 11 99 44
	>3806	44 99 44 99 99 99 99 99 99 99 00 00 44 44 99 00
	>3816	44 44 44 99 44 44 44 44 44 44 44 99 99 44 99 44
	>3826	44 99 44 99 99 99 99 99 00 00 99 99 00 44 44 44
	>3836	99 44 11 44 99 11 99 44 44 99 11 99 99 99 99 99
	>3846	00 99 00 99 99 00 99 00 99 99 00 00 44 44 99 00
	>3856	44 44 44 99 99 44 99 44 44 99 44 99 99 99 99 99
	>3866	00 99 00 99 99 00 99 00 00 00 99 99 99 44 99 44
	>3876	99 99 11 99 99 99 99 99 00 99 00 99 99 00 99 00
	>3886	00 00 00 00 00 00 00 00 99 99 00 00 99 44 99 00
	>3896	44 99 44 99 99 99 99 99 00 99 00 99 99 00 99 00
	>38a6	00 00 00 00 00 00 00 00 00 99 99 99 99 99 99 99
	>38b6	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>38c6	00 00 00 00 00 00 00 00 99 99 00 99 99 99 99 99
	>38d6	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>38e6	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>38f6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3906	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3916	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3926	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3936	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3946	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3956	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3966	00 00 00 00 00 00 00 00 00 99 00 00 99 00 00 77
	>3976	00 00 11 77 99 00 11 77 00 00 77 77 99 00 77 77
	>3986	00 00 77 77 99 00 99 77 00 00 00 99 99 00 00 00
	>3996	77 99 00 99 77 99 00 00 77 99 00 99 77 99 00 00
	>39a6	77 99 00 99 99 99 00 00 00 00 99 99 99 00 00 99
	>39b6	00 99 00 00 99 00 00 99 00 99 00 77 99 00 00 11
	>39c6	00 99 00 77 99 00 99 00 99 99 00 99 99 00 99 00
	>39d6	00 00 00 99 00 00 99 00 99 00 00 99 77 00 99 00
	>39e6	99 00 00 99 00 00 99 00 99 99 00 90 99 99 00 90
	>39f6	99 90 00 90 99 00 09 00 00 00 90 09 00 09 00 99
	>3a06	99 90 09 99 00 00 99 99 09 99 99 99 09 99 99 99
	>3a16	09 99 99 99 00 90 99 99 90 09 00 00 99 00 90 00
	>3a26	90 90 09 99 99 09 00 00 00 00 99 99 99 90 09 09
	>3a36	99 99 00 90 99 90 90 09 99 99 09 00 99 99 00 90
	>3a46	99 99 00 90 99 99 00 90 90 09 00 00 00 90 09 99
	>3a56	09 00 99 99 90 09 99 99 00 99 99 99 09 99 99 99
	>3a66	09 99 99 99 09 99 99 99 90 90 00 00 09 09 00 00
	>3a76	90 90 00 00 09 00 00 00 00 00 90 00 00 09 00 09
	>3a86	99 90 00 90 00 00 09 09 00 00 00 00 00 00 00 00
	>3a96	00 00 00 00 00 00 00 00 90 00 00 00 09 00 00 00
	>3aa6	90 90 00 90 09 09 00 00 00 00 00 00 00 00 00 00
	>3ab6	00 00 00 00 00 00 00 00 00 00 90 00 00 00 00 09
	>3ac6	00 00 00 90 00 00 09 09 00 00 00 00 00 00 00 00
	>3ad6	00 00 00 00 00 00 00 00 00 00 90 00 00 09 00 09
	>3ae6	90 90 00 90 00 00 09 09 00 00 00 90 00 00 00 00
	>3af6	00 00 00 90 00 00 09 00 00 00 90 00 00 09 00 09
	>3b06	90 90 00 90 00 00 09 09 90 99 00 90 09 09 00 90
	>3b16	90 90 00 90 09 00 09 00 00 00 90 00 00 00 00 09
	>3b26	00 00 00 90 00 00 09 09 00 00 90 90 00 00 09 09
	>3b36	00 00 00 90 00 00 00 09 00 00 00 00 00 00 00 00
	>3b46	00 00 00 90 00 00 00 00 00 00 00 90 00 00 00 00
	>3b56	00 00 00 90 00 00 09 00 00 00 90 00 00 00 00 09
	>3b66	00 00 00 90 00 00 09 09 00 00 00 00 09 09 09 09
	>3b76	00 00 00 00 09 00 00 00 00 00 00 09 09 00 00 90
	>3b86	00 00 00 00 09 00 00 90 00 00 00 00 09 09 09 00
	>3b96	00 00 00 90 00 00 00 00 90 00 00 90 09 00 00 00
	>3ba6	00 00 00 90 09 00 00 00 00 00 90 00 09 00 09 00
	>3bb6	00 00 00 90 09 00 00 09 00 00 00 00 09 00 00 00
	>3bc6	00 90 90 90 00 00 00 00 00 09 00 90 00 90 00 00
	>3bd6	09 00 00 90 90 00 00 00 00 00 00 90 00 00 00 00
	>3be6	90 90 90 90 00 00 00 00 11 11 11 11 55 11 11 55
	>3bf6	55 11 11 55 55 11 11 55 55 11 11 55 55 11 11 55
	>3c06	55 11 11 55 99 55 55 99 11 55 99 55 55 99 00 99
	>3c16	55 99 00 99 55 99 00 99 55 99 00 99 55 99 00 99
	>3c26	55 99 00 99 99 00 00 00 11 11 11 11 55 11 11 55
	>3c36	55 11 11 55 55 11 11 55 55 11 11 55 55 11 11 55
	>3c46	55 11 11 55 99 55 55 99 11 55 99 55 55 99 00 99
	>3c56	55 99 00 99 55 99 00 99 55 99 00 99 55 99 00 99
	>3c66	55 99 00 99 99 00 00 00 11 11 11 11 55 11 11 55
	>3c76	55 11 11 55 55 11 11 55 55 11 11 55 55 11 11 55
	>3c86	55 11 11 55 99 55 55 99 11 55 99 55 55 99 00 99
	>3c96	55 99 00 99 55 99 00 99 55 99 00 99 55 99 00 99
	>3ca6	55 99 00 99 99 00 00 00 11 11 11 11 55 11 11 55
	>3cb6	55 11 11 55 55 11 11 55 55 11 11 55 99 11 99 55
	>3cc6	55 99 11 99 99 99 99 99 11 55 99 55 55 99 00 99
	>3cd6	55 99 00 99 55 99 00 99 55 99 00 99 99 99 99 99
	>3ce6	55 99 00 99 99 99 99 99 11 11 11 11 55 11 11 55
	>3cf6	55 11 11 55 99 11 99 55 55 99 11 99 99 99 99 99
	>3d06	00 99 00 99 99 00 99 00 11 55 99 55 55 99 00 99
	>3d16	55 99 00 99 99 99 99 99 55 99 00 99 99 99 99 99
	>3d26	00 99 00 99 99 00 99 00 11 11 11 11 99 11 99 55
	>3d36	55 99 11 99 99 99 99 99 00 99 00 99 99 00 99 00
	>3d46	00 00 00 00 00 00 00 00 11 55 99 55 99 99 99 99
	>3d56	55 99 00 99 99 99 99 99 00 99 00 99 99 00 99 00
	>3d66	00 00 00 00 00 00 00 00 11 99 11 99 99 99 99 99
	>3d76	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>3d86	00 00 00 00 00 00 00 00 11 99 99 99 99 99 99 99
	>3d96	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>3da6	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3db6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3dc6	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3dd6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3de6	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3df6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3e06	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3e16	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3e26	00 00 00 00 00 00 00 00 11 11 11 11 55 11 11 55
	>3e36	55 11 11 55 55 11 11 55 55 11 11 55 55 11 11 55
	>3e46	55 11 11 55 99 55 55 99 11 55 99 55 55 99 00 99
	>3e56	55 99 00 99 55 99 00 99 55 99 00 99 55 99 00 99
	>3e66	55 99 00 99 99 00 00 00 11 11 11 11 55 11 11 55
	>3e76	55 11 11 55 55 11 11 55 55 11 11 55 99 11 99 55
	>3e86	55 99 11 99 99 99 99 99 11 55 99 55 55 99 00 99
	>3e96	55 99 00 99 55 99 00 99 55 99 00 99 99 99 99 99
	>3ea6	55 99 00 99 99 99 99 99 11 11 11 11 55 11 11 55
	>3eb6	55 11 11 55 99 11 99 55 55 99 11 99 99 99 99 99
	>3ec6	00 99 00 99 99 00 99 00 11 55 99 55 55 99 00 99
	>3ed6	55 99 00 99 99 99 99 99 55 99 00 99 99 99 99 99
	>3ee6	00 99 00 99 99 00 99 00 11 11 11 11 99 11 99 55
	>3ef6	55 99 11 99 99 99 99 99 00 99 00 99 99 00 99 00
	>3f06	00 00 00 00 00 00 00 00 11 55 99 55 99 99 99 99
	>3f16	55 99 00 99 99 99 99 99 00 99 00 99 99 00 99 00
	>3f26	00 00 00 00 00 00 00 00 11 99 11 99 99 99 99 99
	>3f36	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>3f46	00 00 00 00 00 00 00 00 11 99 99 99 99 99 99 99
	>3f56	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>3f66	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3f76	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3f86	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3f96	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3fa6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3fb6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3fc6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3fd6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3fe6	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3ff6	00 99 00 00 99 00 00 55 00 99 00 55 99 00 00 99
	>4006	00 99 00 99 99 00 99 00 00 99 00 99 00 00 00 00
	>4016	55 55 99 00 99 55 00 00 55 99 00 99 55 00 99 00
	>4026	99 00 00 99 00 00 99 00 00 00 00 00 00 22 00 99
	>4036	11 22 22 00 22 22 22 00 22 22 99 00 00 99 00 00
	>4046	00 00 00 99 99 00 99 00 00 99 00 99 00 00 99 00
	>4056	00 22 00 99 11 22 22 00 22 22 22 00 22 22 99 00
	>4066	00 99 00 99 99 00 99 00 99 90 00 00 99 00 00 99
	>4076	90 00 99 99 00 09 99 00 00 99 00 00 00 99 00 99
	>4086	09 90 09 99 09 90 99 99 00 09 99 99 99 99 99 09
	>4096	99 99 00 99 00 00 99 99 99 99 99 99 99 99 99 99
	>40a6	99 99 09 99 99 99 99 90 09 99 99 99 99 90 99 99
	>40b6	99 99 99 99 99 99 99 99 99 99 00 00 99 00 99 99
	>40c6	90 99 99 99 99 99 90 00 99 99 09 90 99 90 09 90
	>40d6	99 00 99 00 00 00 99 00 00 99 90 00 99 99 00 09
	>40e6	99 00 00 99 00 00 09 99 90 90 00 00 09 00 00 00
	>40f6	90 00 00 00 00 00 00 00 00 09 00 00 00 90 00 90
	>4106	09 00 09 09 00 90 90 90 00 00 00 00 00 00 00 00
	>4116	00 00 00 00 00 00 00 00 09 09 09 09 90 90 90 90
	>4126	09 09 09 09 90 90 90 90 00 00 00 00 00 00 00 00
	>4136	00 00 00 00 00 00 00 00 00 09 00 00 00 90 00 90
	>4146	09 00 09 09 00 90 90 90 00 00 00 00 00 00 00 90
	>4156	00 00 09 09 00 00 90 00 00 09 00 00 00 90 00 90
	>4166	09 00 09 09 00 90 90 90 09 00 00 00 90 00 00 90
	>4176	00 00 09 09 00 00 90 00 00 00 00 00 00 00 00 90
	>4186	00 00 09 09 00 00 90 90 00 00 00 00 00 00 00 90
	>4196	00 00 09 09 00 00 90 00 00 00 00 00 00 00 00 90
	>41a6	00 00 09 09 00 00 90 90 00 00 00 00 00 00 00 00
	>41b6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 90
	>41c6	00 00 09 09 00 00 90 90 00 00 00 00 00 00 09 09
	>41d6	00 00 90 90 00 00 00 00 00 00 00 00 00 00 00 09
	>41e6	00 00 00 90 00 00 00 00 00 00 00 00 09 09 09 09
	>41f6	00 00 00 00 09 00 00 00 00 00 00 09 09 00 00 90
	>4206	00 00 00 00 09 00 00 90 00 00 00 00 09 09 09 00
	>4216	00 00 00 90 00 00 00 00 90 00 00 90 09 00 00 00
	>4226	00 00 00 90 09 00 00 00 00 00 90 00 09 00 09 00
	>4236	00 00 00 90 09 00 00 09 00 00 00 00 09 00 00 00
	>4246	00 90 90 90 00 00 00 00 00 09 00 90 00 90 00 00
	>4256	09 00 00 90 90 00 00 00 00 00 00 90 00 00 00 00
	>4266	90 90 90 90 00 00 00 00 99 99 77 77 77 11 11 11
	>4276	11 11 11 11 77 77 77 99 11 11 77 77 77 99 99 99
	>4286	99 99 99 99 99 99 99 77 77 77 99 99 11 77 77 77
	>4296	77 77 77 77 99 99 99 77 77 77 11 11 99 77 77 77
	>42a6	77 77 77 77 77 77 77 99 00 00 99 99 99 77 77 77
	>42b6	99 99 99 99 99 99 99 00 00 00 00 00 99 00 00 00
	>42c6	00 00 00 00 00 00 00 00 99 99 00 00 77 99 99 99
	>42d6	00 00 00 00 00 00 00 99 00 00 00 00 00 99 99 99
	>42e6	00 00 00 00 00 00 00 00 99 99 77 77 77 11 11 11
	>42f6	11 11 11 11 77 77 77 99 11 11 77 77 77 99 99 99
	>4306	99 99 99 99 99 99 99 77 77 77 99 99 11 77 77 77
	>4316	77 77 77 77 99 99 99 77 77 77 11 11 99 77 77 77
	>4326	77 77 77 77 77 77 77 99 00 00 99 99 99 77 77 77
	>4336	99 99 99 99 99 99 99 00 00 00 00 00 99 00 00 00
	>4346	00 00 00 00 00 00 00 00 99 99 00 00 77 99 99 99
	>4356	00 00 00 00 00 00 00 99 00 00 00 00 00 99 99 99
	>4366	00 00 00 00 00 00 00 00 00 00 99 99 99 77 77 77
	>4376	99 99 99 99 99 99 99 00 00 00 00 00 99 00 99 00
	>4386	00 99 00 99 99 99 99 99 99 99 00 00 77 99 99 99
	>4396	00 00 00 00 00 00 00 99 00 00 00 00 99 99 99 99
	>43a6	00 99 00 99 99 99 99 99 00 00 99 99 99 77 77 77
	>43b6	99 99 99 99 99 99 99 00 00 99 00 99 99 99 99 99
	>43c6	00 99 00 99 99 00 99 00 99 99 00 00 77 99 99 99
	>43d6	00 00 00 00 99 00 99 99 00 99 00 99 99 99 99 99
	>43e6	00 99 00 99 99 00 99 00 00 00 99 99 99 77 99 77
	>43f6	99 99 99 99 99 99 99 99 00 99 00 99 99 00 99 00
	>4406	00 00 00 00 00 00 00 00 99 99 00 00 99 99 99 99
	>4416	00 99 00 99 99 99 99 99 00 99 00 99 99 00 99 00
	>4426	00 00 00 00 00 00 00 00 00 99 99 99 99 99 99 99
	>4436	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>4446	00 00 00 00 00 00 00 00 00 99 99 99 99 99 99 99
	>4456	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>4466	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>4476	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>4486	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>4496	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>44a6	00 00 00 00 00 00 00 00 99 99 77 77 77 11 11 11
	>44b6	11 11 11 11 77 77 77 99 11 11 77 77 99 99 99 99
	>44c6	99 99 99 99 99 99 99 99 77 77 99 99 11 77 77 77
	>44d6	77 77 77 77 99 99 99 77 77 77 11 11 99 77 77 77
	>44e6	77 77 77 77 99 77 99 99 99 99 77 77 77 11 11 11
	>44f6	11 11 11 11 99 77 99 99 11 99 77 99 99 99 99 99
	>4506	00 99 00 99 99 00 99 00 77 77 99 99 11 77 77 77
	>4516	77 77 77 77 99 99 99 77 77 77 11 11 99 77 99 77
	>4526	77 99 77 99 99 99 99 99 99 99 77 77 99 11 99 11
	>4536	11 99 11 99 99 99 99 99 00 99 00 99 99 00 99 00
	>4546	00 00 00 00 00 00 00 00 77 77 99 99 99 77 99 77
	>4556	77 99 77 99 99 99 99 99 00 99 00 99 99 00 99 00
	>4566	00 00 00 00 00 00 00 00 99 99 77 99 99 99 99 99
	>4576	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>4586	00 00 00 00 00 00 00 00 77 99 99 99 99 99 99 99
	>4596	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>45a6	00 00 00 00 00 00 00 00 00 99 99 99 99 99 99 99
	>45b6	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>45c6	00 00 00 00 00 00 00 00 00 99 99 99 99 99 99 99
	>45d6	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>45e6	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>45f6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>4606	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>4616	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>4626	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>4636	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>4646	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>4656	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>4666	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>4676	00 99 00 33 99 00 33 11 00 00 33 11 00 33 33 33
	>4686	00 33 33 33 00 99 33 33 00 99 00 99 00 00 99 00
	>4696	33 00 00 99 33 33 00 00 33 33 00 99 33 33 33 00
	>46a6	33 33 99 00 33 99 00 00 00 99 99 99 00 99 99 99
	>46b6	00 00 99 00 99 00 00 00 00 00 00 00 99 00 00 44
	>46c6	00 99 00 00 99 00 99 00 99 99 99 00 99 99 00 00
	>46d6	99 00 00 00 00 00 00 00 00 44 00 99 44 00 99 00
	>46e6	00 99 00 99 99 00 99 00
5494							.struct
5495	>2cee							BackChars1 .fill $680
5496	>336e							BackChars2 .fill $680
5497	>39ee							BackChars3 .fill $680
5498	>406e							BackChars4 .fill $680
5499							.ends
5500						.endu
5501	.46ee					WallCharLUT .block
5502	=512						_offset = 16*4*8
5503	=(12014,13678,15342,17006)			values = (BackChars1,BackChars2,BackChars3,BackChars4)+_offset
5504	>46ee	ee 6e ee 6e				lo .byte <(values)
5505	>46f2	2e 35 3b 42				hi .byte >(values)
5506						.bend

5508	>46f6	11 11 11 11 33 11 33 33		LowerFixedChars .binary "fixed_section_chars.ver"
	>46fe	11 11 11 33 33 11 33 33 11 11 11 33 33 11 33 33
	>470e	11 11 11 33 99 33 99 99 33 33 99 33 99 00 00 00
	>471e	99 99 00 99 99 00 00 00 99 99 00 99 99 00 00 00
	>472e	99 99 00 99 00 00 00 00 00 00 00 00 00 99 33 99
	>473e	00 33 11 33 00 33 11 33 00 33 11 33 00 33 11 33
	>474e	00 33 11 33 00 99 33 99 00 00 00 00 00 00 00 00
	>475e	99 00 99 00 99 00 99 00 99 00 99 00 99 00 99 00
	>476e	99 00 99 00 00 00 00 00 00 00 99 00 99 00 00 00
	>477e	00 11 00 44 99 00 44 44 00 00 11 44 00 44 11 44
	>478e	11 44 44 44 00 44 44 44 00 00 00 99 11 00 00 00
	>479e	44 00 00 99 44 99 00 00 44 44 00 11 44 99 00 00
	>47ae	99 44 99 00 44 99 00 00 00 44 99 44 00 99 44 99
	>47be	00 99 99 99 11 00 00 99 00 00 99 00 00 99 00 00
	>47ce	00 00 00 11 99 00 00 00 99 00 00 00 99 99 00 11
	>47de	99 00 00 00 00 00 00 00 00 00 99 00 00 99 11 00
	>47ee	00 00 00 99 00 00 99 00 00 99 00 00 99 00 00 11
	>47fe	00 99 00 11 99 00 00 77 00 99 00 11 99 00 00 77
	>480e	00 99 00 11 99 00 11 77 00 99 00 99 77 00 99 00
	>481e	77 77 00 99 77 99 00 00 77 77 00 99 77 99 00 00
	>482e	77 00 00 99 77 11 00 00 00 11 77 99 00 77 99 00
	>483e	00 77 00 00 00 77 00 00 00 77 11 00 00 99 77 11
	>484e	00 00 99 77 99 00 00 00 99 77 11 00 00 99 77 00
	>485e	00 00 77 00 99 00 77 00 00 11 77 00 11 77 99 00
	>486e	77 99 00 99 00 00 99 00 00 00 00 22 99 00 22 22
	>487e	00 00 22 22 00 22 99 22 00 22 22 22 00 22 99 22
	>488e	00 22 22 22 00 22 22 22 22 00 00 00 99 22 00 00
	>489e	22 22 00 99 99 22 22 00 22 22 22 00 22 22 22 00
	>48ae	22 22 99 00 22 22 22 00 00 22 11 22 00 22 00 22
	>48be	00 22 22 22 00 22 99 22 00 22 22 22 00 22 99 22
	>48ce	00 22 00 22 00 22 99 22 22 22 22 00 99 22 99 00
	>48de	22 22 22 00 22 22 99 00 99 22 00 00 22 22 99 00
	>48ee	99 22 00 00 00 22 00 00 00 99 00 00 99 00 00 11
	>48fe	00 11 00 00 99 00 00 77 00 00 77 11 11 00 99 77
	>490e	00 00 00 99 00 11 00 00 00 99 00 99 00 00 00 00
	>491e	00 00 11 00 77 00 00 00 77 77 00 11 77 99 00 00
	>492e	99 00 00 99 00 00 11 00 00 00 00 00 99 00 00 00
	>493e	00 99 00 99 99 00 00 55 00 00 55 55 99 00 00 55
	>494e	00 99 00 55 99 00 99 00 11 00 00 99 00 00 99 00
	>495e	00 00 00 99 99 00 99 00 99 00 00 99 99 55 00 00
	>496e	99 00 00 99 00 00 99 00 00 99 00 00 00 00 00 55
	>497e	00 55 11 55 00 55 11 55 00 55 11 55 00 55 55 55
	>498e	00 55 11 55 00 55 55 55 00 99 00 00 99 00 00 00
	>499e	99 99 00 00 99 99 99 00 99 99 00 00 99 99 99 00
	>49ae	99 99 00 00 99 99 99 00 00 99 99 99 99 00 99 99
	>49be	00 00 55 99 99 00 99 99 00 00 99 99 99 00 00 99
	>49ce	00 99 00 99 99 00 99 00 55 55 00 00 55 00 00 00
	>49de	55 55 00 99 55 00 00 00 55 55 00 99 55 00 99 00
	>49ee	99 00 00 99 00 00 99 00 99 00 00 00 00 33 11 33
	>49fe	00 99 33 99 99 00 00 00 00 33 11 33 00 99 33 99
	>4a0e	99 00 00 00 00 33 11 33 00 00 00 99 44 00 44 00
	>4a1e	00 00 00 00 99 99 00 99 44 00 44 00 00 99 00 00
	>4a2e	99 00 00 99 44 00 44 00 00 99 33 99 99 00 00 00
	>4a3e	00 33 11 33 00 99 33 99 99 00 00 00 00 33 11 33
	>4a4e	00 99 33 99 99 00 00 00 00 00 00 00 99 99 00 99
	>4a5e	44 00 44 00 00 00 00 00 99 99 00 99 44 00 44 00
	>4a6e	00 00 00 00 00 00 00 99 00 99 00 00 99 00 00 11
	>4a7e	00 99 00 00 99 00 00 33 00 99 00 33 99 00 00 33
	>4a8e	00 99 00 33 99 00 33 33 00 99 00 99 33 00 99 00
	>4a9e	00 99 00 99 33 00 99 00 99 00 00 99 33 00 99 00
	>4aae	99 00 00 99 33 99 00 00 00 00 11 33 00 33 11 33
	>4abe	00 33 33 33 00 99 33 33 00 33 33 33 00 99 33 99
	>4ace	00 00 99 99 99 00 00 00 33 33 00 99 33 99 99 00
	>4ade	33 33 99 00 33 99 99 00 99 33 99 00 33 99 99 00
	>4aee	99 99 00 99 00 00 99 00 00 99 00 00 99 00 00 22
	>4afe	00 99 00 22 99 00 22 11 00 00 22 11 99 00 22 22
	>4b0e	00 22 22 22 00 99 22 22 00 99 00 99 22 00 99 00
	>4b1e	22 00 00 99 22 99 00 00 22 22 00 99 22 99 00 00
	>4b2e	22 22 99 00 22 99 00 00 00 99 99 99 00 99 99 99
	>4b3e	00 00 99 00 00 99 00 99 00 00 00 00 99 00 00 00
	>4b4e	00 00 00 00 99 00 00 00 99 99 99 00 99 99 00 00
	>4b5e	99 00 00 00 00 00 99 00 00 00 22 00 00 22 99 00
	>4b6e	99 99 00 99 00 00 99 00 00 99 00 00 99 00 00 33
	>4b7e	00 00 11 33 99 00 11 33 00 00 33 33 99 00 33 33
	>4b8e	00 00 33 33 99 00 99 33 00 00 00 99 99 00 00 00
	>4b9e	33 99 00 99 33 99 00 00 33 99 00 99 33 99 00 00
	>4bae	33 99 00 99 99 99 00 00
5509	>4bb6	55 55 55 55 55 55 55 55		UpperFixedChars .binary "top_fixed_chars.ver"
	>4bbe	55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55
	>4bce	55 55 55 55 55 55 55 55 00 00 00 99 99 00 99 00
	>4bde	00 00 99 22 00 99 22 22 00 99 00 22 00 99 22 22
	>4bee	00 99 00 22 00 99 22 22 00 00 00 00 22 22 00 00
	>4bfe	22 22 00 99 99 22 22 00 22 22 22 00 99 22 22 00
	>4c0e	00 22 99 00 99 22 22 00 00 99 00 11 00 99 22 00
	>4c1e	00 99 00 22 00 99 99 22 00 99 00 22 00 99 99 22
	>4c2e	00 99 00 22 00 00 00 22 22 22 22 00 99 22 99 00
	>4c3e	00 22 22 00 99 22 99 00 00 22 00 00 00 22 99 00
	>4c4e	00 22 00 00 00 22 00 00 00 00 00 99 99 00 99 99
	>4c5e	00 00 99 22 00 99 22 99 00 99 99 22 00 99 22 11
	>4c6e	00 99 22 22 00 99 22 11 99 00 00 00 99 99 00 00
	>4c7e	99 00 00 99 99 22 99 00 00 99 22 00 99 22 99 00
	>4c8e	00 99 22 00 99 22 99 00 00 99 22 11 00 99 22 11
	>4c9e	00 99 22 22 00 99 22 11 00 99 99 22 00 99 22 99
	>4cae	00 99 99 22 00 00 99 99 11 22 22 00 99 22 22 00
	>4cbe	00 22 22 00 99 22 99 00 00 99 22 00 99 22 99 00
	>4cce	00 99 22 00 99 22 99 00 99 00 00 00 99 99 00 00
	>4cde	22 99 00 99 99 22 99 00 22 99 99 00 11 22 99 00
	>4cee	22 22 99 00 11 22 99 00 11 22 11 00 11 22 99 00
	>4cfe	22 22 99 00 11 22 99 00 22 99 99 00 99 22 99 00
	>4d0e	22 99 99 00 99 99 00 00 11 22 99 00 11 22 99 00
	>4d1e	22 22 99 00 11 22 99 00 22 99 99 00 99 22 99 00
	>4d2e	22 99 99 00 99 99 00 00 99 99 99 99 99 09 99 09
	>4d3e	99 90 90 99 99 99 09 99 99 90 90 99 99 09 99 09
	>4d4e	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>4d5e	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>4d6e	99 99 99 99 99 99 99 99 77 99 77 99 99 77 99 77
	>4d7e	77 11 11 11 99 77 77 77 77 11 99 99 99 77 99 99
	>4d8e	77 11 99 99 99 77 99 99 77 99 77 99 99 77 99 77
	>4d9e	11 11 11 11 77 77 77 77 99 99 99 99 99 99 99 99
	>4dae	99 99 99 99 99 99 99 99 77 11 99 99 99 77 99 99
	>4dbe	77 11 99 99 99 77 99 99 77 11 99 99 99 77 99 99
	>4dce	77 11 99 99 99 77 99 99 77 99 77 99 99 77 99 00
	>4dde	11 11 11 99 77 77 99 00 99 99 00 99 99 99 00 00
	>4dee	99 99 00 99 99 99 00 00 99 99 00 99 99 99 00 00
	>4dfe	99 99 00 99 99 99 00 00 99 99 00 99 99 99 00 00
	>4e0e	99 99 00 99 99 99 00 00 99 99 99 99 99 99 99 99
	>4e1e	99 91 11 11 91 11 11 11 91 11 11 11 11 11 11 11
	>4e2e	11 11 19 91 11 11 99 99 99 99 99 99 99 99 99 99
	>4e3e	19 99 91 19 11 19 11 11 11 19 11 11 11 11 91 11
	>4e4e	11 11 91 11 11 11 91 11 99 99 99 99 99 99 99 99
	>4e5e	99 91 19 99 99 11 11 99 99 11 11 99 99 11 11 99
	>4e6e	99 11 11 99 99 11 11 99 99 99 99 99 99 99 99 99
	>4e7e	91 19 99 11 11 11 91 11 11 11 91 11 11 11 91 11
	>4e8e	11 11 91 11 11 11 91 11 99 99 99 99 99 99 99 99
	>4e9e	11 11 99 91 11 11 19 11 11 11 11 91 99 11 11 91
	>4eae	99 11 11 91 11 11 11 91 99 99 99 99 99 99 99 99
	>4ebe	19 99 91 19 11 99 11 11 11 99 11 11 11 91 11 11
	>4ece	11 11 11 19 11 11 11 99 33 33 99 99 33 33 39 93
	>4ede	33 33 33 33 93 33 33 33 93 33 33 33 99 93 33 33
	>4eee	99 99 99 99 99 99 99 99 33 33 93 33 33 99 93 33
	>4efe	39 33 93 33 93 33 39 33 93 33 39 33 39 33 99 33
	>4f0e	99 99 99 99 99 99 99 99 93 33 33 39 93 33 33 39
	>4f1e	33 33 33 33 33 33 33 33 33 39 93 33 33 99 99 33
	>4f2e	99 99 99 99 99 99 99 99 33 33 93 33 33 33 93 33
	>4f3e	33 33 93 33 33 33 93 33 33 39 33 33 33 99 93 39
	>4f4e	99 99 99 99 99 99 99 99 33 33 33 93 33 33 33 93
	>4f5e	99 33 33 93 99 33 33 93 99 33 33 93 99 93 39 93
	>4f6e	99 99 99 99 99 99 99 99 33 33 33 99 33 33 33 39
	>4f7e	33 93 33 33 33 99 33 33 33 99 33 33 39 99 93 39
	>4f8e	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 33
	>4f9e	99 99 93 39 99 99 99 33 99 99 93 99 99 99 99 33
	>4fae	99 99 99 99 99 99 99 99 99 99 99 99 33 99 99 33
	>4fbe	99 39 93 39 33 99 93 39 93 39 93 39 33 99 99 33
	>4fce	99 99 99 99 99 99 99 99 99 99 99 99 33 99 99 33
	>4fde	93 39 93 39 99 99 93 39 93 39 93 39 33 99 99 33
	>4fee	99 99 99 99 99 99 99 99 99 99 99 99 33 99 93 33
	>4ffe	93 39 93 39 93 39 93 33 93 39 93 39 33 99 93 39
	>500e	99 99 99 99 99 99 99 99 99 99 99 99 33 99 99 33
	>501e	93 39 93 39 33 99 93 33 93 39 93 39 93 39 99 33
	>502e	99 99 99 99 99 99 99 99 99 99 99 99 33 99 99 99
	>503e	93 39 99 99 99 99 99 99 93 39 99 99 33 99 99 99
	>504e	99 99 99 99 99 99 99 99 99 99 99 99 93 39 93 39
	>505e	93 39 93 39 93 33 33 39 93 39 93 39 93 39 93 39
	>506e	99 99 99 99 99 99 99 99 99 99 99 99 93 33 33 39
	>507e	99 93 39 99 99 93 39 99 99 93 39 99 93 33 33 39
	>508e	99 99 99 99 99 99 99 99 99 99 99 99 99 33 33 99
	>509e	93 39 93 39 93 39 99 99 93 39 93 39 99 33 33 39
	>50ae	99 99 93 39 99 99 99 99 99 99 99 99 99 99 99 00
	>50be	99 99 00 77 99 99 00 77 99 99 00 77 99 99 00 77
	>50ce	99 99 00 99 99 00 99 77 00 00 00 99 77 77 77 00
	>50de	99 77 99 00 11 99 11 00 00 99 00 00 77 11 11 00
	>50ee	77 99 99 00 99 99 00 00 99 00 77 77 00 99 77 77
	>50fe	00 77 77 77 00 77 77 99 00 77 99 77 99 00 00 00
	>510e	99 99 00 77 99 00 11 11 77 77 77 00 77 77 99 00
	>511e	77 77 77 00 77 77 99 00 77 99 00 77 00 00 99 00
	>512e	00 99 00 99 00 77 77 00 99 99 99 00 99 00 00 11
	>513e	00 11 00 00 00 00 00 77 00 00 77 11 11 00 99 77
	>514e	00 00 00 99 00 11 00 00 99 99 99 99 00 00 00 99
	>515e	00 00 11 00 77 00 00 00 77 77 00 11 77 99 00 00
	>516e	99 00 00 00 00 00 11 00 99 00 00 00 99 99 00 00
	>517e	99 99 00 99 99 99 00 55 99 00 55 55 99 99 00 55
	>518e	99 99 00 55 99 99 99 00 11 00 00 99 00 00 99 99
	>519e	00 00 99 99 99 00 99 99 99 00 99 99 99 55 00 99
	>51ae	99 00 99 99 00 99 99 99 99 99 99 99 99 11 11 99
	>51be	91 19 11 19 91 19 91 19 91 11 91 19 99 11 11 99
	>51ce	99 99 99 99 99 99 99 99 99 99 99 99 99 91 19 99
	>51de	99 11 19 99 99 91 19 99 99 91 19 99 99 11 11 99
	>51ee	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>51fe	91 99 91 19 99 11 11 99 91 19 99 99 91 11 11 19
	>520e	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>521e	91 19 91 19 99 99 11 99 91 19 91 19 99 11 11 99
	>522e	99 99 99 99 99 99 99 99 99 99 99 99 91 19 11 99
	>523e	91 19 11 99 91 11 11 19 99 99 11 99 99 99 11 99
	>524e	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 19
	>525e	91 19 99 99 91 11 11 99 99 99 91 19 91 11 11 99
	>526e	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>527e	91 19 99 19 91 11 11 99 91 19 91 19 99 11 11 99
	>528e	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 19
	>529e	91 19 91 19 99 99 11 99 99 91 19 99 99 91 19 99
	>52ae	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>52be	91 19 91 19 99 11 11 99 91 19 91 19 99 11 11 99
	>52ce	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>52de	91 19 91 19 99 11 11 19 91 99 91 19 99 11 11 99
	>52ee	99 99 99 99 99 99 99 99 77 11 99 99 99 77 99 99
	>52fe	77 11 99 99 99 77 99 99 77 99 00 00 99 00 00 00
	>530e	00 99 00 99 99 00 99 00 99 99 99 99 99 99 99 99
	>531e	99 99 99 99 99 99 99 99 00 00 00 00 00 00 00 00
	>532e	00 99 00 99 99 00 99 00 99 99 00 99 99 99 00 00
	>533e	99 99 00 99 99 99 00 00 00 00 00 99 00 00 00 00
	>534e	00 99 00 99 99 00 99 00 99 99 99 99 99 99 99 99
	>535e	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>536e	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>537e	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>538e	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>539e	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>53ae	99 99 99 99 99 99 99 99
5510	.53b6					fileTiles ;
5511						;.binary "tiledefs.raw",0,32*4
5512						;.byte 84,85,86,87
5513						linerTile4 .macro
5515						.endm
5514	>53b6	00 01 02 03			    .byte 0*4+range(0,4)
5514	>53ba	10 11 12 13			    .byte 4*4+range(0,4)
5514	>53be	38 39 3a 3b			    .byte 14*4+range(0,4)
5514	>53c2	44 45 46 47			    .byte 17*4+range(0,4)
5514	>53c6	30 31 32 33			    .byte 12*4+range(0,4)
5514	>53ca	3c 3d 3e 3f			    .byte 15*4+range(0,4)
5514	>53ce	48 49 4a 4b			    .byte 18*4+range(0,4)
5514	>53d2	4c 4d 4e 4f			    .byte 19*4+range(0,4)
5514	>53d6	50 51 52 53			    .byte 20*4+range(0,4)
5514	>53da	54 55 56 57			    .byte 21*4+range(0,4)
5514	>53de	40 41 42 43			    .byte 16*4+range(0,4)
5527	>53e2	c1 c2 c3 c4			.byte 193,194,195,196 ; exit open frame 1
5528	>53e6	c5 c6 c7 c8			.byte 197,198,199,200 ; exit open frame 2
5529	>53ea	c5 c9 c7 ca			.byte 197,201,199,202 ; exit open frame 3
5530	>53ee	c5 c9 c7 cb			.byte 197,201,199,203 ; exit open frame 4
5514	>53f2	40 41 42 43			    .byte 16*4+range(0,4)
5514	>53f6	34 35 36 37			    .byte 13*4+range(0,4)
5514	>53fa	14 15 16 17			    .byte 5*4+range(0,4)
5534	>53fe	14 15 18 19			.byte 20,21,24,25
5535	>5402	14 15 1a 1b			.byte 20,21,26,27
5536	>5406	14 15 1c 1d			.byte 20,21,28,29
5537	>540a	14 15 1e 1f			.byte 20,21,30,31
5538	>540e	14 15 20 21			.byte 20,21,32,33
5539	>5412	14 15 0e 0f			.byte 20,21,14,15
5540	>5416	22 23 0e 0f			.byte 34,35,14,15
5541	>541a	24 25 0e 0f			.byte 36,37,14,15
5542	>541e	26 27 0e 0f			.byte 38,39,14,15
5543	>5422	28 29 0e 0f			.byte 40,41,14,15
5544	>5426	2a 2b 0e 0f			.byte 42,43,14,15
5545	>542a	2c 2d 0e 0f			.byte 44,45,14,15
5546	>542e	0c 0d 0e 0f			.byte 12,13,14,15 ; DISS End
5547	>5432	04 05 02 03			.byte 4,5,2,3 ; underhang start
5548	>5436	07 05 02 03			.byte 7,5,2,3 ; underhang
5549	>543a	08 01 02 03			.byte 8,1,2,3 ; shadow open corner
5550	>543e	09 01 0b 03			.byte 9,1,11,3 ; side shadow
5551	>5442	0a 01 0b 03			.byte 10,1,11,3 ; middlesideShadow
5552	>5446	06 05 0b 03			.byte 6,5,11,3 ; topLeftCorner
5553	>544a	7c 7d 7e 7f			.byte 124,125,126,127 ; old wall for intermission

5555	.544e					fileFont ;
5556	>544e	00 3c 66 6e 60 3c 00 00		.binary "font.raw"
	>5456	00 3c 66 7e 66 66 00 00 00 7c 66 7c 66 7c 00 00
	>5466	00 3c 66 60 66 3c 00 00 00 7c 66 66 66 7c 00 00
	>5476	00 3c 66 70 66 3c 00 00 00 3c 66 70 60 60 00 00
	>5486	00 3c 66 60 66 3e 06 00 00 66 66 7e 66 66 00 00
	>5496	00 7e 18 18 18 7e 00 00 00 7e 66 06 66 3c 00 00
	>54a6	00 66 66 7c 66 66 00 00 00 60 60 60 66 7e 00 00
	>54b6	00 66 7e 66 66 66 00 00 00 66 76 7e 6e 66 00 00
	>54c6	00 3c 66 66 66 3c 00 00 00 7c 66 7c 60 60 00 00
	>54d6	00 3c 66 66 6e 3c 06 00 00 7c 66 7c 66 66 00 00
	>54e6	00 3c 62 3c 46 3c 00 00 00 7e 5a 18 18 18 00 00
	>54f6	00 66 66 66 66 3e 00 00 00 66 66 66 3c 18 00 00
	>5506	00 66 66 66 7e 66 00 00 00 66 66 3c 66 66 00 00
	>5516	00 66 66 3e 06 7c 00 00 00 7e 0c 18 30 7e 00 00
	>5526	00 3c 30 30 30 3c 00 00 00 1c 32 78 30 7e 00 00
	>5536	00 3c 0c 0c 0c 3c 00 00 00 18 3c 7e 18 18 00 00
	>5546	00 08 0c 7e 0c 08 00 00 00 00 00 00 00 00 00 00
	>5556	00 18 18 18 00 18 00 00 00 66 66 00 00 00 00 00
	>5566	00 24 7e 24 7e 24 00 00 00 28 7c 7c 38 10 00 00
	>5576	00 66 6c 18 36 66 00 00 00 38 28 7e 6c 7e 00 00
	>5586	00 18 18 30 00 00 00 00 00 18 30 30 30 18 00 00
	>5596	00 18 0c 0c 0c 18 00 00 00 66 7e 18 7e 66 00 00
	>55a6	00 18 18 7e 18 18 00 00 00 00 00 00 18 18 30 00
	>55b6	00 00 00 7e 00 00 00 00 00 00 00 00 18 18 00 00
	>55c6	00 06 0c 18 30 60 00 00 00 3c 6e 66 76 3c 00 00
	>55d6	00 18 38 18 18 3c 00 00 00 3c 46 3c 60 7e 00 00
	>55e6	00 3c 66 0c 66 3c 00 00 00 6c 6c 7e 0c 0c 00 00
	>55f6	00 7e 60 7c 06 7c 00 00 00 3c 62 7c 66 3c 00 00
	>5606	00 7e 66 0c 18 18 00 00 00 3c 66 3c 66 3c 00 00
	>5616	00 3c 66 3e 46 3c 00 00 00 18 18 00 18 18 00 00
	>5626	00 18 18 00 18 18 30 00 00 1c 30 60 30 1c 00 00
	>5636	00 00 7e 00 7e 00 00 00 00 38 0c 06 0c 38 00 00
	>5646	00 3c 46 1c 00 18 00 00
5557	.564e					FILE_END
5558						.send sCharSprData
5559						.enc "none"
5560	>564e	53 50 52 49 54 45 53 2e		spriteFileName .text "sprites.ver"
	>5656	56 45 52
5561	>5659	99 99 99 99 99 11 11 99		font4bpp .binary "font4bpp.ver"
	>5661	91 19 91 19 91 19 11 19 91 19 99 99 99 11 11 99
	>5671	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>5681	91 19 91 19 91 11 11 19 91 19 91 19 91 19 91 19
	>5691	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 99
	>56a1	91 19 91 19 91 11 11 99 91 19 91 19 91 11 11 99
	>56b1	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>56c1	91 19 91 19 91 19 99 99 91 19 91 19 99 11 11 99
	>56d1	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 99
	>56e1	91 19 91 19 91 19 91 19 91 19 91 19 91 11 11 99
	>56f1	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>5701	91 19 91 19 91 11 99 99 91 19 91 19 99 11 11 99
	>5711	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>5721	91 19 91 19 91 11 99 99 91 19 99 99 91 19 99 99
	>5731	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>5741	91 19 91 19 91 19 99 99 91 19 91 19 99 11 11 19
	>5751	99 99 91 19 99 99 99 99 99 99 99 99 91 19 91 19
	>5761	91 19 91 19 91 11 11 19 91 19 91 19 91 19 91 19
	>5771	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 19
	>5781	99 91 19 99 99 91 19 99 99 91 19 99 91 11 11 19
	>5791	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 19
	>57a1	91 19 91 19 99 99 91 19 91 19 91 19 99 11 11 99
	>57b1	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>57c1	91 19 91 19 91 11 11 99 91 19 91 19 91 19 91 19
	>57d1	99 99 99 99 99 99 99 99 99 99 99 99 91 19 99 99
	>57e1	91 19 99 99 91 19 99 99 91 19 91 19 91 11 11 19
	>57f1	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>5801	91 11 11 19 91 19 91 19 91 19 91 19 91 19 91 19
	>5811	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>5821	91 11 91 19 91 11 11 19 91 19 11 19 91 19 91 19
	>5831	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>5841	91 19 91 19 91 19 91 19 91 19 91 19 99 11 11 99
	>5851	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 99
	>5861	91 19 91 19 91 11 11 99 91 19 99 99 91 19 99 99
	>5871	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>5881	91 19 91 19 91 19 91 19 91 19 11 19 99 11 11 99
	>5891	99 99 91 19 99 99 99 99 99 99 99 99 91 11 11 99
	>58a1	91 19 91 19 91 11 11 99 91 19 91 19 91 19 91 19
	>58b1	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>58c1	91 19 99 19 99 11 11 99 91 99 91 19 99 11 11 99
	>58d1	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 19
	>58e1	91 91 19 19 99 91 19 99 99 91 19 99 99 91 19 99
	>58f1	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>5901	91 19 91 19 91 19 91 19 91 19 91 19 99 11 11 19
	>5911	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>5921	91 19 91 19 91 19 91 19 99 11 11 99 99 91 19 99
	>5931	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>5941	91 19 91 19 91 19 91 19 91 11 11 19 91 19 91 19
	>5951	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>5961	91 19 91 19 99 11 11 99 91 19 91 19 91 19 91 19
	>5971	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>5981	91 19 91 19 99 11 11 19 99 99 91 19 91 11 11 99
	>5991	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 19
	>59a1	99 99 11 99 99 91 19 99 99 11 99 99 91 11 11 19
	>59b1	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>59c1	99 11 99 99 99 11 99 99 99 11 99 99 99 11 11 99
	>59d1	99 99 99 99 99 99 99 99 99 99 99 99 99 91 11 99
	>59e1	99 11 99 19 91 11 19 99 99 11 99 99 91 11 11 19
	>59f1	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>5a01	99 99 11 99 99 99 11 99 99 99 11 99 99 11 11 99
	>5a11	99 99 99 99 99 99 99 99 99 99 99 99 99 91 19 99
	>5a21	99 11 11 99 91 11 11 19 99 91 19 99 99 91 19 99
	>5a31	99 99 99 99 99 99 99 99 99 99 99 99 99 99 19 99
	>5a41	99 99 11 99 91 11 11 19 99 99 11 99 99 99 19 99
	>5a51	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>5a61	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>5a71	99 99 99 99 99 99 99 99 99 99 99 99 99 91 19 99
	>5a81	99 91 19 99 99 91 19 99 99 99 99 99 99 91 19 99
	>5a91	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>5aa1	91 19 91 19 99 99 99 99 99 99 99 99 99 99 99 99
	>5ab1	99 99 99 99 99 99 99 99 99 99 99 99 99 19 91 99
	>5ac1	91 11 11 19 99 19 91 99 91 11 11 19 99 19 91 99
	>5ad1	99 99 99 99 99 99 99 99 99 99 99 99 99 19 19 99
	>5ae1	91 11 11 99 91 11 11 99 99 11 19 99 99 91 99 99
	>5af1	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>5b01	91 19 11 99 99 91 19 99 99 11 91 19 91 19 91 19
	>5b11	99 99 99 99 99 99 99 99 99 99 99 99 99 11 19 99
	>5b21	99 19 19 99 91 11 11 19 91 19 11 99 91 11 11 19
	>5b31	99 99 99 99 99 99 99 99 99 99 99 99 99 91 19 99
	>5b41	99 91 19 99 99 11 99 99 99 99 99 99 99 99 99 99
	>5b51	99 99 99 99 99 99 99 99 99 99 99 99 99 91 19 99
	>5b61	99 11 99 99 99 11 99 99 99 11 99 99 99 91 19 99
	>5b71	99 99 99 99 99 99 99 99 99 99 99 99 99 91 19 99
	>5b81	99 99 11 99 99 99 11 99 99 99 11 99 99 91 19 99
	>5b91	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>5ba1	91 11 11 19 99 91 19 99 91 11 11 19 91 19 91 19
	>5bb1	99 99 99 99 99 99 99 99 99 99 99 99 99 91 19 99
	>5bc1	99 91 19 99 91 11 11 19 99 91 19 99 99 91 19 99
	>5bd1	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>5be1	99 99 99 99 99 99 99 99 99 91 19 99 99 91 19 99
	>5bf1	99 11 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>5c01	99 99 99 99 91 11 11 19 99 99 99 99 99 99 99 99
	>5c11	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>5c21	99 99 99 99 99 99 99 99 99 91 19 99 99 91 19 99
	>5c31	99 99 99 99 99 99 99 99 99 99 99 99 99 99 91 19
	>5c41	99 99 11 99 99 91 19 99 99 11 99 99 91 19 99 99
	>5c51	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>5c61	91 19 11 19 91 19 91 19 91 11 91 19 99 11 11 99
	>5c71	99 99 99 99 99 99 99 99 99 99 99 99 99 91 19 99
	>5c81	99 11 19 99 99 91 19 99 99 91 19 99 99 11 11 99
	>5c91	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>5ca1	91 99 91 19 99 11 11 99 91 19 99 99 91 11 11 19
	>5cb1	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>5cc1	91 19 91 19 99 99 11 99 91 19 91 19 99 11 11 99
	>5cd1	99 99 99 99 99 99 99 99 99 99 99 99 91 19 11 99
	>5ce1	91 19 11 99 91 11 11 19 99 99 11 99 99 99 11 99
	>5cf1	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 19
	>5d01	91 19 99 99 91 11 11 99 99 99 91 19 91 11 11 99
	>5d11	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>5d21	91 19 99 19 91 11 11 99 91 19 91 19 99 11 11 99
	>5d31	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 19
	>5d41	91 19 91 19 99 99 11 99 99 91 19 99 99 91 19 99
	>5d51	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>5d61	91 19 91 19 99 11 11 99 91 19 91 19 99 11 11 99
	>5d71	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>5d81	91 19 91 19 99 11 11 19 91 99 91 19 99 11 11 99
	>5d91	99 99 99 99 99 99 99 99 99 99 99 99 99 91 19 99
	>5da1	99 91 19 99 99 99 99 99 99 91 19 99 99 91 19 99
	>5db1	99 99 99 99 99 99 99 99 99 99 99 99 99 91 19 99
	>5dc1	99 91 19 99 99 99 99 99 99 91 19 99 99 91 19 99
	>5dd1	99 11 99 99 99 99 99 99 99 99 99 99 99 91 11 99
	>5de1	99 11 99 99 91 19 99 99 99 11 99 99 99 91 11 99
	>5df1	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>5e01	91 11 11 19 99 99 99 99 91 11 11 19 99 99 99 99
	>5e11	99 99 99 99 99 99 99 99 99 99 99 99 99 11 19 99
	>5e21	99 99 11 99 99 99 91 19 99 99 11 99 99 11 19 99
	>5e31	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>5e41	91 99 91 19 99 91 11 99 99 99 99 99 99 91 19 99
	>5e51	99 99 99 99 99 99 99 99

5563	.5e59					CopyDataFields .block
5564	.5e59					  src .block
5565	>5e59	4e f6 b6 59			    lo .byte <(values[:,0])
5566	>5e5d	54 46 4b 56			    hi .byte >(values[:,0])
5567						  .bend
5568	.5e61					  dest .block
5569	>5e61	00 80 00 00			    lo   .byte <(values[:,1])
5570	>5e65	24 2c 3e 36			    hi   .byte >(values[:,1])
5571	>5e69	10 10 10 10			    bank .byte `(values[:,1] | kVERA.inc_1) ; set increment to 1
5572						  .bend
5573	>5e6d	02 05 08 08			  pages .byte (values[:,2])
5574						.bend

5576						.enc "qwak"

5578						.dsection sLEVEL_TABLE
5579						.section sLEVEL_TABLE
5580	.5e71					LevelTableLo
5581	>5e71	af 7c 49 14 e3 aa 7b 4e		.byte <fileTileMap,<Level02,<Level03,<Level04,<Level05,<Level06,<Level07,<Level08,<Level09,<Level10,<Level11,<Level12,<Level13,<Level14,<Level15,<Level16,<Level17,<Level18,<Level19,<Level20,<Level21,<Level22,<Level23,<Level24,<Level25,<Level26,<Level27,<Level28,<Level29,<Level30,<Level31
	>5e79	17 e8 af 7e 4d 1e f1 ba 89 5a 2b fa c3 94 5f 2a
	>5e89	fd c8 99 6c 39 0a d5
5582	.5e90					LevelTableHi
5583	>5e90	5e 5f 60 61 61 62 63 64		.byte >fileTileMap,>Level02,>Level03,>Level04,>Level05,>Level06,>Level07,>Level08,>Level09,>Level10,>Level11,>Level12,>Level13,>Level14,>Level15,>Level16,>Level17,>Level18,>Level19,>Level20,>Level21,>Level22,>Level23,>Level24,>Level25,>Level26,>Level27,>Level28,>Level29,>Level30,>Level31
	>5e98	65 65 66 67 68 69 69 6a 6b 6c 6d 6d 6e 6f 70 71
	>5ea8	71 72 73 74 75 76 76
5584						.send sLEVEL_TABLE

5586						.dsection sLEVEL_MAP
5587						.section sLEVEL_MAP
5588	.5eaf					fileTileMap
5589	>5eaf	c4 00 c4 00 00 00 00 00		.binary "levels/01.bin"
	>5eb7	00 08 08 08 08 08 00 00 00 00 00 00 00 00 00 00
	>5ec7	00 01 01 01 01 01 00 00 00 00 00 00 08 08 08 08
	>5ed7	08 09 00 00 00 09 08 08 00 00 00 00 01 01 01 01
	>5ee7	01 01 00 00 00 01 01 01 00 00 00 00 07 07 07 01
	>5ef7	00 00 00 00 00 00 00 01 08 08 00 00 07 07 07 01
	>5f07	00 00 00 00 00 00 00 01 01 01 00 00 08 08 08 03
	>5f17	00 0a 00 00 00 00 00 02 07 02 09 12 14 14 14 01
	>5f27	01 01 00 00 00 01 01 01 14 01 01 01 06 06 06 06
	>5f37	06 01 00 00 00 01 00 00 00 00 00 01 00 00 00 00
	>5f47	00 01 01 00 01 01 00 00 00 00 00 01 00 00 00 00
	>5f57	00 00 00 00 00 00 00 00 10 00 00 11 01 01 01 01
	>5f67	01 01 01 01 01 01 01 01 01 01 01 01 04 a7 30 47
	>5f77	20 8a 03 6a 01
5590	>5f7c	c4 00 c4 00 00 00 00 00		Level02 .binary "levels/02.bin"
	>5f84	00 00 08 08 08 08 00 00 00 00 00 00 00 00 00 00
	>5f94	00 08 08 08 08 08 08 00 00 00 00 00 12 00 09 00
	>5fa4	00 08 08 08 08 08 08 00 00 09 00 00 01 01 01 00
	>5fb4	00 08 08 08 08 08 08 00 00 01 01 11 00 00 00 00
	>5fc4	00 08 08 08 08 08 08 00 00 00 00 00 00 00 00 00
	>5fd4	00 08 08 08 08 08 08 00 00 00 00 00 00 00 00 09
	>5fe4	00 00 08 08 08 08 00 00 09 00 00 00 01 01 01 01
	>5ff4	00 00 00 01 01 00 00 00 01 01 01 01 00 00 00 00
	>6004	00 00 00 08 08 00 00 00 00 00 00 00 00 00 00 00
	>6014	00 00 00 08 08 00 00 00 00 00 00 00 00 00 00 00
	>6024	09 00 00 08 08 00 00 09 00 00 00 00 00 01 01 01
	>6034	01 00 00 08 08 00 00 01 01 01 01 00 04 2f 10 60
	>6044	10 a2 03 ad 03
5591	>6049	c4 00 c4 00 00 00 00 00		Level03 .binary "levels/03.bin"
	>6051	00 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00
	>6061	00 00 00 00 00 00 00 00 00 00 00 07 08 00 00 00
	>6071	00 00 00 00 00 00 00 00 00 00 00 07 01 00 01 01
	>6081	01 00 09 00 00 09 00 01 01 01 14 14 00 00 01 00
	>6091	00 00 00 00 00 00 00 00 00 01 08 08 00 01 01 00
	>60a1	00 00 00 00 00 00 00 00 00 01 00 00 00 00 01 00
	>60b1	00 00 00 00 00 00 00 00 00 06 00 00 00 00 01 00
	>60c1	00 00 00 00 00 00 00 00 00 06 00 00 00 00 01 00
	>60d1	00 00 00 00 00 00 00 00 00 06 00 00 00 00 01 00
	>60e1	00 00 00 00 00 00 00 00 00 06 00 00 07 12 01 00
	>60f1	00 00 00 00 00 00 00 00 0f 06 06 06 13 01 01 01
	>6101	01 01 13 01 01 13 01 01 01 01 01 11 03 94 10 9b
	>6111	12 23 20
5592	>6114	c4 00 c4 00 09 00 00 00		Level04 .binary "levels/04.bin"
	>611c	00 00 00 00 00 00 00 00 00 00 00 09 00 00 00 00
	>612c	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08
	>613c	08 08 00 00 00 00 08 08 08 00 12 00 00 01 01 01
	>614c	01 01 00 00 00 00 01 01 01 01 01 00 09 00 00 00
	>615c	00 00 00 00 00 00 00 00 00 00 00 09 01 00 00 00
	>616c	00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 07
	>617c	00 00 00 00 00 00 00 00 07 00 00 00 02 02 01 01
	>618c	00 00 00 00 00 00 00 00 01 01 02 02 00 00 00 01
	>619c	01 14 01 07 07 01 14 01 01 00 00 00 11 00 00 00
	>61ac	03 00 06 00 00 06 00 03 00 00 00 11 01 00 0a 00
	>61bc	03 00 0b 00 00 0b 00 03 00 0a 00 01 01 01 01 01
	>61cc	01 01 01 01 01 01 01 01 01 01 01 01 05 67 22 1b
	>61dc	22 14 20 81 03 8e 03
5593	>61e3	c4 00 c4 00 00 00 00 00		Level05 .binary "levels/04boss01.bin"
	>61eb	00 00 00 00 00 00 00 00 00 00 00 00 09 00 10 00
	>61fb	00 00 00 09 09 00 00 00 00 10 00 09 01 01 01 00
	>620b	00 00 00 01 01 00 00 00 00 01 01 01 00 00 00 00
	>621b	00 00 00 00 00 00 00 00 00 00 00 00 09 00 0d 00
	>622b	00 00 00 09 09 00 00 00 00 0e 00 09 01 01 01 00
	>623b	00 00 00 01 01 00 00 00 00 01 01 01 00 00 00 00
	>624b	00 00 00 00 00 00 00 00 00 00 00 00 09 00 10 00
	>625b	00 00 00 09 09 00 00 00 00 10 00 09 01 01 01 00
	>626b	00 00 00 01 01 00 00 00 00 01 01 01 00 00 00 00
	>627b	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>628b	00 00 00 09 09 00 00 00 00 00 00 11 01 01 01 01
	>629b	00 00 01 01 01 01 00 00 01 01 01 01 01 67 82
5594	>62aa	c4 00 c4 00 00 00 00 00		Level06 .binary "levels/05.bin"
	>62b2	00 00 00 00 00 00 00 00 00 00 08 08 00 00 00 00
	>62c2	00 00 00 00 00 00 00 00 00 00 08 08 12 09 00 00
	>62d2	00 00 00 00 00 00 00 00 00 09 08 08 01 01 00 00
	>62e2	00 01 07 07 07 01 00 00 00 01 01 01 00 00 00 09
	>62f2	00 00 00 00 00 00 00 09 00 00 00 00 0f 00 00 01
	>6302	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00
	>6312	00 09 00 00 00 09 00 00 00 00 00 00 00 00 00 00
	>6322	00 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00
	>6332	00 00 00 09 00 00 00 00 00 00 00 00 14 14 14 01
	>6342	00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01
	>6352	00 00 00 00 00 00 00 00 00 00 00 11 06 06 06 01
	>6362	01 01 01 01 01 01 01 01 01 01 01 01 06 22 20 4c
	>6372	20 6b 20 8a 23 71 02 ad 40
5595	>637b	c4 00 c4 00 00 00 00 00		Level07 .binary "levels/06.bin"
	>6383	00 09 00 00 00 00 0a 00 00 00 00 00 00 00 00 00
	>6393	00 00 00 00 00 00 00 00 00 00 00 00 12 00 00 00
	>63a3	00 08 08 08 08 08 08 00 00 00 00 00 01 02 02 02
	>63b3	02 01 01 01 01 01 01 03 03 03 03 01 00 00 00 00
	>63c3	00 00 00 00 00 00 00 00 00 00 00 00 0b 01 00 00
	>63d3	00 00 0b 00 00 0b 00 00 00 00 01 0b 00 00 00 00
	>63e3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
	>63f3	00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
	>6403	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
	>6413	00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
	>6423	00 00 08 08 08 08 00 00 00 00 00 00 00 01 01 01
	>6433	01 01 01 01 01 01 01 01 01 01 11 00 07 b0 61 bf
	>6443	62 2d 22 87 20 4b 73 75 01 7a 03
5596	>644e	c4 00 c4 00 09 00 00 09		Level08 .binary "levels/07.bin"
	>6456	00 00 09 00 00 09 00 00 09 00 00 09 00 00 00 00
	>6466	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>6476	00 00 00 00 00 00 00 00 00 00 00 12 00 00 00 00
	>6486	00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00
	>6496	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>64a6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>64b6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>64c6	00 00 00 00 00 00 00 00 00 00 00 00 00 06 06 00
	>64d6	06 06 00 06 06 00 06 06 00 06 06 00 00 00 00 00
	>64e6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>64f6	00 00 00 00 00 00 00 00 00 00 11 00 13 01 01 13
	>6506	01 01 13 01 01 13 01 01 13 01 01 01 02 a0 22 3e
	>6516	20
5597	>6517	c4 00 c4 00 06 00 00 00		Level09 .binary "levels/08.bin"
	>651f	00 06 00 00 00 00 06 00 00 00 00 09 00 00 00 00
	>652f	00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00
	>653f	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
	>654f	01 01 01 01 01 01 01 01 01 00 00 00 09 00 00 00
	>655f	08 00 00 00 00 00 00 01 00 00 00 00 01 00 00 00
	>656f	01 00 00 00 00 00 00 01 00 00 00 00 00 00 00 12
	>657f	01 11 00 00 00 00 00 00 00 00 00 00 00 00 00 01
	>658f	01 01 01 14 14 01 01 01 01 00 00 00 09 00 00 00
	>659f	00 00 00 00 00 00 07 01 00 00 00 09 01 00 00 00
	>65af	00 00 00 00 00 00 00 01 00 00 00 01 08 00 00 00
	>65bf	00 00 00 00 00 00 0f 01 00 00 00 00 01 01 01 01
	>65cf	01 01 01 14 14 01 01 01 06 06 06 06 06 a3 03 a6
	>65df	03 a9 03 5f 02 2f 22 4a 22
5598	>65e8	c4 00 c4 00 00 00 00 00		Level10 .binary "levels/08boss02.bin"
	>65f0	09 00 06 06 06 06 00 09 00 00 00 00 09 0d 10 00
	>6600	00 00 00 00 00 00 00 00 00 10 0e 09 01 01 01 00
	>6610	00 00 00 00 00 00 00 00 00 01 01 01 06 06 00 00
	>6620	00 00 00 00 00 00 00 00 00 00 06 06 00 00 00 09
	>6630	00 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00
	>6640	00 01 14 14 14 14 01 00 00 00 00 00 00 00 00 00
	>6650	00 00 06 06 06 06 00 00 00 00 00 00 09 10 10 00
	>6660	00 00 00 00 00 00 00 00 00 10 10 09 01 01 01 00
	>6670	00 00 00 00 00 00 00 00 00 01 01 01 00 00 00 00
	>6680	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>6690	00 00 00 00 00 00 00 00 00 0f 00 11 01 01 01 00
	>66a0	01 01 01 00 00 01 01 01 00 01 01 01 01 87 90
5599	>66af	c4 00 c4 00 12 00 00 00		Level11 .binary "levels/09.bin"
	>66b7	00 00 00 00 00 00 00 00 00 00 00 00 11 00 00 00
	>66c7	00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
	>66d7	01 01 01 00 00 01 01 01 01 01 01 01 09 00 00 00
	>66e7	00 00 06 00 00 06 00 00 00 00 00 0f 00 00 00 00
	>66f7	00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00
	>6707	00 00 07 00 00 07 00 00 00 00 00 00 00 00 01 00
	>6717	00 00 07 00 00 07 00 00 00 01 00 00 00 00 00 00
	>6727	00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
	>6737	01 01 01 08 08 01 01 01 01 01 00 00 00 00 00 00
	>6747	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00
	>6757	00 00 00 00 00 00 00 00 00 00 00 09 01 01 01 01
	>6767	00 01 01 06 06 01 01 00 01 01 01 01 05 1f 30 a1
	>6777	40 97 20 52 20 6e 03
5600	>677e	c4 00 c4 00 00 11 00 00		Level12 .binary "levels/10.bin"
	>6786	00 00 00 00 00 00 00 00 00 00 12 00 00 01 00 00
	>6796	00 00 09 00 00 09 00 00 00 00 01 00 00 00 00 00
	>67a6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
	>67b6	00 00 08 08 08 08 00 00 00 01 00 00 00 00 00 00
	>67c6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
	>67d6	00 00 01 00 00 01 00 00 01 00 00 00 00 00 00 00
	>67e6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
	>67f6	00 00 08 00 00 08 00 00 00 01 00 00 00 00 00 00
	>6806	00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
	>6816	00 00 07 07 07 07 00 00 00 00 01 00 09 00 00 00
	>6826	00 00 00 00 00 00 00 00 00 00 00 09 01 01 01 01
	>6836	01 01 01 06 06 01 01 01 01 01 01 01 05 2e 20 6e
	>6846	22 41 20 81 22 7c 40
5601	>684d	c4 00 c4 00 00 00 00 00		Level13 .binary "levels/11.bin"
	>6855	00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 08
	>6865	00 00 01 00 00 09 00 00 01 00 00 07 00 00 00 00
	>6875	00 00 00 00 00 00 00 00 00 00 00 00 08 00 00 01
	>6885	00 00 09 00 00 01 00 00 06 00 00 01 12 00 00 00
	>6895	00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 09
	>68a5	00 00 01 00 00 0a 00 00 01 00 00 0b 00 00 00 00
	>68b5	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 01
	>68c5	00 00 0a 00 00 01 00 00 0b 00 00 01 00 00 00 00
	>68d5	00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 06
	>68e5	00 00 01 00 00 0b 00 00 01 00 00 08 00 00 00 00
	>68f5	00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 01
	>6905	00 00 0b 00 00 01 00 00 08 00 00 11 06 09 22 49
	>6915	22 89 22 a6 20 66 20 26 20
5602	>691e	c4 00 c4 00 00 00 00 00		Level14 .binary "levels/12.bin"
	>6926	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00
	>6936	00 00 00 00 00 00 00 00 00 00 00 09 01 01 01 00
	>6946	00 00 01 01 01 01 00 00 00 01 01 01 00 00 00 00
	>6956	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>6966	0a 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 01
	>6976	01 01 00 00 00 00 01 01 01 00 00 00 00 00 00 00
	>6986	00 00 00 00 00 00 00 00 00 00 00 12 0b 00 00 00
	>6996	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 00
	>69a6	00 00 06 06 06 06 00 00 00 01 01 01 00 00 00 00
	>69b6	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>69c6	0c 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 01
	>69d6	01 01 00 00 00 00 01 01 01 00 00 00 07 b6 61 b9
	>69e6	61 94 03 9b 02 1d 30 12 32 58 40
5603	>69f1	c4 00 c4 00 00 00 00 00		Level15 .binary "levels/12boss03.bin"
	>69f9	06 00 06 00 00 06 00 06 00 00 00 00 09 0d 10 00
	>6a09	00 00 00 00 00 00 00 00 00 10 0e 09 01 01 01 00
	>6a19	00 00 00 00 00 00 00 00 00 01 01 01 00 00 00 00
	>6a29	09 00 00 00 00 00 00 09 00 00 00 00 00 00 00 00
	>6a39	01 00 00 09 09 00 00 01 00 00 00 00 00 00 00 00
	>6a49	00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
	>6a59	09 00 00 00 00 00 00 09 00 00 00 00 09 10 10 00
	>6a69	01 00 00 00 00 00 00 01 00 10 10 09 01 01 01 00
	>6a79	00 00 06 00 00 06 00 00 00 01 01 01 00 00 00 00
	>6a89	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>6a99	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 01
	>6aa9	01 00 01 01 01 01 00 01 01 01 01 01 02 87 80 27
	>6ab9	82
5604	>6aba	c4 00 c4 00 09 00 00 00		Level16 .binary "levels/13.bin"
	>6ac2	00 00 00 00 01 01 01 06 06 06 00 06 01 00 00 00
	>6ad2	00 00 00 00 01 07 01 00 00 00 00 0a 00 00 00 00
	>6ae2	00 00 00 00 02 07 02 00 00 00 00 00 00 00 14 00
	>6af2	00 00 00 00 02 07 02 00 00 00 0a 00 00 00 00 00
	>6b02	00 00 00 00 01 07 01 00 00 00 00 00 01 00 00 00
	>6b12	01 01 01 00 01 01 01 00 00 0a 00 06 09 08 08 08
	>6b22	01 00 00 00 00 00 01 00 00 00 00 00 01 01 01 00
	>6b32	01 00 00 00 00 00 01 00 0a 00 00 00 07 07 01 00
	>6b42	01 00 00 14 00 00 01 00 00 00 00 00 00 00 01 00
	>6b52	01 00 00 00 00 00 01 0a 00 00 00 00 12 00 00 00
	>6b62	11 00 00 00 00 00 00 08 08 08 08 00 01 01 01 13
	>6b72	01 01 01 06 01 01 01 13 13 13 13 00 05 24 22 42
	>6b82	20 86 01 88 03 1d 32
5605	>6b89	c4 00 c4 00 00 00 06 00		Level17 .binary "levels/14.bin"
	>6b91	00 00 06 00 00 00 06 00 00 00 00 00 09 00 00 00
	>6ba1	07 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00
	>6bb1	00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00
	>6bc1	01 00 00 00 01 00 00 00 01 01 00 00 00 00 00 00
	>6bd1	00 00 00 00 00 00 00 00 00 06 12 00 01 01 06 01
	>6be1	01 01 06 01 01 01 06 01 00 01 01 01 00 00 00 00
	>6bf1	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00
	>6c01	09 00 00 00 09 00 00 00 09 11 00 00 00 00 00 00
	>6c11	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>6c21	00 00 00 00 00 00 00 00 00 00 00 00 14 14 14 14
	>6c31	14 14 14 14 14 14 14 14 14 01 00 0f 06 06 06 06
	>6c41	06 06 06 06 06 06 06 06 06 01 00 01 06 21 20 41
	>6c51	20 72 03 76 03 7a 03 6d 22
5606	>6c5a	c4 00 c4 00 01 06 06 06		Level18 .binary "levels/15.bin"
	>6c62	01 01 01 00 01 01 01 01 01 01 01 00 01 09 00 00
	>6c72	08 00 08 00 00 00 00 00 00 0a 01 00 01 00 00 00
	>6c82	08 00 08 00 00 00 00 00 00 00 01 00 01 00 00 00
	>6c92	08 00 08 00 00 00 00 00 00 00 01 00 01 00 00 00
	>6ca2	08 12 08 00 00 00 00 00 00 00 01 00 01 08 01 01
	>6cb2	01 01 01 01 01 08 01 01 01 01 01 00 01 08 01 00
	>6cc2	00 00 00 00 06 00 06 11 00 00 00 00 01 08 01 00
	>6cd2	00 00 00 00 06 00 06 00 00 00 00 00 01 08 01 00
	>6ce2	00 00 00 00 06 00 06 00 00 00 00 00 01 08 01 08
	>6cf2	01 01 01 0a 01 00 06 01 01 01 01 01 01 08 08 08
	>6d02	01 0f 03 00 01 00 06 06 06 06 06 06 01 01 01 01
	>6d12	01 00 01 01 01 00 00 00 00 00 00 00 06 2a 10 22
	>6d22	20 76 03 74 01 7c 03 7e 01
5607	>6d2b	c4 00 c4 00 09 00 09 00		Level19 .binary "levels/16.bin"
	>6d33	09 00 00 07 07 00 00 09 00 09 00 09 00 00 00 00
	>6d43	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>6d53	00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 06
	>6d63	00 06 00 00 00 00 06 00 06 00 06 00 00 00 00 00
	>6d73	00 00 00 00 00 00 00 00 00 00 00 00 13 00 13 00
	>6d83	13 00 00 00 00 00 00 13 00 13 00 13 01 00 01 00
	>6d93	01 00 00 00 00 00 00 01 00 01 00 01 08 00 00 00
	>6da3	00 00 00 00 00 00 00 00 00 00 00 08 08 00 00 00
	>6db3	00 00 00 00 00 00 00 00 00 00 00 08 08 00 00 00
	>6dc3	00 00 00 00 00 00 12 00 00 00 00 08 09 00 00 00
	>6dd3	00 00 13 00 00 13 11 00 00 00 00 09 01 01 01 00
	>6de3	01 01 01 08 08 01 01 01 01 01 01 01 05 9d 71 92
	>6df3	71 a4 01 ae 42 42 20
5608	>6dfa	c4 00 c4 00 00 00 00 00		Level20 .binary "levels/16boss04.bin"
	>6e02	00 00 00 00 00 00 00 00 00 00 00 00 09 10 10 00
	>6e12	00 00 00 00 00 00 00 00 00 10 10 09 01 01 01 00
	>6e22	00 06 00 01 01 00 06 00 00 01 01 01 00 00 00 00
	>6e32	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>6e42	00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 00
	>6e52	06 00 00 01 01 00 00 06 00 01 01 01 00 00 00 00
	>6e62	00 00 00 00 00 00 00 00 00 00 00 00 09 10 10 00
	>6e72	00 00 00 00 00 00 00 00 00 10 10 09 01 01 01 00
	>6e82	00 06 00 01 01 00 06 00 00 01 01 01 00 00 00 00
	>6e92	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>6ea2	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 00
	>6eb2	14 14 00 01 01 00 14 14 00 01 01 01 02 67 90 07
	>6ec2	92
5609	>6ec3	c4 00 c4 00 00 00 00 00		Level21 .binary "levels/17.bin"
	>6ecb	00 0a 00 00 00 00 0a 00 00 00 00 00 00 00 00 00
	>6edb	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>6eeb	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>6efb	00 00 00 01 01 00 00 00 00 00 00 00 09 06 00 0f
	>6f0b	00 00 00 00 00 00 00 00 07 00 06 09 00 06 00 01
	>6f1b	01 00 00 00 00 00 00 01 01 00 06 00 00 06 00 00
	>6f2b	00 00 00 00 00 00 00 00 00 00 06 00 00 06 00 00
	>6f3b	01 01 00 00 00 00 01 01 00 00 06 00 00 06 00 00
	>6f4b	00 0b 00 00 00 00 0b 00 00 00 06 00 00 06 00 00
	>6f5b	00 01 01 08 08 01 01 00 00 00 06 00 00 00 00 00
	>6f6b	00 00 00 00 00 00 00 00 00 00 00 12 01 01 01 01
	>6f7b	01 01 01 01 01 01 01 01 01 01 01 11 06 63 53 6c
	>6f8b	53 a8 22 67 20 01 10 2c 42
5610	>6f94	c4 00 c4 00 09 00 00 09		Level22 .binary "levels/18.bin"
	>6f9c	00 00 09 00 00 09 00 00 09 00 00 09 00 00 00 00
	>6fac	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>6fbc	00 00 00 00 00 00 00 00 00 00 00 12 00 00 00 00
	>6fcc	00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00
	>6fdc	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>6fec	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>6ffc	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>700c	00 00 00 00 00 00 00 00 00 00 00 00 00 06 06 00
	>701c	06 06 00 06 06 00 06 06 00 06 06 00 00 00 00 00
	>702c	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>703c	00 00 00 00 00 00 00 00 00 00 11 00 13 01 01 13
	>704c	01 01 13 01 01 13 01 01 13 01 01 01 03 ad 22 4d
	>705c	22 52 20
5611	>705f	c4 00 c4 00 09 00 00 00		Level23 .binary "levels/19.bin"
	>7067	00 09 00 00 00 00 09 00 00 00 00 09 12 00 00 00
	>7077	00 00 00 00 00 00 00 00 00 00 00 00 01 00 08 08
	>7087	00 01 00 07 07 00 01 00 08 08 00 01 0a 00 00 00
	>7097	00 0a 00 00 00 00 0a 00 00 00 00 0a 00 00 00 00
	>70a7	00 00 00 00 00 00 00 00 00 00 00 00 01 00 08 08
	>70b7	00 01 00 07 07 00 01 00 08 08 00 01 0b 00 00 00
	>70c7	00 0b 00 00 00 00 0b 00 00 00 00 0b 00 00 00 00
	>70d7	00 00 00 00 00 00 00 00 00 00 00 00 11 00 08 08
	>70e7	00 01 00 07 07 00 01 00 08 08 00 01 0c 00 00 00
	>70f7	00 0c 00 00 00 00 0c 00 00 00 00 0c 00 00 00 00
	>7107	00 00 00 00 00 00 00 00 00 00 00 00 01 13 01 01
	>7117	13 01 13 01 01 13 01 13 01 01 13 01 03 4f 22 af
	>7127	22 70 20
5612	>712a	c4 00 c4 00 00 00 00 00		Level24 .binary "levels/20.bin"
	>7132	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>7142	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00
	>7152	00 01 01 01 01 01 01 01 01 01 00 00 01 01 01 14
	>7162	14 01 00 00 00 00 00 00 00 01 00 0a 00 00 00 00
	>7172	00 00 00 00 00 00 00 00 00 01 14 01 00 00 00 00
	>7182	00 00 00 00 04 04 04 00 00 00 00 01 00 00 08 08
	>7192	08 08 00 00 02 0f 03 00 00 12 00 01 00 00 01 06
	>71a2	06 01 00 00 01 01 01 00 00 01 14 01 00 00 01 00
	>71b2	00 01 00 00 00 00 00 00 00 00 00 0c 00 01 01 00
	>71c2	00 01 01 01 00 00 00 05 00 00 00 00 00 08 08 00
	>71d2	00 07 0b 11 00 00 00 05 00 00 00 00 01 01 01 01
	>71e2	01 01 01 01 01 00 01 01 01 01 06 06 07 37 53 3b
	>71f2	53 10 20 40 20 89 20 9d 70 94 03
5613	>71fd	c4 00 c4 00 00 00 00 00		Level25 .binary "levels/20boss05.bin"
	>7205	00 00 00 00 00 00 00 00 00 00 00 00 09 00 10 00
	>7215	00 09 00 00 00 00 09 00 00 10 00 09 01 00 01 00
	>7225	00 01 00 06 06 00 01 00 00 01 00 01 00 00 00 00
	>7235	00 00 00 00 00 00 00 00 00 00 00 00 10 00 09 00
	>7245	00 0d 00 00 00 00 0e 00 00 09 00 10 01 00 01 00
	>7255	00 01 00 06 06 00 01 00 00 01 00 01 00 00 00 00
	>7265	00 00 00 00 00 00 00 00 00 00 00 00 09 00 10 00
	>7275	00 09 00 00 00 00 09 00 00 10 00 09 01 00 01 00
	>7285	00 01 00 06 06 00 01 00 00 01 00 01 00 00 00 00
	>7295	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>72a5	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 00
	>72b5	00 01 00 00 00 00 01 00 00 01 01 01 03 97 80 67
	>72c5	82 37 80
5614	>72c8	c4 00 c4 00 0b 00 00 0a		Level26 .binary "levels/21.bin"
	>72d0	00 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00
	>72e0	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>72f0	00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 04
	>7300	06 06 06 02 00 00 00 03 03 03 03 00 00 00 00 00
	>7310	00 00 00 00 00 00 00 0c 00 00 00 00 14 14 14 14
	>7320	14 14 02 14 14 14 14 14 05 01 05 00 00 00 00 00
	>7330	00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
	>7340	00 00 00 00 00 00 00 00 00 01 00 00 09 00 00 00
	>7350	00 00 00 00 00 00 00 00 00 0a 00 00 14 00 00 14
	>7360	00 00 14 00 00 14 00 00 05 05 11 00 00 00 00 00
	>7370	00 00 00 00 00 00 00 00 00 00 12 00 06 06 06 06
	>7380	06 06 00 06 06 06 06 06 05 00 01 05 06 26 22 65
	>7390	22 86 20 a5 20 7f 03 46 30
5615	>7399	c4 00 c4 00 00 00 00 00		Level27 .binary "levels/22.bin"
	>73a1	00 00 00 00 00 00 00 00 00 00 00 00 00 12 00 00
	>73b1	00 00 00 00 00 00 00 00 00 00 00 0f 01 01 00 09
	>73c1	00 00 00 00 00 09 00 00 00 00 01 01 00 00 00 14
	>73d1	00 00 00 00 00 14 00 00 00 00 00 00 00 00 00 00
	>73e1	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>73f1	00 00 09 00 00 00 00 00 09 00 00 00 00 00 00 00
	>7401	00 00 14 08 08 00 00 00 14 00 00 00 00 00 00 00
	>7411	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 09
	>7421	00 00 00 00 00 09 00 00 00 00 00 00 00 00 00 14
	>7431	00 00 00 00 00 14 00 00 00 00 00 00 07 07 00 00
	>7441	00 00 00 00 00 00 00 00 00 00 00 11 01 01 06 06
	>7451	06 00 06 06 06 06 00 06 06 06 01 01 07 b5 61 ba
	>7461	61 04 53 0b 53 4f 22 70 20 1e 10
5616	>746c	c4 00 c4 00 00 00 00 00		Level28 .binary "levels/23.bin"
	>7474	00 00 00 00 00 00 00 00 00 00 00 00 12 00 00 00
	>7484	00 00 00 00 00 00 00 00 00 00 00 11 01 00 00 00
	>7494	00 00 00 00 00 00 00 00 00 00 00 01 00 09 00 00
	>74a4	00 0a 00 00 00 0b 00 00 00 0c 00 00 00 00 00 00
	>74b4	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>74c4	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>74d4	00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00
	>74e4	00 06 00 00 00 06 00 00 00 06 00 00 00 00 00 00
	>74f4	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>7504	00 00 00 00 00 00 00 00 00 00 00 00 07 06 07 00
	>7514	08 06 08 00 08 06 08 00 07 06 07 07 01 01 01 13
	>7524	01 01 01 13 01 01 01 13 01 01 01 01 04 50 10 55
	>7534	13 59 11 5e 12
5617	>7539	c4 00 c4 00 00 00 00 00		Level29 .binary "levels/24.bin"
	>7541	00 00 02 03 04 05 02 03 04 05 00 11 00 12 00 00
	>7551	14 14 14 14 14 14 14 14 14 14 14 01 01 01 00 00
	>7561	06 06 06 06 06 06 06 06 06 06 06 01 01 00 00 00
	>7571	00 00 00 00 00 00 00 00 0b 00 00 01 01 00 00 14
	>7581	14 00 00 00 00 00 00 14 14 00 00 01 01 00 00 00
	>7591	00 00 00 09 00 00 00 00 00 00 00 01 01 00 00 00
	>75a1	00 00 00 14 14 00 00 00 0c 00 00 01 01 00 00 14
	>75b1	14 00 00 00 00 00 00 14 14 00 00 01 01 00 00 00
	>75c1	00 00 00 0a 00 00 00 00 00 00 00 01 01 00 00 00
	>75d1	00 00 00 14 14 00 00 00 00 00 00 01 01 00 00 00
	>75e1	00 00 00 00 00 00 00 00 00 00 00 01 01 01 13 01
	>75f1	01 01 01 01 01 01 01 01 01 01 01 01 06 04 20 45
	>7601	10 7a 10 75 10 4a 10 aa 32
5618	>760a	c4 00 c4 00 00 00 00 00		Level30 .binary "levels/24boss06.bin"
	>7612	00 00 00 00 00 00 00 00 00 00 00 00 0c 0d 10 00
	>7622	00 00 00 14 14 00 00 00 00 10 0e 0b 05 05 05 00
	>7632	00 00 00 00 00 00 00 00 00 04 04 04 00 00 00 00
	>7642	0a 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 00
	>7652	14 00 00 0c 0c 00 00 14 00 00 00 00 00 00 00 00
	>7662	00 00 00 14 14 00 00 00 00 00 00 00 00 00 00 00
	>7672	0a 00 00 00 00 00 00 0b 00 00 00 00 09 10 10 00
	>7682	14 00 00 00 00 00 00 14 00 10 10 0a 02 02 02 00
	>7692	00 00 00 00 00 00 00 00 00 03 03 03 00 00 00 00
	>76a2	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>76b2	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 01
	>76c2	00 01 01 06 06 01 01 00 01 01 01 01 03 97 90 67
	>76d2	92 27 90
5619	>76d5	c4 00 c4 00 12 00 00 00		Level31 .binary "levels/end.bin"
	>76dd	00 00 00 00 00 00 00 00 00 00 00 01 01 00 00 00
	>76ed	07 00 07 07 00 07 00 00 00 07 01 00 07 00 00 00
	>76fd	07 00 07 00 00 07 00 00 00 07 00 01 07 00 00 00
	>770d	07 00 07 07 00 07 00 00 00 07 00 00 07 00 07 00
	>771d	07 00 07 00 00 07 00 00 00 07 00 00 00 07 00 07
	>772d	00 00 07 07 00 07 07 07 00 07 07 07 00 00 00 00
	>773d	00 00 00 00 00 00 00 00 00 00 00 00 08 08 00 00
	>774d	00 08 00 00 08 00 08 00 08 08 08 00 08 00 08 00
	>775d	08 00 08 00 08 08 08 00 08 00 00 00 08 00 08 00
	>776d	08 00 08 00 08 08 08 00 08 08 00 09 08 00 08 00
	>777d	08 00 08 00 08 08 08 00 08 00 00 11 08 08 00 00
	>778d	00 08 00 00 08 00 08 00 08 08 08 01 01 1f 03
5620						.send sLEVEL_MAP
5621						* = $a000
5622						.dsection sAUDIO
5623						.section sAUDIO
5624	.a000					SID ;.binary "QWAK.sid",126
5625						; SFX
5626	.a000					SND_FLOWER	;	.binary "qwak_flower.snd"
5627	.a000					SND_DOOR		;.binary "qwak_door.snd"
5628	.a000					SND_COLLECT	;	.binary "qwak_collect.snd"
5629	.a000					SND_BUBBLE	;	.binary "qwak_bubble.snd"
5630	.a000					SND_EBUBBLE	;	.binary "enemy_bubble.snd"
5631	.a000					SND_POWER_UP;	.binary "qwak_power_up.snd"
5632	.a000					SND_JUMP		;.binary "qwak_jump.snd"
5633	.a000					SND_HURT		;.binary "qwak_hurt.snd"
5634						.send sAUDIO


;******  End of listing
