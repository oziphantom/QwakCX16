
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass.exe -o D:\GitHub\QwakCX16\qwak.prg --no-caret-diag --dump-labels -l qwak.tass -L qwak.list --verbose-list --line-numbers -Wimmediate -a --mw65c02 D:\GitHub\QwakCX16\qwak.asm
; Mon Dec 09 02:36:58 2019

;Line	;Offset	;Hex		;Monitor	;Source

:1	;******  Processing input file: D:\GitHub\QwakCX16\qwak.asm



3						;@name macro Call Function Table
4						;@param table
5						;@param index
6						;@desc does a stack return, BDD safe
7						;@parent MISC
8						; yes 65c02 has the wonderful jmp (place,x)
9						; however my code uses y a lot and wants to preserve x
10						; which makes this a lot harder to just change, I would
11						; need to change how my code works in order to allow for
12						; this optimisation to be used.
13						mCallFunctionTable .macro
19						.endm
20						;@end
21						;@name macro Make Function Table
22						;@param addresses
23						;@desc makes a lo hi table for use with mCallFunctionTable
24						;@parent MISC
25						mMakeFunctionTable .macro
28						.endm
29						;@end
30						;@name macro Make Table
31						;@param addresses
32						;@desc makes a lo hi table, of the address, not -1
33						;@parent MISC
34						mMakeTable .macro
37						.endm
38						;@end
39						;@name HiLo Word
40						;@desc makes union with a word and a lo, hi struct
41						;@parent MISC
42	.0000					HLWord .union
43	>0000					 .word ?
44						 .struct
45	>0000					 	lo .byte ?
46	>0001					 	hi .byte ?
47						 .ends
48						.endu
49						;@end

51						;----------------------------
52						; FONT encoding
53						;----------------------------
54						; {{{
55						.enc "qwak" ;define an ascii->petscii encoding
56						.cdef "@@", 128
57						.cdef "AZ", 129
58						.cdef "[[", 155
59						.cdef "Â£Â£", 156
60						.cdef "]]", 157
61						.cdef "^^", 158
62						.cdef "||", 159;->
63						.cdef "  ", 160
64						.cdef "!!", 161
65						.cdef "``", 162;"
66						.cdef "##", 163
67						.cdef "~~", 164 ;heart
68						.cdef "%%", 165
69						.cdef "&&", 166
70						.cdef "''", 167
71						.cdef "((", 168
72						.cdef "))", 169
73						.cdef "**", 170
74						.cdef "++", 171
75						.cdef ",,", 172
76						.cdef "--", 173
77						.cdef "..", 174
78						.cdef "//", 175
79						.cdef "09", 176
80						.cdef "::", 186
81						.cdef ";;", 187
82						.cdef "<<", 188
83						.cdef "==", 189
84						.cdef ">>", 190
85						.cdef "??", 191
86						; }}}
87						;----------------------------
88						; Constants Region
89						;----------------------------
90	=16					kTileXCount = 16
91	=12					kTileYCount = 12
92	=192					kLevelSizeMax = kTileXCount*kTileYCount
93	=128					kSprBase = 128
94	=1					kBulletSpriteOffset = 1
95	=2					kEntsSpriteOffset = 2
96	=1					kBulletCollisionbox = 1
97	.0000					kSprites .block
98	=208						fish = kSprBase+80
99	=200						spiderLeft = kSprBase+72
100	=202						spiderRight = kSprBase+74
101	=168						springNormal = kSprBase+40
102	=169						springCompress = kSprBase+41
103	=170						springExpand = kSprBase+42
104	=171						springFull = kSprBase+43
105	=172						springFall = kSprBase+44
106	=252						bubbles = kSprBase+124
107	=248						bulletSprite = kSprBase+120
108	=244						Q = kSprBase+116
109	=245						W = kSprBase+117
110	=246						A = kSprBase+118
111	=247						K = kSprBase+119
112	=251						splat = kSprBase+123
113						.bend
114	.0000					kSpiderValues .block
115	=2						yFallDelta = 2
116	=209						rightStartWiggle = 255-32-14 ; 32 pixels but compenstating for the sprite width
117	=225						rightStartFall = 255-16-14 ; 16 pixels
118	=46						leftStartWiggle = 32+14
119	=30						leftStartFall = 16+14
120	=32						pauseEndFallFrames = 32
121	=3						riseDelayTime = 3
122						.bend
123	.0000					kBounds .block
124	=0						screenMinX = 0
125							;screenMinY = 0
126							;screenMaxX = ( kTileXCount * 16 )
127	=192						screenMaxY = ( kTileYCount * 16 )
128						.bend
129	.0000					kTimers .block
130	=$8						dissBlocksValue = $8
131						;	jumpUpValue = $38 ; 3.5 tile
132						;	jumpUpSpringValue = $48 ; 4.5 tiles
133	=$50						floatTimer = $50
134	=10						DoorAnimeRate = 10
135	=30						spawnBubble = 30
136						.bend
137	.0000					kEntity .block
138	=$00						heli = $00
139	=$01						spring = $01
140	=$02						worm = $02
141	=$03						bat = $03
142	=$04						ghost = $04
143	=$05						spider = $05
144	=$06						fish = $06
145	=$07						circler = $07
146	=$08						bear = $08
147	=$09						octopuss = $09
148	=$0a						bearBody = $0A
149	=$0b						octopussBody = $0B
150	=$0c						bubble = $0C
151	=$0d						bossDummy = $0D
152	=25						maxEntities = 25
153	=8						maxBubbleMakers = 8
154	=2						maxNumBubblesPerMaker = 2
155						.bend
156	.0000					kBoss .block
157	=7						hitPoints = 7
158	=9						hitPointsOctopuss = 9
159	=25						deathAnimTime = 25
160	=0						normal = 0
161	=1						dead = 1
162						.bend
163	.0000					kFishLimits .block
164	=181						startTwo = 250-21-(8*6) ; 165
165	=197						maxY = 255-8-50
166						.bend
167	.0000					kPlayerParams .block
168	=254						jumpStartDelta = 255-1
169	=19						jumpDeltaAccum = 19
170	=4						jumpDeltaAccumFloat = 4
171	=4						maxFallSpeed = 4
172						.bend
173	.0000					kJumpIndexs .block
174	=0						normal = 0
175	=1						floaty = 1
176						.bend
177	.0000					kPlayerAnimsIndex .block
178	=0						standRight = 0
179	=1						standLeft = 1
180	=2						standWalkRight = 2
181	=3						standWalkLeft = 3
182	=4						jumpRight = 4
183	=5						jumpLeft = 5
184	=6						flapRight = 6
185	=7						flapLeft = 7
186	=8						dead = 8
187	=9						exit = 9
188						.bend
189	.0000					kSBC .block ; kStatusBorderChars
190	=205						M	= 205
191	=206						TL	= 203+3
192	=207						T	= 204+3
193	=209						TR	= 206+3
194	=208						L	= 205+3
195	=210						R	= 207+3
196	=250						BL	= 250
197	=251						B	= 251
198	=252						BR	= 252
199	=211						QWAKT = 208+3
200	=217						QWAKB = 214+3
201	=223						Score = 220+3
202	=229						High = 226+3
203	=232						QwakP = 232
204	=204						X = 204
205	=236						Flower = 236
206						.bend
207	.0000					mplex .block
208	=$1f						kMaxSpr = $1f
209						.bend
210	.0000					kPlayerState .block
211	=0						appear = 0
212	=1						normal = 1
213	=2						flap = 2
214	=3						jump = 3
215	=4						exit = 4
216	=5						dead = 5
217						.bend
218	.0000					kPlayerStateExit .block
219	=0						waitForAnimation = 0
220						.bend
221	.0000					kPlayerStateDeath .block
222	=0						animate = 0
223						.bend
224	.0000					kIntermission .block
225	=80						firstExit = kTileXCount*5
226	=95						secondExit = (kTileXCount*6)-1
227						.bend
228	.0000					kHideScreen .block
229	=$ef						hide = %11101111
230	=$ff						show = %11111111
231						.bend
232	.0000					VIC .block
233	.0000						Colours .block
234	=0								black = 0
235	=1								white = 1
236	=2								red = 2
237	=3								cyan = 3
238	=4								purple = 4
239	=5								green = 5
240	=6								blue = 6
241	=7								yellow = 7
242	=8								orange = 8
243	=9								brown = 9
244	=10								pink = 10
245	=11								dark_grey = 11
246	=12								med_grey = 12
247	=13								light_green = 13
248	=14								light_blue = 14
249	=15								light_grey = 15
250							.bend
251						.bend
252	.0000					kVERA .block
253	=$9f20						ADDR_Lo = $9f20
254	=$9f21						ADDR_Mid = $9f21
255	=$9f22						ADDR_Hi = $9f22
256	=$9f23						DATA_0 = $9f23
257	=$9f24						DATA_1 = $9f24
258	=$9f25						CTRL = $9f25
259	=$9f26						IEN = $9f26
260	=$9f27						ISR = $9f27
261	=$100000					inc_1 = $100000
262	=$200000					inc_2 = $200000
263	=$300000					inc_4 = $300000
264	=$400000					inc_8 = $400000
265	.0000						DisplayComposer .block
266	=$f0000							video = $f0000
267	=$f0001							hScale = $f0001
268	=$f0002							vScale = $f0002
269	=$f0003							borderColour = $f0003
270	=$f0004							hStart = $f0004
271	=$f0005							hStop = $f0005
272	=$f0006							vStart = $f0006
273	=$f0007							vStop = $f0007
274	=$f0008							vStartStop = $f0008
275	=$f0009							IRQLineL = $f0009
276	=$f000a							IRQLineH = $f000a
277							.bend
278	.0000						Layer0 .block
279	=$f2000							ctrl0 = $f2000
280	=$f2001							ctrl1 = $f2001
281							.bend
282	.0000						Layer1 .block
283	=$f3000							ctrl0 = $f3000
284	=$f3001							ctrl1 = $f3001
285							.bend
286	=$f4000						SpriteRegisters = $f4000
287	=$f5000						SpriteAttributes = $f5000
288						.bend
289						getVeraSpriteAddress32x32 .function number
290						.endf (number*512)>>5
291						getTitleScreenCharPos .function xpos,ypos
292						.endf kVRAM.titleScreen+(ypos*128)+(xpos*2)
293						getGameScreenCharPos .function xpos,ypos
294						.endf kVRAM.gameScreen+(ypos*128)+(xpos*2)

296	=[]					VeraDESTAddressLUT := []
297	={}					VeraDESTAddressLUTLookup := {}

299						appendVeraAddress .segment addr
309						.endm

311	=$ff06					GETJOY = $ff06
312	=$02bc					JOY1 = $02BC

314						.include "qwak_structs.asm"

:2	;******  Processing file: D:\GitHub\QwakCX16\qwak_structs.asm

1	.0000					sGameData .struct
2	>0000					lives 		.byte ?
3	>0001					flowers 		.byte ?
4	>0002					score 		.byte ?,?,?,?,?,?
5	>0008					high 			.byte ?,?,?,?,?,?
6	>000e					currLevel 	.byte ?
7	>000f					exitOpen 	.byte ?
8	>0010					musicMode 	.byte ?
9						.ends

11	.0000					sLevelData .struct
12	>0000					numKeys 				.byte ?
13	>0001					totalKeys 			.byte ?
14	>0002					playerIndex 		.byte ?
15	>0003					exitIndex 			.byte ?,?
16	>0005					exitFrame 			.byte ?
17	>0006					levelGraphicsSet 	.byte ?
18						.ends

20	.0000					sTimerTickDowns .struct
21	>0000					dissBlocks 					.byte ?
22	>0001					playerAnim 					.byte ?
23	>0002					doorAnim						.byte ?
24	>0003					bulletLifeTimer 			.byte ?
25	>0004					shieldFlashTimer 			.byte ?
26	>0005					shieldFlashTimerSpeedUp .byte ?
27	>0006					bubbleTimer 				.fill kEntity.maxBubbleMakers
28						.ends

30	.0000					sPlayerData .struct
31	>0000					dead 					.byte ?
32	>0001					hasShield 			.byte ?
33	>0002					canFloat 			.byte ?
34	>0003					hasSpring 			.byte ?
35	>0004					onGround 			.byte ?
36	>0005					hasJumped 			.byte ?
37	>0006					isFalling 			.byte ?
38	>0007					floatTimer 			.byte ?
39	>0008					facingRight 		.byte ?
40	>0009					yDeltaAccum 		.word ?
41	>000b					baseSprite 			.byte ?
42	>000c					frameOffset 		.byte ?
43	>000d					frameCount 			.byte ?
44	>000e					frameTimer 			.byte ?
45	>000f					movingLR 			.byte ?
46	>0010					startedJumpLR 		.byte ?
47	>0011					slowMove				.byte ?
48	>0012					currAnim 			.byte ?
49	>0013					state 				.byte ?
50	>0014					minorState 			.byte ?
51	>0015					bulletActive 		.byte ?
52	>0016					bulletUD 			.byte ?
53	>0017					bulletLR 			.byte ?
54	>0018					bulletBurst 		.byte ?
55	>0019					bulletEgg			.byte ?
56	>001a					exitAtIndex 		.byte ?
57	>001b					hitBubbleNum 		.byte ?
58	>001c					forceJump 			.byte ?
59	>001d					baseFlashTimeDelta .byte ?
60						.ends

62	.0000					sEntityData .struct
63	>0000					number			.byte ?
64	>0001					type				.fill kEntity.maxEntities
65	>001a					direction		.fill kEntity.maxEntities
66	>0033					active			.fill kEntity.maxEntities
67	>004c					movTimer			.fill kEntity.maxEntities
68	>0065					animTimer		.fill kEntity.maxEntities
69	>007e					animBase 		.fill kEntity.maxEntities
70	>0097					animFrame		.fill kEntity.maxEntities
71	>00b0					originalY		.fill kEntity.maxEntities
72	>00c9					entState			.fill kEntity.maxEntities
73	>00e2					collisionX1 	.fill kEntity.maxEntities
74	>00fb					collisionX2 	.fill kEntity.maxEntities
75	>0114					collisionY1 	.fill kEntity.maxEntities
76	>012d					collisionY2 	.fill kEntity.maxEntities
77	>0146					speed				.fill kEntity.maxEntities
78	>015f					ignoreColl		.fill kEntity.maxEntities
79	>0178					numPipes			.byte ?
80	>0179					pipeIndex 		.fill kEntity.maxBubbleMakers
81	>0181					lastPipeUsed 	.byte ?
82	>0182					pipeBubbleStart .byte ?
83						.ends

85	.0000					sCSTCCParams .struct
86	>0000					xDeltaCheck 	.byte ? ; pixels
87	>0001					yDeltaCheck 	.byte ?  ; pixels
88	>0002					xDeltaBackup 	.byte ? ; pixels
89	>0003					yDeltaBackup 	.byte ? ; pixels
90						.ends

92	.0000					sMplexZP .struct
93	>0000					lsbtod .byte ?
94						.ends

96	.0000					sMplexBuffer .struct
97	>0000					sprp  .fill mplex.kMaxSpr+1		;sprite pointer frame buffer
98	>0020					sprph	.fill mplex.kMaxSpr+1
99	>0040					xpos  .fill mplex.kMaxSpr+1		;sprite x position frame buffer
100	>0060					xmsb  .fill mplex.kMaxSpr+1		;sprite x msb frame buffer
101	>0080					ypos  .fill mplex.kMaxSpr+1		;sprite y position frame buffer
102						;yposh .fill mplex.kMaxSpr+1
103						;sprc .fill mplex.kMaxSpr+1	;sprite color frame buffer
104						.ends


:1	;******  Return to file: D:\GitHub\QwakCX16\qwak.asm


316						;----------------------------
317						; ZP Regeion
318						;----------------------------
319						*= $00
320						.dsection ZP
321						.section ZP
322	.0000					ZP_START
323	>0000					EntityDataPointer	.word ?
324	>0002					CurrentEntity		.byte ?
325	>0003					CollidedEntity		.byte ?
326	>0004					EntNum				.byte ?
327	>0005					CollisionResult	.byte ?
328	.0006					Pointer1				.dunion HLWord
43	>0006					 .word ?
44						 .struct
45	>0006					 	lo .byte ?
46	>0007					 	hi .byte ?
47						 .ends
48						.endu
329	.0008					Pointer2				.dunion HLWord
43	>0008					 .word ?
44						 .struct
45	>0008					 	lo .byte ?
46	>0009					 	hi .byte ?
47						 .ends
48						.endu
330	.000a					Pointer3				.dunion HLWord
43	>000a					 .word ?
44						 .struct
45	>000a					 	lo .byte ?
46	>000b					 	hi .byte ?
47						 .ends
48						.endu
331	.000c					Pointer4				.dunion HLWord
43	>000c					 .word ?
44						 .struct
45	>000c					 	lo .byte ?
46	>000d					 	hi .byte ?
47						 .ends
48						.endu
332	>000e					playerTempCol		.byte ?
333	>000f					ZPTemp				.byte ?
334	>0010					ZPTemp2				.byte ?
335	>0011					ZPTemp3				.byte ?
336	>0012					ZPTemp4				.byte ?
337	>0013					ZPTemp5				.byte ?
338	>0014					TempX					.byte ?
339	>0015					ActiveTileIndex	.byte ?
340	>0016					ActiveTile			.byte ?
341	>0017					TestingSprX1		.byte ?
342	>0018					TestingSprX2		.byte ?
343	>0019					TestingSprY1		.byte ?
344	>001a					TestingSprY2		.byte ?
345	>001b					GameStatePointer	.word ?

347	>001d					CollideSpriteToCheck 	.byte ?
348	>001e					CollideSpriteBoxIndex 	.byte ?
349	>001f					CollideCharTLI .byte ?
350	>0020					CollideCharTLC .byte ?
351	>0021					CollideCharTRI .byte ?
352	>0022					CollideCharTRC .byte ?
353	>0023					CollideCharBLI .byte ?
354	>0024					CollideCharBLC .byte ?
355	>0025					CollideCharBRI .byte ?
356	>0026					CollideCharBRC .byte ?
357	>0027					CollideInternalSprTLX 	.byte ?  ; these 4 MUST be in the same order as below
358	>0028					CollideInternalSprBRX 	.byte ?
359	>0029					CollideInternalSprTLY 	.byte ?
360	>002a					CollideInternalSprBRY 	.byte ?
361	>002b					CollideInternalTTLX 		.byte ?
362	>002c					CollideInternalTBRX 		.byte ?
363	>002d					CollideInternalTTLY 		.byte ?
364	>002e					CollideInternalTBRY 		.byte ?
365	>002f					DidClipX						.byte ?  ; this is if the add X with MSB function did clip the Y
366	>0030					HideScreen					.byte ?
367	.0031					ZP_END
368						.send ZP
369						.cerror * > $7F, "Too many ZP variables"



373						;----------------------------
374						; Variables
375						;----------------------------

377						* = $A000
378						.dsection VARIABLES
379						.section VARIABLES
380	=$a000					variables = *
381	>a000					joyLeft	 		.byte ?
382	>a001					joyRight 		.byte ?
383	>a002					joyUp	 			.byte ?
384	>a003					joyDown	 		.byte ?
385	>a004					joyFire	 		.byte ?
386	>a005					oldJoyLeft		.byte ?
387	>a006					oldJoyRight 	.byte ?
388	>a007					oldJoyUp			.byte ?
389	>a008					oldJoyDown		.byte ?
390	>a009					oldJoyFire		.byte ?
391	>a00a					joyUpStart  	.byte ?
392	>a00b					joyUpStop		.byte ?
393	>a00c					joyFireEvent 	.byte ?
394	.a00d					GameData 		.dstruct sGameData
2:2	>a00d					lives 		.byte ?
3	>a00e					flowers 		.byte ?
4	>a00f					score 		.byte ?,?,?,?,?,?
5	>a015					high 			.byte ?,?,?,?,?,?
6	>a01b					currLevel 	.byte ?
7	>a01c					exitOpen 	.byte ?
8	>a01d					musicMode 	.byte ?
9						.ends
395:1	.a01e					LevelData 		.dstruct sLevelData
12:2	>a01e					numKeys 				.byte ?
13	>a01f					totalKeys 			.byte ?
14	>a020					playerIndex 		.byte ?
15	>a021					exitIndex 			.byte ?,?
16	>a023					exitFrame 			.byte ?
17	>a024					levelGraphicsSet 	.byte ?
18						.ends
396:1	.a025					PlayerData 		.dstruct sPlayerData
31:2	>a025					dead 					.byte ?
32	>a026					hasShield 			.byte ?
33	>a027					canFloat 			.byte ?
34	>a028					hasSpring 			.byte ?
35	>a029					onGround 			.byte ?
36	>a02a					hasJumped 			.byte ?
37	>a02b					isFalling 			.byte ?
38	>a02c					floatTimer 			.byte ?
39	>a02d					facingRight 		.byte ?
40	>a02e					yDeltaAccum 		.word ?
41	>a030					baseSprite 			.byte ?
42	>a031					frameOffset 		.byte ?
43	>a032					frameCount 			.byte ?
44	>a033					frameTimer 			.byte ?
45	>a034					movingLR 			.byte ?
46	>a035					startedJumpLR 		.byte ?
47	>a036					slowMove				.byte ?
48	>a037					currAnim 			.byte ?
49	>a038					state 				.byte ?
50	>a039					minorState 			.byte ?
51	>a03a					bulletActive 		.byte ?
52	>a03b					bulletUD 			.byte ?
53	>a03c					bulletLR 			.byte ?
54	>a03d					bulletBurst 		.byte ?
55	>a03e					bulletEgg			.byte ?
56	>a03f					exitAtIndex 		.byte ?
57	>a040					hitBubbleNum 		.byte ?
58	>a041					forceJump 			.byte ?
59	>a042					baseFlashTimeDelta .byte ?
60						.ends
397:1	=$a043					TICK_DOWN_START = *
398	.a043					TickDowns 		.dstruct sTimerTickDowns
21:2	>a043					dissBlocks 					.byte ?
22	>a044					playerAnim 					.byte ?
23	>a045					doorAnim						.byte ?
24	>a046					bulletLifeTimer 			.byte ?
25	>a047					shieldFlashTimer 			.byte ?
26	>a048					shieldFlashTimerSpeedUp .byte ?
27	>a049					bubbleTimer 				.fill kEntity.maxBubbleMakers
28						.ends
399:1	=$a051					TICK_DOWN_END = *
400	.a051					EntityData 		.dstruct sEntityData
63:2	>a051					number			.byte ?
64	>a052					type				.fill kEntity.maxEntities
65	>a06b					direction		.fill kEntity.maxEntities
66	>a084					active			.fill kEntity.maxEntities
67	>a09d					movTimer			.fill kEntity.maxEntities
68	>a0b6					animTimer		.fill kEntity.maxEntities
69	>a0cf					animBase 		.fill kEntity.maxEntities
70	>a0e8					animFrame		.fill kEntity.maxEntities
71	>a101					originalY		.fill kEntity.maxEntities
72	>a11a					entState			.fill kEntity.maxEntities
73	>a133					collisionX1 	.fill kEntity.maxEntities
74	>a14c					collisionX2 	.fill kEntity.maxEntities
75	>a165					collisionY1 	.fill kEntity.maxEntities
76	>a17e					collisionY2 	.fill kEntity.maxEntities
77	>a197					speed				.fill kEntity.maxEntities
78	>a1b0					ignoreColl		.fill kEntity.maxEntities
79	>a1c9					numPipes			.byte ?
80	>a1ca					pipeIndex 		.fill kEntity.maxBubbleMakers
81	>a1d2					lastPipeUsed 	.byte ?
82	>a1d3					pipeBubbleStart .byte ?
83						.ends
401:1	.a1d4					PasswordTemp .block
402	>a1d4						lives .byte ?
403	>a1d5						flowers .byte ?
404	>a1d6						score .byte ?,?,?,?,?,?
405	>a1dc						high .byte ?,?,?,?,?,?
406	>a1e2						currLevel .byte ?
407						.bend ;PasswordTemp
408	>a1e3					ActivePassword 			.fill 12
409	>a1ef					PasswordEntryIndex 		.byte ?
410	>a1f0					ValidPassword 				.byte ?
411	>a1f1					PasswordInfiLives 		.byte ?
412	>a1f2					PasswordRedBullets 		.byte ?
413	>a1f3					PasswordHaveSpring 		.byte ?
414	>a1f4					PasswordLevelSkip 		.byte ?
415	.a1f5					checkSpriteToCharData 	.dstruct sCSTCCParams
86:2	>a1f5					xDeltaCheck 	.byte ? ; pixels
87	>a1f6					yDeltaCheck 	.byte ?  ; pixels
88	>a1f7					xDeltaBackup 	.byte ? ; pixels
89	>a1f8					yDeltaBackup 	.byte ? ; pixels
90						.ends
416:1	.a1f9					mplexZP 						.dstruct sMplexZP
93:2	>a1f9					lsbtod .byte ?
94						.ends
417:1	.a1fa					VARIABLES_END
418						.send VARIABLES
419						.cerror * > $A200, "Too many variables"


422						; ----- @Map Temp Store@ -----
423						* = $A200
424	>a200					tileMapTemp .fill 240

426	.a2f0					MAP_TEMP_STORE_END
427	.a2f0					mplexBuffer     .dstruct sMplexBuffer
97:2	>a2f0					sprp  .fill mplex.kMaxSpr+1		;sprite pointer frame buffer
98	>a310					sprph	.fill mplex.kMaxSpr+1
99	>a330					xpos  .fill mplex.kMaxSpr+1		;sprite x position frame buffer
100	>a350					xmsb  .fill mplex.kMaxSpr+1		;sprite x msb frame buffer
101	>a370					ypos  .fill mplex.kMaxSpr+1		;sprite y position frame buffer
102						;yposh .fill mplex.kMaxSpr+1
103						;sprc .fill mplex.kMaxSpr+1	;sprite color frame buffer
104						.ends


430:1						;---------------------------
431						; MACROS
432						;---------------------------

434						mConvertXToEntSpriteX .macro
437						.endm

439						mRestoreEntSpriteX .macro
442						.endm
443						;}}}

445						; VRAM MAP
446						; $0:0000 64x32 4K TitleScreen
447						; $0:1000 64x32 4K Game Screen
448						; $0:2000 128 empty chars to keep font aligned
449						; $0:2400 64 1 bit chars "font" 512Bytes
450						; $0:2600 256 4bit chars "game" 8K
451						; $0:4600 END
452	.a390					kVRAM .block
453	=$00000						titleScreen 	= $00000
454	=$01000						gameScreen 		= $01000
455	=$02000						font				= $02000
456	=$02400						fontDest			= $02400
457	=$02600						gameChars		= $02600
458						.bend

460						copyDataFields.values := [
461															[fileFont,kVRAM.fontDest,2],
462															[LowerFixedChars,kVRAM.gameChars+52*4*8,5], ; this is over but oh well
463															[UpperFixedChars,kVRAM.gameChars+192*4*8,8], ; 2K worth
464															[font4bpp, kVRAM.gameChars+128*4*8,8]
465	=[[$544b,$02400,2],[$46f3,11392,5],[$4bb3,15872,8],[$5656,13824,8]]
														 ]

467						.enc "screen"
468						*= $0801
469	.0801					CODE_START
470	>0801	0b 08 d5 07				.word (+), 2005 ;pointer, line number
471	>0805	9e 32 30 36 31 00			.null $9e, format("%d",start)
472	>080b	00 00				+	.word 0	 ;basic line end


475						.enc "qwak"

477						*= $080D
478						.dsection STARTUP
479						.section STARTUP
480	.080d					start
481							; we need to VLOAD the sprites
482	.080d	9c 60 9f	stz $9f60		stz $9F60 ; enable the KERNAL
483	.0810	a9 02		lda #$02		lda #2
484	.0812	a2 01		ldx #$01		ldx #1
485	.0814	a0 00		ldy #$00		ldy #0 ; custom address
486	.0816	20 ba ff	jsr $ffba		jsr $ffba ; setlfs
487	.0819	a9 0b		lda #$0b		lda #size(spriteFileName)
488	.081b	a2 4b		ldx #$4b		ldx #<spriteFileName
489	.081d	a0 56		ldy #$56		ldy #>spriteFileName
490	.081f	20 bd ff	jsr $ffbd		jsr $ffbd ; setname
491	.0822	a9 03		lda #$03		lda #3 ; VLOAD bank1
492	.0824	a2 00		ldx #$00		ldx #0
493	.0826	a0 00		ldy #$00		ldy #0 ; $0000 VRAM
494	.0828	20 d5 ff	jsr $ffd5		jsr $ffd5 ; load
495	.082b	78		sei			sei
496	.082c	9c 26 9f	stz $9f26		stz kVERA.IEN ; disable VERA IRQs
497	.082f	a9 ff		lda #$ff		lda #$ff
498	.0831	8d 27 9f	sta $9f27		sta kVERA.ISR ; ack any pending IRQS
499	.0834	20 15 26	jsr $2615		jsr copyStuff ; install the lower bank of VRAMs data

501							; init the screen modes
300						.if int(kVERA.DisplayComposer.hScale|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.0837	a2 00		ldx #$00		ldx #len(VeraDESTAddressLUT)
304	={2031617:0}					VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVERA.DisplayComposer.hScale|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001]					VeraDESTAddressLUT ..=[kVERA.DisplayComposer.hScale|kVERA.inc_1]
306						.endif
307	.0839	20 13 2b	jsr $2b13	jsr setVERAAddressPort0_X

503	.083c	a9 40		lda #$40		lda #64
504	.083e	8d 23 9f	sta $9f23		sta kVERA.DATA_0
505	.0841	8d 23 9f	sta $9f23		sta kVERA.DATA_0 ; I want 320x200 mode

507	.0844	a2 00		ldx #$00		ldx #0
508	.0846	9e 00 a0	stz $a000,x	-	stz variables,x		; clear all the variables
509	.0849	9e 00 a1	stz $a100,x		stz variables+$100,x
510	.084c	9e 00 a2	stz $a200,x		stz tileMapTemp,x	; clear the tile map and after it so collisions is 00
511	.084f	e8		inx			inx
512	.0850	d0 f4		bne $0846		bne -

514							; since the title screen lives on its own screen, we can just plot it one
515	.0852	20 28 13	jsr $1328		jsr emptyTitleScreen
516							; draw all the strings on the screen
517	.0855	a2 10		ldx #$10		ldx #16
518							;ldx #0
519	.0857	86 0f		stx $0f			stx ZPTemp
520	.0859	a6 0f		ldx $0f		-	ldx ZPTemp
521	.085b	20 48 25	jsr $2548		jsr plotStringAAtIndexX
522	.085e	c6 0f		dec $0f			dec ZPTemp
523	.0860	10 f7		bpl $0859		bpl -

525							; init the sprite values, all sprites are 32x32 no flip, pallete 0
300						.if int(kVERA.SpriteAttributes+6|kVERA.inc_8) in VeraDESTAddressLUTLookup
302						.else
303	.0862	a2 01		ldx #$01		ldx #len(VeraDESTAddressLUT)
304	={2031617:0,5197830:1}				VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVERA.SpriteAttributes+6|kVERA.inc_8):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830]				VeraDESTAddressLUT ..=[kVERA.SpriteAttributes+6|kVERA.inc_8]
306						.endif
307	.0864	20 13 2b	jsr $2b13	jsr setVERAAddressPort0_X

527	.0867	a2 7f		ldx #$7f		ldx #127 ; for all 128 sprites
528	.0869	a9 0c		lda #$0c		lda #%00001100	; set all sprites on top of all no flip
529	.086b	8d 23 9f	sta $9f23	-	sta kVERA.DATA_0
530	.086e	ca		dex			dex
531	.086f	10 fa		bpl $086b		bpl -
300						.if int(kVERA.SpriteAttributes+7|kVERA.inc_8) in VeraDESTAddressLUTLookup
302						.else
303	.0871	a2 02		ldx #$02		ldx #len(VeraDESTAddressLUT)
304	={2031617:0,5197830:1,5197831:2}		VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVERA.SpriteAttributes+7|kVERA.inc_8):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831]			VeraDESTAddressLUT ..=[kVERA.SpriteAttributes+7|kVERA.inc_8]
306						.endif
307	.0873	20 13 2b	jsr $2b13	jsr setVERAAddressPort0_X

533	.0876	a2 7f		ldx #$7f		ldx #127 ; for all 128 sprites
534	.0878	a9 a0		lda #$a0		lda #%10100000 ; set all sprites to 32x32 pall 0
535	.087a	8d 23 9f	sta $9f23	-	sta kVERA.DATA_0
536	.087d	ca		dex			dex
537	.087e	10 fa		bpl $087a		bpl -
538							; make all sprites invisible so we don't get random ones just left arround from other things
300						.if int(kVERA.SpriteAttributes+3|kVERA.inc_8) in VeraDESTAddressLUTLookup
302						.else
303	.0880	a2 03		ldx #$03		ldx #len(VeraDESTAddressLUT)
304	={2031617:0,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVERA.SpriteAttributes+3|kVERA.inc_8):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827]		VeraDESTAddressLUT ..=[kVERA.SpriteAttributes+3|kVERA.inc_8]
306						.endif
307	.0882	20 13 2b	jsr $2b13	jsr setVERAAddressPort0_X

540	.0885	a2 7f		ldx #$7f		ldx #127 ; for all 128 sprites
541	.0887	a9 02		lda #$02		lda #2 ; set xmsb off the side of the screen
542	.0889	8d 23 9f	sta $9f23	-	sta kVERA.DATA_0
543	.088c	ca		dex			dex
544	.088d	10 fa		bpl $0889		bpl -
545							; enable them
300						.if int(kVERA.SpriteRegisters|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.088f	a2 04		ldx #$04		ldx #len(VeraDESTAddressLUT)
304	={2031617:0,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVERA.SpriteRegisters|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000]
							VeraDESTAddressLUT ..=[kVERA.SpriteRegisters|kVERA.inc_1]
306						.endif
307	.0891	20 13 2b	jsr $2b13	jsr setVERAAddressPort0_X

547	.0894	a9 01		lda #$01		lda #1 ; enable sprites
548	.0896	8d 23 9f	sta $9f23		sta kVERA.DATA_0

550							; safe to enable IRQ here
551							; all future VERA modifications need to be IRQ guarded

553	.0899	20 83 25	jsr $2583		jsr setirq ; clear all interupts and put out own in
554	.089c	a9 ef		lda #$ef		lda #kHideScreen.hide
555	.089e	85 30		sta $30			sta HideScreen

557	.08a0	a9 b5		lda #$b5		lda #<titleScreenLoop
558	.08a2	85 1b		sta $1b			sta GameStatePointer
559	.08a4	a9 0b		lda #$0b		lda #>titleScreenLoop
560	.08a6	85 1c		sta $1c			sta GameStatePointer+1

562	.08a8	a9 01		lda #$01		lda #1
563	.08aa	8d 15 a0	sta $a015		sta GameData.high
564	.08ad	8d f9 a1	sta $a1f9		sta mplexZP.lsbtod
565	.08b0	a9 c0		lda #$c0		lda #$C0
566	.08b2	8d 1d a0	sta $a01d		sta GameData.musicMode

568								; main loop
569	.08b5					MAINLOOP
570	.08b5	ad f9 a1	lda $a1f9	-		lda mplexZP.lsbtod
571	.08b8	f0 fb		beq $08b5			beq -
572	.08ba	ce f9 a1	dec $a1f9			dec mplexZP.lsbtod
573	.08bd	6c 1b 00	jmp ($001b)			jmp (GameStatePointer)
574						.send STARTUP

576						;----------------------------
577						; GAME LOOP
578						;----------------------------
579						; {{{
580						.dsection GAME_LOOP
581						.section GAME_LOOP
582	.08c0					GAMELOOP
583	.08c0	20 b6 1b	jsr $1bb6			jsr updateTickdowns
584	.08c3	ae 38 a0	ldx $a038			ldx PlayerData.state
14	.08c6	bd d5 08	lda $08d5,x		lda PlayerCodeLUT.hi,x
15	.08c9	48		pha			pha
16	.08ca	bd cf 08	lda $08cf,x		lda PlayerCodeLUT.lo,x
17	.08cd	48		pha			pha
18	.08ce	60		rts			rts
586	.08cf					PlayerCodeLUT
26	>08cf	da 07 07 07 e3 1f		lo .byte <(PlayerAppear,PlayerNormal,PlayerNormal,PlayerNormal,PlayerExit,PlayerDead)-1
27	>08d5	08 09 09 09 09 0a		hi .byte >(PlayerAppear,PlayerNormal,PlayerNormal,PlayerNormal,PlayerExit,PlayerDead)-1

588	.08db					PlayerAppear
589	.08db	20 40 13	jsr $1340			jsr convertLevelToTileMap
590	.08de	20 1c 14	jsr $141c			jsr addShadowsToMap
591	.08e1	a2 00		ldx #$00			ldx # <tileMapTemp
592	.08e3	a0 a2		ldy #$a2			ldy # >tileMapTemp
593	.08e5	20 0a 15	jsr $150a			jsr plotTileMap
594	.08e8	20 b2 1b	jsr $1bb2			jsr resetPlayerData
595	.08eb	20 93 1b	jsr $1b93			jsr setPlayerToSpawnPoint
596	.08ee	20 c4 1b	jsr $1bc4			jsr unpackEntityBytes
597	.08f1	20 e6 1c	jsr $1ce6			jsr setEntitySprites
598								; jsr pltLevel
599	.08f4	a9 01		lda #$01			lda #1
600	.08f6	8d f9 a1	sta $a1f9			sta mplexZP.lsbtod
601							;	lda #kPlayerState.normal ; == 1
602							.cerror kPlayerState.normal != 1, "need to add lda back"
603	.08f9	8d 38 a0	sta $a038			sta PlayerData.state
604	.08fc	20 2a 10	jsr $102a			jsr changePlayerAnimForCurrentDir
605	.08ff	9c 1c a0	stz $a01c			stz GameData.exitOpen
606	.0902	a9 ff		lda #$ff			lda #kHideScreen.show
607	.0904	85 30		sta $30				sta HideScreen
608	.0906	80 ad		bra $08b5			gra MAINLOOP

610	.0908					PlayerNormal
611	.0908	20 7e 1d	jsr $1d7e			jsr BuildEntCollisionTable
612	.090b	20 6b 24	jsr $246b			jsr collidePlayerAgainstRest
613	.090e	86 03		stx $03				stx CollidedEntity
614	.0910	ad 40 a0	lda $a040			lda PlayerData.hitBubbleNum
615	.0913	85 10		sta $10				sta ZPTemp2
616	.0915	a9 00		lda #$00			lda #0
617	.0917	8d 40 a0	sta $a040			sta PlayerData.hitBubbleNum
618	.091a	2a		rol a				rol a ; pull is carry set
619	.091b	85 0f		sta $0f				sta ZPTemp
620	.091d	f0 4c		beq $096b			beq _noSpriteCollision
621	.091f	a6 03		ldx $03					ldx CollidedEntity
622	.0921	bd 52 a0	lda $a052,x				lda EntityData.type,x
623	.0924	20 9a 12	jsr $129a				jsr isTypeBossBounceDetect
624	.0927	b0 2a		bcs $0953				bcs _bossBounce
625	.0929	20 8a 12	jsr $128a					jsr isTypeBoss
626	.092c	b0 34		bcs $0962					bcs _checkBossDeath
627	.092e	ec d3 a1	cpx $a1d3						cpx EntityData.pipeBubbleStart
628	.0931	90 36		bcc $0969						bcc _normalEnt
629												; so it was a bubble
630	.0933	ad 29 a0	lda $a029							lda PlayerData.onGround
631	.0936	0d 2b a0	ora $a02b							ora PlayerData.isFalling ; don't collide if I'm jumping up
632	.0939	f0 14		beq $094f							beq _skipDeath
633	.093b	a6 03		ldx $03									ldx CollidedEntity
634	.093d	bd 72 a3	lda $a372,x								lda mplexBuffer.ypos+kEntsSpriteOffset,x
635	.0940	cd 70 a3	cmp $a370								cmp mplexBuffer.ypos
636	.0943	90 0a		bcc $094f								bcc _skipDeath
637	.0945	8e 40 a0	stx $a040									stx PlayerData.hitBubbleNum
638	.0948	c5 10		cmp $10										cmp ZPTemp2
639	.094a	f0 03		beq $094f									beq _skipDeath
640	.094c	20 0d 10	jsr $100d										jsr enterOnGround
641	.094f											_skipDeath
642	.094f	a9 00		lda #$00									lda #0
643	.0951	80 18		bra $096b									bra _noSpriteCollision
644	.0953						_bossBounce
645	.0953	ad 26 a0	lda $a026			lda PlayerData.hasShield
646	.0956	f0 11		beq $0969			beq _normalEnt
647	.0958	a6 03		ldx $03					ldx CollidedEntity
648	.095a	20 a6 12	jsr $12a6				jsr hurtBoss
649	.095d	ee 41 a0	inc $a041				inc PlayerData.forceJump
650	.0960	80 29		bra $098b				gra _skipDeathCheck
651	.0962						_checkBossDeath
652	.0962	bd 1a a1	lda $a11a,x			lda EntityData.entState,x
653	.0965	c9 01		cmp #$01			cmp #kBoss.dead
654	.0967	f0 22		beq $098b			beq _skipDeathCheck
655	.0969					_normalEnt
656	.0969	a5 0f		lda $0f				lda ZPTemp
657	.096b					_noSpriteCollision
658	.096b	0d 25 a0	ora $a025			ora PlayerData.dead
659	.096e	f0 1b		beq $098b			beq _skipDeathCheck
660	.0970	ad 26 a0	lda $a026				lda PlayerData.hasShield
661	.0973	d0 16		bne $098b				bne _skipDeathCheck
662	.0975	ad f1 a1	lda $a1f1					lda PasswordInfiLives
663	.0978	d0 06		bne $0980					bne +
664	.097a	ce 0d a0	dec $a00d						dec GameData.lives
665	.097d	20 67 1b	jsr $1b67						jsr pltLives
666	.0980	a9 05		lda #$05			+		lda #kPlayerState.dead
667	.0982	8d 38 a0	sta $a038					sta PlayerData.state
668	.0985	8d 39 a0	sta $a039					sta PlayerData.minorState
669	.0988	4c b5 08	jmp $08b5					jmp MAINLOOP
670	.098b					_skipDeathCheck
671	.098b	9c 25 a0	stz $a025			stz PlayerData.dead
672	.098e	20 ba 0e	jsr $0eba			jsr joyToPlayerDelta
673	.0991	20 e2 16	jsr $16e2			jsr checkSpriteToCharCollision
674								; level skip
675	.0994	ad f4 a1	lda $a1f4			lda PasswordLevelSkip
676	.0997	f0 15		beq $09ae			beq _noKey
677	.0999	20 9f ff	jsr $ff9f				jsr $FF9F ; SCAN KEY
678	.099c	20 e4 ff	jsr $ffe4				jsr $ffe4
679	.099f	c9 5a		cmp #$5a				cmp #90 ; Z key, we can't detect C=/CX key with gettin
680	.09a1	d0 0b		bne $09ae				bne _noKey
681	.09a3	a9 04		lda #$04				lda #kPlayerState.exit
682	.09a5	8d 38 a0	sta $a038				sta PlayerData.state
683	.09a8	8d 39 a0	sta $a039				sta PlayerData.minorState
684	.09ab	4c b5 08	jmp $08b5				jmp MAINLOOP
685	.09ae					_noKey
686	.09ae	ad f5 a1	lda $a1f5			lda checkSpriteToCharData.xDeltaCheck
687	.09b1	f0 05		beq $09b8			beq _addY
688								;make sure x reg is 0, and call addXWithMSBAndClip
689	.09b3	a2 00		ldx #$00			ldx #0
690	.09b5	20 8a 0e	jsr $0e8a			jsr addXWithMSBAndClip
691	.09b8					_addY
692	.09b8	ad 70 a3	lda $a370			lda mplexBuffer.ypos
693	.09bb	18		clc				clc
694	.09bc	6d f6 a1	adc $a1f6			adc checkSpriteToCharData.yDeltaCheck
695	.09bf	8d 70 a3	sta $a370			sta mplexBuffer.ypos
696	.09c2	20 b6 10	jsr $10b6			jsr updatePlayerAnim
697	.09c5	ad 26 a0	lda $a026			lda PlayerData.hasShield
698	.09c8	f0 18		beq $09e2			beq _noShield
699	.09ca	ad 47 a0	lda $a047				lda TickDowns.shieldFlashTimer
700	.09cd	d0 13		bne $09e2				bne _noShield
701										;lda mplexBuffer.sprc ; this would flash the colour, but too much effort for this example
702										;eor #7^14
703										;sta mplexBuffer.sprc
704	.09cf	ad 48 a0	lda $a048					lda TickDowns.shieldFlashTimerSpeedUp
705	.09d2	d0 08		bne $09dc					bne +
706	.09d4	a9 23		lda #$23						lda #35
707	.09d6	8d 48 a0	sta $a048						sta TickDowns.shieldFlashTimerSpeedUp
708	.09d9	ce 42 a0	dec $a042						dec PlayerData.baseFlashTimeDelta
709	.09dc	ad 42 a0	lda $a042				+	lda PlayerData.baseFlashTimeDelta
710	.09df	8d 47 a0	sta $a047					sta TickDowns.shieldFlashTimer
711	.09e2					_noShield
712	.09e2	80 78		bra $0a5c			gra EndOfGameLoop

714	.09e4					PlayerExit
715	.09e4	ad 39 a0	lda $a039			lda PlayerData.minorState
716	.09e7	c9 04		cmp #$04			cmp #kPlayerState.exit
717	.09e9	d0 13		bne $09fe			bne _waitForAnimation
718									; we have to set up the exit animation
719	.09eb	a9 09		lda #$09				lda #kPlayerAnimsIndex.exit
720	.09ed	20 6a 10	jsr $106a				jsr setPlayerAnimeTo
721									;lda #kPlayerStateExit.waitForAnimation
722									.cerror kPlayerStateExit.waitForAnimation != 0, "need to change stz"
723	.09f0	9c 39 a0	stz $a039				stz PlayerData.minorState
724	.09f3	ad 3f a0	lda $a03f				lda PlayerData.exitAtIndex
725	.09f6	20 96 1b	jsr $1b96				jsr setPlayerToIndexA
726	.09f9	20 49 19	jsr $1949				jsr clearSheildState
727	.09fc	80 5e		bra $0a5c	_exit	gra EndOfGameLoop
728	.09fe					_waitForAnimation
729	.09fe	20 b6 10	jsr $10b6			jsr updatePlayerAnim
730	.0a01	90 f9		bcc $09fc			bcc _exit
731	.0a03	a9 79		lda #$79				lda #<INTERLOOP			; move on to the interlude
732	.0a05	85 1b		sta $1b					sta GameStatePointer
733	.0a07	a9 0a		lda #$0a				lda #>INTERLOOP
734	.0a09	85 1c		sta $1c					sta GameStatePointer+1
735	.0a0b	9c 38 a0	stz $a038				stz PlayerData.state
736	.0a0e	20 05 13	jsr $1305				jsr disableAllEntSprites
737	.0a11	4c b5 08	jmp $08b5				jmp MAINLOOP

739	.0a14					incLevelGraphicSet
740	.0a14	ad 24 a0	lda $a024			lda LevelData.levelGraphicsSet
741	.0a17	18		clc				clc
742	.0a18	69 01		adc #$01			adc #1
743	.0a1a	29 03		and #$03			and #3
744	.0a1c	8d 24 a0	sta $a024			sta LevelData.levelGraphicsSet
745	.0a1f	60		rts				rts

747	.0a20					PlayerDead
748	.0a20	ad 39 a0	lda $a039			lda PlayerData.minorState
749	.0a23	c9 05		cmp #$05			cmp #kPlayerState.dead
750	.0a25	d0 12		bne $0a39			bne _waitForAnimation
751	.0a27	a2 07		ldx #$07				ldx #kSFX.hurt
752	.0a29	20 e7 19	jsr $19e7				jsr playSFX
753									; we have to set up the exit animation
754	.0a2c	a9 08		lda #$08				lda #kPlayerAnimsIndex.dead
755	.0a2e	20 6a 10	jsr $106a				jsr setPlayerAnimeTo
756									;lda #kPlayerStateDeath.animate
757									.cerror kPlayerStateDeath.animate  != 0, "need to change stz"
758	.0a31	9c 39 a0	stz $a039				stz PlayerData.minorState
759	.0a34	20 0d 11	jsr $110d				jsr removePickups
760	.0a37	80 23		bra $0a5c	_exit	gra EndOfGameLoop
761	.0a39					_waitForAnimation
762	.0a39	ce 70 a3	dec $a370			dec mplexBuffer.ypos
763	.0a3c	20 b6 10	jsr $10b6			jsr updatePlayerAnim
764	.0a3f	90 f6		bcc $0a37			bcc _exit
765	.0a41	ad 0d a0	lda $a00d				lda GameData.lives
766	.0a44	f0 08		beq $0a4e				beq _gameOver
767										.cerror kPlayerState.appear != 0, "remove stz"
768										;lda #kPlayerState.appear
769	.0a46	9c 38 a0	stz $a038					stz PlayerData.state
770										;lda #0 ; appear = 0
771	.0a49	9c 25 a0	stz $a025					stz PlayerData.dead
772	.0a4c	80 0e		bra $0a5c					bra EndOfGameLoop
773	.0a4e					_gameOver
774	.0a4e	9c 38 a0	stz $a038			stz PlayerData.state
775	.0a51	a9 4a		lda #$4a			lda #<gameOverLoop
776	.0a53	85 1b		sta $1b				sta GameStatePointer
777	.0a55	a9 0b		lda #$0b			lda #>gameOverLoop
778	.0a57	85 1c		sta $1c				sta GameStatePointer+1
779	.0a59	4c b5 08	jmp $08b5			jmp MAINLOOP

781	.0a5c					EndOfGameLoop
782	.0a5c	ad 0c a0	lda $a00c			lda joyFireEvent              ; if    1 1 0 0
783	.0a5f	4d 3a a0	eor $a03a			eor PlayerData.bulletActive   ; and   0 1 0 1
784	.0a62	2d 0c a0	and $a00c			and joyFireEvent			  		; still 1 0 0 0
785	.0a65	f0 03		beq $0a6a			beq _noBulletStart
786	.0a67	20 1e 11	jsr $111e				jsr startBullet
787	.0a6a					_noBulletStart
788	.0a6a	20 5e 11	jsr $115e			jsr updateBullet
789	.0a6d	20 99 1d	jsr $1d99			jsr updateEntities
790	.0a70	20 f7 22	jsr $22f7			jsr updateBubbles
791	.0a73	20 8c 19	jsr $198c			jsr animateDoor
792	.0a76	4c b5 08	jmp $08b5			jmp MAINLOOP
793						.send GAME_LOOP
794						; }}}
795						;----------------------------
796						; Intermission LOOP
797						;----------------------------
798						; {{{
799						.dsection INTERMISSION
800						.section INTERMISSION
801	.0a79					INTERLOOP
802	.0a79	20 b6 1b	jsr $1bb6		jsr updateTickdowns
803	.0a7c	ae 38 a0	ldx $a038		ldx PlayerData.state
14	.0a7f	bd 8c 0a	lda $0a8c,x		lda InterFuncLUT.hi,x
15	.0a82	48		pha			pha
16	.0a83	bd 88 0a	lda $0a88,x		lda InterFuncLUT.lo,x
17	.0a86	48		pha			pha
18	.0a87	60		rts			rts
805	.0a88					InterFuncLUT
26	>0a88	8f e8 19 46			lo .byte <(interSetUp,interMovePlayer,interEnterDoor,interNextLevel)-1
27	>0a8c	0a 0a 0b 0b			hi .byte >(interSetUp,interMovePlayer,interEnterDoor,interNextLevel)-1

807	.0a90					interSetUp
808	.0a90	20 52 26	jsr $2652		jsr PlotTransitionScreenAndMakeNextChars ; also set player index,exit index
809	.0a93	20 93 1b	jsr $1b93		jsr setPlayerToSpawnPoint
810	.0a96	ee 38 a0	inc $a038		inc PlayerData.state
811	.0a99	a9 01		lda #$01		lda #1
812	.0a9b	8d 34 a0	sta $a034		sta PlayerData.movingLR
813	.0a9e	8d 29 a0	sta $a029		sta PlayerData.onGround
814	.0aa1	8d f5 a1	sta $a1f5		sta checkSpriteToCharData.xDeltaCheck
815	.0aa4	8d 1c a0	sta $a01c		sta GameData.exitOpen
816	.0aa7	a9 ff		lda #$ff		lda #$FF
817	.0aa9	8d 22 a0	sta $a022		sta LevelData.exitIndex+1
818	.0aac	1a		inc a			inc a
819	.0aad	20 27 10	jsr $1027		jsr changePlayerDir
820	.0ab0	20 d2 19	jsr $19d2		jsr setAnimateDoorToClose
821	.0ab3	ad 1b a0	lda $a01b		lda GameData.currLevel
822	.0ab6	18		clc			clc
823	.0ab7	69 01		adc #$01		adc #1
824	.0ab9	c9 1f		cmp #$1f		cmp #31
825	.0abb	d0 02		bne $0abf		bne +
826	.0abd	a9 00		lda #$00		lda #0
827	.0abf	8d 1b a0	sta $a01b	+ 	sta GameData.currLevel
828	.0ac2	20 75 1d	jsr $1d75		jsr deactivateAllEntities
829	.0ac5	20 0d 11	jsr $110d		jsr removePickups
830	.0ac8	20 48 28	jsr $2848		jsr loadPasswordTemp
831	.0acb	20 8b 28	jsr $288b		jsr makePassword
832	.0ace	78		sei			sei
300						.if int(getGameScreenCharPos(10,4) | kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.0acf	a2 05		ldx #$05		ldx #len(VeraDESTAddressLUT)
304	={1053204:5,2031617:0,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(getGameScreenCharPos(10,4) | kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204]
							VeraDESTAddressLUT ..=[getGameScreenCharPos(10,4) | kVERA.inc_1]
306						.endif
307	.0ad1	20 13 2b	jsr $2b13	jsr setVERAAddressPort0_X

834	.0ad4	a2 0b		ldx #$0b			ldx #11
835	.0ad6	bd e3 a1	lda $a1e3,x		-	lda ActivePassword,x
836	.0ad9	20 2f 2a	jsr $2a2f			jsr convertToPasswordLetter
837	.0adc	8d 23 9f	sta $9f23			sta kVERA.DATA_0
838	.0adf	9c 23 9f	stz $9f23			stz kVERA.DATA_0 ; CRAM is 0
839	.0ae2	ca		dex				dex
840	.0ae3	10 f1		bpl $0ad6			bpl -
841	.0ae5	58		cli			cli
842	.0ae6	4c b5 08	jmp $08b5		jmp MAINLOOP

844	.0ae9					interMovePlayer
845	.0ae9	a2 00		ldx #$00		ldx #0
846	.0aeb	20 8a 0e	jsr $0e8a		jsr addXWithMSBAndClip
847	.0aee	20 b6 10	jsr $10b6		jsr updatePlayerAnim
848	.0af1	20 8c 19	jsr $198c		jsr animateDoor
849	.0af4	ad 30 a3	lda $a330		lda mplexBuffer.xpos
850	.0af7	c9 ee		cmp #$ee		cmp #256-18
851	.0af9	90 0b		bcc $0b06		bcc +
852	.0afb	ee 38 a0	inc $a038			inc PlayerData.state
853	.0afe	a9 09		lda #$09			lda #kPlayerAnimsIndex.exit
854	.0b00	20 6a 10	jsr $106a			jsr setPlayerAnimeTo
855	.0b03	4c b5 08	jmp $08b5			jmp MAINLOOP
856	.0b06	c9 b0		cmp #$b0	+	cmp #(11*16)
857	.0b08	d0 0d		bne $0b17		bne +
858	.0b0a	20 bd 19	jsr $19bd			jsr setAnimateDoorToOpen
859	.0b0d	a9 5f		lda #$5f			lda #kIntermission.secondExit
860	.0b0f	8d 21 a0	sta $a021			sta LevelData.exitIndex
861	.0b12	a9 01		lda #$01			lda #kSFX.door
862	.0b14	20 e7 19	jsr $19e7			jsr playSFX
863	.0b17	4c b5 08	jmp $08b5	+	jmp MAINLOOP

865	.0b1a					interEnterDoor
866	.0b1a	20 b6 10	jsr $10b6		jsr updatePlayerAnim
867	.0b1d	90 25		bcc $0b44		bcc _exit
868	.0b1f	ad 1b a0	lda $a01b		lda GameData.currLevel
869	.0b22	a2 05		ldx #$05		ldx #size(BossLevels)-1
870	.0b24	dd d5 2c	cmp $2cd5,x	-	cmp BossLevels,x
871	.0b27	f0 09		beq $0b32		beq _bossLevel
872	.0b29	ca		dex			dex
873	.0b2a	10 f8		bpl $0b24		bpl -
874	.0b2c	29 01		and #$01		and #1
875	.0b2e	18		clc			clc
876	.0b2f	69 01		adc #$01		adc #1
877	>0b31	2c					.byte $2c ; BIT XXXXX
878	.0b32					_bossLevel
879	.0b32	a9 03		lda #$03		lda #3
880	.0b34	20 f6 19	jsr $19f6		jsr playMusic
881	.0b37	a9 00		lda #$00		lda #kPlayerState.appear
882	.0b39	8d 38 a0	sta $a038		sta PlayerData.state
883	.0b3c	a9 c0		lda #$c0		lda #<GAMELOOP
884	.0b3e	85 1b		sta $1b			sta GameStatePointer
885	.0b40	a9 08		lda #$08		lda #>GAMELOOP
886	.0b42	85 1c		sta $1c			sta GameStatePointer+1
887	.0b44					_exit
888	.0b44	4c b5 08	jmp $08b5		jmp MAINLOOP

890	.0b47					interNextLevel
891	.0b47	4c b5 08	jmp $08b5		jmp MAINLOOP
892						.send INTERMISSION
893						;}}}
894						;----------------------------
895						; GAME OVER LOOP
896						;----------------------------
897						; {{{
898						.dsection GAME_OVER
899						.section GAME_OVER
900	.0b4a					gameOverLoop
901	.0b4a	ae 38 a0	ldx $a038		ldx PlayerData.state
14	.0b4d	bd 58 0b	lda $0b58,x		lda GameOverFuncLUT.hi,x
15	.0b50	48		pha			pha
16	.0b51	bd 56 0b	lda $0b56,x		lda GameOverFuncLUT.lo,x
17	.0b54	48		pha			pha
18	.0b55	60		rts			rts
903	.0b56					GameOverFuncLUT
26	>0b56	59 99				lo .byte <(GOSetup,GOWaitForFire)-1
27	>0b58	0b 0b				hi .byte >(GOSetup,GOWaitForFire)-1

905	.0b5a					GoSetup
906							; print string
907	.0b5a	a2 11		ldx #$11		ldx #17
908	.0b5c	20 43 25	jsr $2543		jsr plotStringAAtIndexXGameScreen
909	.0b5f	ee 38 a0	inc $a038		inc PlayerData.state
910							; remove sprites
911	.0b62	20 05 13	jsr $1305		jsr disableAllEntSprites
912	.0b65	a9 04		lda #$04		lda #4
913	.0b67	20 f6 19	jsr $19f6		jsr playMusic
914							; check to see if this is the new high score
915	.0b6a	a2 00		ldx #$00		ldx #0
916	.0b6c	bd 0f a0	lda $a00f,x	_l	lda GameData.score,x
917	.0b6f	dd 15 a0	cmp $a015,x		cmp GameData.high,x
918	.0b72	f0 04		beq $0b78		beq _next
919	.0b74	b0 14		bcs $0b8a		bcs _higher
920	.0b76	80 05		bra $0b7d		bra _clearScore
921	.0b78					_next
922	.0b78	e8		inx			inx
923	.0b79	e0 06		cpx #$06		cpx #size(sGameData.score)
924	.0b7b	d0 ef		bne $0b6c		bne _l
925							; go to GOSetup
926	.0b7d					_clearScore
927	.0b7d	a2 05		ldx #$05		ldx #size(sGameData.score) -1
928	.0b7f	a9 00		lda #$00		lda #0
929	.0b81	9d 0f a0	sta $a00f,x	_l3	sta GameData.score,x
930	.0b84	ca		dex			dex
931	.0b85	10 fa		bpl $0b81		bpl _l3
932	.0b87	4c b5 08	jmp $08b5		jmp MAINLOOP
933	.0b8a					_higher
934	.0b8a	a2 05		ldx #$05		ldx #size(sGameData.score) -1
935	.0b8c	bd 0f a0	lda $a00f,x	_l2	lda GameData.score,x
936	.0b8f	9d 15 a0	sta $a015,x		sta GameData.high,x
937	.0b92	ca		dex			dex
938	.0b93	10 f7		bpl $0b8c		bpl _l2
939	.0b95	20 4d 1b	jsr $1b4d		jsr pltHighScore
940	.0b98	80 e3		bra $0b7d		gra _clearScore

942	.0b9a					GOWaitForFire
943							;wait for fire
944	.0b9a	20 c3 15	jsr $15c3		jsr scanJoystick
945	.0b9d	ad 04 a0	lda $a004		lda joyFire
946	.0ba0	f0 10		beq $0bb2		beq _exit
947								; got to Title Screen State
948	.0ba2	a9 00		lda #$00			lda #kPlayerState.appear
949	.0ba4	8d 38 a0	sta $a038			sta PlayerData.state
950	.0ba7	a9 b5		lda #$b5			lda #<titleScreenLoop
951	.0ba9	85 1b		sta $1b				sta GameStatePointer
952	.0bab	a9 0b		lda #$0b			lda #>titleScreenLoop
953	.0bad	85 1c		sta $1c				sta GameStatePointer+1
954	.0baf	20 10 13	jsr $1310			jsr clearAllEntities
955	.0bb2					_exit
956	.0bb2	4c b5 08	jmp $08b5		jmp MAINLOOP
957						.send GAME_OVER
958						; }}}
959						;----------------------------
960						; Title Screen Loop
961						;----------------------------
962						; {{{
963	.0bb5					titleScreenLoop
964	.0bb5	ae 38 a0	ldx $a038		ldx PlayerData.state
14	.0bb8	bd c4 0b	lda $0bc4,x		lda TitleScreenLoopFuncLUT.hi,x
15	.0bbb	48		pha			pha
16	.0bbc	bd c1 0b	lda $0bc1,x		lda TitleScreenLoopFuncLUT.lo,x
17	.0bbf	48		pha			pha
18	.0bc0	60		rts			rts
966	.0bc1					TitleScreenLoopFuncLUT
26	>0bc1	c6 48 de			lo .byte <(TSSetup,TSWaitForFire,TSStartGame)-1
27	>0bc4	0b 0c 0d			hi .byte >(TSSetup,TSWaitForFire,TSStartGame)-1

968	.0bc7					TSSetup
969	.0bc7	20 f5 12	jsr $12f5		jsr clearAllSprites
970	.0bca	9c ef a1	stz $a1ef		stz PasswordEntryIndex
971	.0bcd	9c 24 a0	stz $a024		stz LevelData.levelGraphicsSet

973						; set up tilescreen mode
974	.0bd0	78		sei			sei
300						.if int(kVERA.Layer0.ctrl0|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.0bd1	a2 06		ldx #$06		ldx #len(VeraDESTAddressLUT)
304	={1053204:5,2031617:0,2039808:6,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVERA.Layer0.ctrl0|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000]
							VeraDESTAddressLUT ..=[kVERA.Layer0.ctrl0|kVERA.inc_1]
306						.endif
307	.0bd3	20 13 2b	jsr $2b13	jsr setVERAAddressPort0_X

976	.0bd6	a9 01		lda #$01			lda #%00000001 ; mode 0 enabled
977	.0bd8	8d 23 9f	sta $9f23			sta kVERA.DATA_0
978								;lda #%00000001 ; 8x8 64x32
979	.0bdb	8d 23 9f	sta $9f23			sta kVERA.DATA_0
980	.0bde	a9 00		lda #$00			lda #<(kVRAM.titleScreen>>2)
981	.0be0	8d 23 9f	sta $9f23			sta kVERA.DATA_0
982	.0be3	a9 00		lda #$00			lda #>(kVRAM.titleScreen>>2) ; set map to tilescreen
983	.0be5	8d 23 9f	sta $9f23			sta kVERA.DATA_0
984	.0be8	a9 00		lda #$00			lda #<(kVRAM.font>>2) ; set charset to font
985	.0bea	8d 23 9f	sta $9f23			sta kVERA.DATA_0
986	.0bed	a9 08		lda #$08			lda #>(kVRAM.font>>2)
987	.0bef	8d 23 9f	sta $9f23			sta kVERA.DATA_0
988	.0bf2	9c 23 9f	stz $9f23			stz kVERA.DATA_0 ; make sure H and V scroll are 0 while we are here
989	.0bf5	9c 23 9f	stz $9f23			stz kVERA.DATA_0
990	.0bf8	9c 23 9f	stz $9f23			stz kVERA.DATA_0
991	.0bfb	9c 23 9f	stz $9f23			stz kVERA.DATA_0
300						.if int(kVERA.Layer1.ctrl0|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.0bfe	a2 07		ldx #$07		ldx #len(VeraDESTAddressLUT)
304	={1053204:5,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVERA.Layer1.ctrl0|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000]
							VeraDESTAddressLUT ..=[kVERA.Layer1.ctrl0|kVERA.inc_1]
306						.endif
307	.0c00	20 13 2b	jsr $2b13	jsr setVERAAddressPort0_X

993	.0c03	9c 23 9f	stz $9f23			stz kVERA.DATA_0 ; disable layer 1
994	.0c06	58		cli			cli

996	.0c07	a2 03		ldx #$03		ldx #len(TitleScreenData.SpriteStruct.sprites)-1
997	.0c09	bd 29 2b	lda $2b29,x	-	lda TitleScreenData.SpriteStruct.ptr.lo,x
998	.0c0c	9d f0 a2	sta $a2f0,x		sta mplexBuffer.sprp,x
999	.0c0f	bd 2d 2b	lda $2b2d,x		lda TitleScreenData.SpriteStruct.ptr.hi,x
1000	.0c12	9d 10 a3	sta $a310,x		sta mplexBuffer.sprph,x
1001	.0c15	bd 31 2b	lda $2b31,x		lda TitleScreenData.SpriteStruct.x.lo,x
1002	.0c18	9d 30 a3	sta $a330,x		sta mplexBuffer.xpos,x
1003	.0c1b	bd 35 2b	lda $2b35,x		lda TitleScreenData.SpriteStruct.x.hi,x
1004	.0c1e	9d 50 a3	sta $a350,x		sta mplexBuffer.xmsb,x
1005	.0c21	bd 39 2b	lda $2b39,x		lda TitleScreenData.SpriteStruct.y,x
1006	.0c24	9d 70 a3	sta $a370,x		sta mplexBuffer.ypos,x
1007	.0c27	ca		dex			dex
1008	.0c28	10 df		bpl $0c09		bpl -

1010							; set up the defaults here, in case a password modifies them
1011	.0c2a	20 04 11	jsr $1104		jsr clearPlayerStuct
1012	.0c2d	a9 05		lda #$05		lda #5
1013	.0c2f	8d 0d a0	sta $a00d		sta GameData.lives
1014	.0c32	9c 1b a0	stz $a01b		stz GameData.currLevel
1015	.0c35	9c 0e a0	stz $a00e		stz GameData.flowers

1017	.0c38	ee 38 a0	inc $a038		inc PlayerData.state
1018	.0c3b	a9 00		lda #$00		lda #0
1019	.0c3d	85 10		sta $10			sta ZPTemp2
1020	.0c3f	20 f6 19	jsr $19f6		jsr playMusic
1021	.0c42	a9 ff		lda #$ff		lda #kHideScreen.show
1022	.0c44	85 30		sta $30			sta HideScreen
1023	.0c46	4c b5 08	jmp $08b5		jmp MAINLOOP

1025	.0c49					TSWaitForFire
1026	.0c49	20 c3 15	jsr $15c3		jsr scanJoystick
1027	.0c4c	78		sei			sei
1028	.0c4d	20 b6 1b	jsr $1bb6		jsr updateTickdowns
1029	.0c50	ad 44 a0	lda $a044		lda TickDowns.playerAnim
1030	.0c53	d0 42		bne $0c97		bne _checkJoy
1031	.0c55	a6 10		ldx $10				ldx ZPTemp2
1032	.0c57	ad 1d a0	lda $a01d			lda GameData.musicMode
1033	.0c5a	18		clc				clc
1034	.0c5b	2a		rol a				rol a
1035	.0c5c	2a		rol a				rol a
1036	.0c5d	2a		rol a				rol a ; get upper 2 bits wrapped arround to the lower 2 bits
1037	.0c5e	a8		tay				tay
1038	.0c5f	b9 8d 2b	lda $2b8d,y			lda TitleScreenData.menuOffsetsEnd,y
1039	.0c62	85 0f		sta $0f				sta ZPTemp
1040	.0c64	9c 25 9f	stz $9f25			stz kVERA.CTRL
1041	.0c67	a9 20		lda #$20			lda #`kVRAM.titleScreen|kVERA.inc_2 ; skip char data
1042	.0c69	8d 22 9f	sta $9f22			sta kVERA.ADDR_Hi
1043	=2817					CRAMLinePos = getTitleScreenCharPos(0,22)+1 ; get the 11 line
1044	.0c6c	b9 89 2b	lda $2b89,y			lda TitleScreenData.menuOffsetsStart,y
1045	.0c6f	a8		tay				tay
1046	.0c70	18		clc				clc
1047	.0c71	69 01		adc #$01			adc #<CRAMLinePos
1048	.0c73	8d 20 9f	sta $9f20			sta kVERA.ADDR_Lo
1049	.0c76	a9 0b		lda #$0b			lda #>CRAMLinePos
1050	.0c78	69 00		adc #$00			adc #0
1051	.0c7a	8d 21 9f	sta $9f21			sta kVERA.ADDR_Mid
1052	.0c7d	bd 85 2b	lda $2b85,x		-	lda TitleScreenData.spriteCol,x
1053	.0c80	8d 23 9f	sta $9f23			sta kVERA.DATA_0
1054						;	pha
1055						;	lda PasswordInfiLives ; if cheats are enabled the text QWAK sprites flashed
1056						;	beq +
1057						;	pla
1058						;	sta mplexBuffer.sprc  ; to much effor for this demo
1059						;	pha
1060						;+	lda PasswordRedBullets
1061						;	beq +
1062						;	pla
1063						;	sta mplexBuffer.sprc+1
1064						;	pha
1065						;+ 	lda PasswordHaveSpring
1066						;	beq +
1067						;	pla
1068						;	sta mplexBuffer.sprc+2
1069						;	pha
1070						;+	lda PasswordLevelSkip
1071						;	beq +
1072						;	pla
1073						;	sta mplexBuffer.sprc+3
1074						;	pha
1075						;+	pla
1076	.0c83	8a		txa				txa
1077	.0c84	18		clc				clc
1078	.0c85	69 01		adc #$01			adc #1
1079	.0c87	29 03		and #$03			and #3
1080	.0c89	aa		tax				tax
1081	.0c8a	c8		iny				iny
1082	.0c8b	c8		iny				iny
1083	.0c8c	c4 0f		cpy $0f				cpy ZPTemp
1084	.0c8e	d0 ed		bne $0c7d			bne -
1085	.0c90	86 10		stx $10				stx ZPTemp2
1086	.0c92	a9 04		lda #$04			lda #4
1087	.0c94	8d 44 a0	sta $a044			sta TickDowns.playerAnim
1088	.0c97					_checkJoy
1089	.0c97	ad 45 a0	lda $a045		lda TickDowns.doorAnim
1090	.0c9a	d0 47		bne $0ce3		bne _noScroll
1091	.0c9c	a9 08		lda #$08			lda #8
1092	.0c9e	8d 45 a0	sta $a045			sta TickDowns.doorAnim
1093	.0ca1	ad 01 a0	lda $a001			lda joyRight
1094	.0ca4	f0 30		beq $0cd6			beq _notLeft
1095	.0ca6	ad 1d a0	lda $a01d				lda GameData.musicMode
1096	.0ca9	38		sec					sec
1097	.0caa	e9 40		sbc #$40				sbc #64
1098	.0cac							_saveNoMode
1099	.0cac	29 c0		and #$c0				and #128+64
1100	.0cae	8d 1d a0	sta $a01d				sta GameData.musicMode
1101	.0cb1	a9 01		lda #$01				lda #<CRAMLinePos
1102	.0cb3	8d 20 9f	sta $9f20				sta kVERA.ADDR_Lo
1103	.0cb6	a9 0b		lda #$0b				lda #>CRAMLinePos
1104	.0cb8	8d 21 9f	sta $9f21				sta kVERA.ADDR_Mid
1105	.0cbb	a9 20		lda #$20				lda #`kVRAM.titleScreen|kVERA.inc_2 ; skip char data
1106	.0cbd	8d 22 9f	sta $9f22				sta kVERA.ADDR_Hi
1107	.0cc0	a9 01		lda #$01				lda #1
1108	.0cc2	a0 26		ldy #$26				ldy #38
1109	.0cc4	8d 23 9f	sta $9f23			-	sta kVERA.DATA_0
1110	.0cc7	88		dey					dey
1111	.0cc8	10 fa		bpl $0cc4				bpl -
1112	.0cca	2c 1d a0	bit $a01d				bit GameData.musicMode
1113	.0ccd	10 03		bpl $0cd2				bpl _startMusic
1114	.0ccf	a9 00		lda #$00					lda #0
1115	>0cd1	2c								.byte $2c
1116	.0cd2							_startMusic
1117	.0cd2	a9 05		lda #$05				lda #5
1118								;	jsr SID
1119	.0cd4	80 0d		bra $0ce3				bra _noScroll
1120	.0cd6						_notLeft
1121	.0cd6	ad 00 a0	lda $a000			lda joyLeft
1122	.0cd9	f0 08		beq $0ce3			beq _noScroll
1123	.0cdb	ad 1d a0	lda $a01d				lda GameData.musicMode
1124	.0cde	18		clc					clc
1125	.0cdf	69 40		adc #$40				adc #64
1126	.0ce1	80 c9		bra $0cac				gra _saveNoMode
1127	.0ce3					_noScroll
1128	.0ce3	ad 04 a0	lda $a004		lda joyFire
1129	.0ce6	f0 0c		beq $0cf4		beq _exit
1130	.0ce8	ad 09 a0	lda $a009			lda oldJoyFire
1131	.0ceb	d0 07		bne $0cf4			bne _exit
1132	.0ced	ee 38 a0	inc $a038				inc PlayerData.state
1133	.0cf0	a9 ef		lda #$ef				lda #kHideScreen.hide
1134	.0cf2	85 30		sta $30					sta HideScreen
1135	.0cf4					_exit
1136	.0cf4	58		cli			cli
1137	.0cf5	20 9f ff	jsr $ff9f		jsr $FF9F ; SCAN KEY
1138	.0cf8	20 e4 ff	jsr $ffe4		jsr $FFE4 ; GETIN
1139	.0cfb	f0 38		beq $0d35		beq _noKey
1140	.0cfd	c9 20		cmp #$20			cmp #32
1141	.0cff	f0 38		beq $0d39			beq _clear
1142	.0d01	20 9f 2a	jsr $2a9f				jsr convertASCIIToQwakChar
1143	.0d04	ac ef a1	ldy $a1ef				ldy PasswordEntryIndex
1144	.0d07	99 d3 0d	sta $0dd3,y				sta PasswordRAMCache,y
1145	.0d0a	aa		tax					tax
1146	.0d0b	c0 0c		cpy #$0c				cpy #12
1147	.0d0d	f0 26		beq $0d35				beq _noKey
1148	=2588							PasswordBaseScreenPos = getTitleScreenCharPos(TitleScreenData.PasswordBlank[1],TitleScreenData.PasswordBlank[2])
1149	.0d0f	98		tya				tya
1150	.0d10	0a		asl a				asl a ; convert to 2 wide for screen
1151	.0d11	18		clc				clc
1152	.0d12	69 1c		adc #$1c			adc #<PasswordBaseScreenPos
1153	.0d14	78		sei				sei
1154	.0d15	9c 25 9f	stz $9f25				stz kVERA.CTRL
1155	.0d18	8d 20 9f	sta $9f20				sta kVERA.ADDR_Lo
1156	.0d1b	a9 0a		lda #$0a				lda #>PasswordBaseScreenPos
1157	.0d1d	69 00		adc #$00				adc #0
1158	.0d1f	8d 21 9f	sta $9f21				sta kVERA.ADDR_Mid
1159	.0d22	a9 00		lda #$00				lda #`PasswordBaseScreenPos
1160	.0d24	8d 22 9f	sta $9f22				sta kVERA.ADDR_Hi
1161	.0d27	8e 23 9f	stx $9f23				stx kVERA.DATA_0
1162	.0d2a	58		cli				cli
1163	.0d2b	ee ef a1	inc $a1ef			inc PasswordEntryIndex
1164	.0d2e	ad ef a1	lda $a1ef			lda PasswordEntryIndex
1165	.0d31	c9 0c		cmp #$0c			cmp #12
1166	.0d33	f0 11		beq $0d46			beq _checkPassword
1167	.0d35					_noKey
1168	.0d35	58		cli			cli
1169	.0d36	4c b5 08	jmp $08b5		jmp MAINLOOP
1170	.0d39					_clear
1171	.0d39	a2 10		ldx #$10		ldx #16
1172	.0d3b	20 48 25	jsr $2548		jsr plotStringAAtIndexX
1173	.0d3e	9c ef a1	stz $a1ef		stz PasswordEntryIndex
1174	.0d41	9c f0 a1	stz $a1f0		stz ValidPassword
1175	.0d44	80 ef		bra $0d35		gra _noKey
1176	.0d46					_checkPassword
1177	.0d46	bd d3 0d	lda $0dd3,x		lda PasswordRAMCache,x
1178	.0d49	48		pha			pha
1179	.0d4a	20 69 2a	jsr $2a69			jsr convertLetterToNumber
1180	.0d4d	9d e3 a1	sta $a1e3,x			sta ActivePassword,x
1181	.0d50	68		pla			pla
1182	.0d51	20 b2 2a	jsr $2ab2		jsr isValidLetter
1183	.0d54	90 2e		bcc $0d84		bcc _fail
1184	.0d56	ca		dex				dex
1185	.0d57	10 ed		bpl $0d46			bpl _checkPassword
1186									; pass
1187	.0d59	20 2d 29	jsr $292d				jsr extractPassword
1188	.0d5c	20 72 28	jsr $2872				jsr validateExtractedPassword
1189	.0d5f	b0 23		bcs $0d84				bcs _fail
1190	.0d61	20 5c 28	jsr $285c					jsr unloadPasswordTemp
1191	.0d64	a9 0d		lda #$0d					lda #VIC.Colours.light_green
1192	.0d66									_plotColourExit
1193	.0d66	78		sei						sei
1194	.0d67	9c 25 9f	stz $9f25						stz kVERA.CTRL
1195	.0d6a	a2 1d		ldx #$1d						ldx #<PasswordBaseScreenPos+1
1196	.0d6c	8e 20 9f	stx $9f20						stx kVERA.ADDR_Lo
1197	.0d6f	a2 0a		ldx #$0a						ldx #>PasswordBaseScreenPos
1198	.0d71	8e 21 9f	stx $9f21						stx kVERA.ADDR_Mid
1199	.0d74	a2 20		ldx #$20						ldx #`PasswordBaseScreenPos | kVERA.inc_2
1200	.0d76	8e 22 9f	stx $9f22						stx kVERA.ADDR_Hi
1201	.0d79	a2 0b		ldx #$0b						ldx #11
1202	.0d7b									-
1203	.0d7b	8d 23 9f	sta $9f23						sta kVERA.DATA_0
1204	.0d7e	ca		dex							dex
1205	.0d7f	10 fa		bpl $0d7b						bpl  -
1206	.0d81	58		cli						cli
1207	.0d82	80 b1		bra $0d35					bra _noKey
1208	.0d84					_fail
1209	.0d84	a0 00		ldy #$00		ldy #0
1210	.0d86	20 c0 0d	jsr $0dc0		jsr checkPasswordForCheat
1211	.0d89	b0 19		bcs $0da4		bcs _lives
1212	.0d8b	a0 0c		ldy #$0c			ldy #12
1213	.0d8d	20 c0 0d	jsr $0dc0			jsr checkPasswordForCheat
1214	.0d90	b0 19		bcs $0dab			bcs _red
1215	.0d92	a0 18		ldy #$18				ldy #24
1216	.0d94	20 c0 0d	jsr $0dc0				jsr checkPasswordForCheat
1217	.0d97	b0 19		bcs $0db2				bcs _spring
1218	.0d99	a0 24		ldy #$24					ldy #36
1219	.0d9b	20 c0 0d	jsr $0dc0					jsr checkPasswordForCheat
1220	.0d9e	b0 19		bcs $0db9					bcs _levelSkip
1221	.0da0					_setTextRed
1222	.0da0	a9 02		lda #$02		lda #VIC.Colours.red
1223	.0da2	80 c2		bra $0d66		bra _plotColourExit
1224	.0da4					_lives
1225	.0da4	a9 01		lda #$01		lda #1
1226	.0da6	8d f1 a1	sta $a1f1		sta PasswordInfiLives
1227	.0da9	80 f5		bra $0da0		bra _setTextRed
1228	.0dab					_red
1229	.0dab	a9 01		lda #$01		lda #1
1230	.0dad	8d f2 a1	sta $a1f2		sta PasswordRedBullets
1231	.0db0	80 ee		bra $0da0		bra _setTextRed
1232	.0db2					_spring
1233	.0db2	a9 01		lda #$01		lda #1
1234	.0db4	8d f3 a1	sta $a1f3		sta PasswordHaveSpring
1235	.0db7	80 e7		bra $0da0		bra _setTextRed
1236	.0db9					_levelSkip
1237	.0db9	a9 01		lda #$01		lda #1
1238	.0dbb	8d f4 a1	sta $a1f4		sta PasswordLevelSkip
1239	.0dbe	80 e0		bra $0da0		bra _setTextRed
1240	.0dc0					checkPasswordForCheat
1241	.0dc0	a2 00		ldx #$00		ldx #0
1242	.0dc2	bd d3 0d	lda $0dd3,x	-	lda PasswordRAMCache,x
1243	.0dc5	d9 a5 2c	cmp $2ca5,y		cmp PASSWORD_LIVES,y
1244	.0dc8	d0 07		bne $0dd1		bne _fail
1245	.0dca	e8		inx				inx
1246	.0dcb	c8		iny				iny
1247	.0dcc	e0 0c		cpx #$0c			cpx #12
1248	.0dce	d0 f2		bne $0dc2			bne -
1249								;sec cmp above will set this already
1250	.0dd0	60		rts				rts
1251	.0dd1					_fail
1252	.0dd1	18		clc			clc
1253	.0dd2	60		rts			rts

1255	>0dd3					PasswordRAMCache .fill 12

1257	.0ddf					TSStartGame
1258	.0ddf	20 e5 25	jsr $25e5		jsr setupBackDisolveFruitChars
1259	.0de2	a9 c0		lda #$c0		lda #<GAMELOOP
1260	.0de4	85 1b		sta $1b			sta GameStatePointer
1261	.0de6	a9 08		lda #$08		lda #>GAMELOOP
1262	.0de8	85 1c		sta $1c			sta GameStatePointer+1
1263							; fall through
1264	.0dea					RESET
1265	.0dea	20 f5 12	jsr $12f5		jsr clearAllSprites
1266	.0ded	20 e9 1a	jsr $1ae9		jsr plotStatusArea
1267							; flip the screen
1268	.0df0	78		sei			sei
300						.if int(kVERA.Layer0.ctrl0|kVERA.inc_1) in VeraDESTAddressLUTLookup
301	.0df1	a2 06		ldx #$06		ldx #VeraDESTAddressLUTLookup[int(kVERA.Layer0.ctrl0|kVERA.inc_1)]
306						.endif
307	.0df3	20 13 2b	jsr $2b13	jsr setVERAAddressPort0_X

1270	.0df6	a9 61		lda #$61			lda #%01100001 ; mode 3 enabled
1271	.0df8	8d 23 9f	sta $9f23			sta kVERA.DATA_0
1272	.0dfb	a9 01		lda #$01			lda #%00000001 ; 8x8 64x32
1273	.0dfd	8d 23 9f	sta $9f23			sta kVERA.DATA_0
1274	.0e00	a9 00		lda #$00			lda #<(kVRAM.gameScreen>>2)
1275	.0e02	8d 23 9f	sta $9f23			sta kVERA.DATA_0
1276	.0e05	a9 04		lda #$04			lda #>(kVRAM.gameScreen>>2) ; set map to tilescreen
1277	.0e07	8d 23 9f	sta $9f23			sta kVERA.DATA_0
1278	.0e0a	a9 80		lda #$80			lda #<(kVRAM.gameChars>>2) ; set charset to font
1279	.0e0c	8d 23 9f	sta $9f23			sta kVERA.DATA_0
1280	.0e0f	a9 09		lda #$09			lda #>(kVRAM.gameChars>>2)
1281	.0e11	8d 23 9f	sta $9f23			sta kVERA.DATA_0
1282	.0e14	9c 23 9f	stz $9f23			stz kVERA.DATA_0 ; make sure H and V scroll are 0 while we are here
1283	.0e17	9c 23 9f	stz $9f23			stz kVERA.DATA_0
1284	.0e1a	9c 23 9f	stz $9f23			stz kVERA.DATA_0
1285	.0e1d	9c 23 9f	stz $9f23			stz kVERA.DATA_0
300						.if int(kVRAM.gameScreen|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.0e20	a2 08		ldx #$08		ldx #len(VeraDESTAddressLUT)
304	={1052672:8,1053204:5,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVRAM.gameScreen|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000]
							VeraDESTAddressLUT ..=[kVRAM.gameScreen|kVERA.inc_1]
306						.endif
307	.0e22	20 13 2b	jsr $2b13	jsr setVERAAddressPort0_X

1287	.0e25	a0 00		ldy #$00			ldy #0
1288	.0e27	a2 0f		ldx #$0f		-	ldx #15
1289	.0e29	a9 00		lda #$00			lda #$00
1290	.0e2b	8c 23 9f	sty $9f23			-	sty kVERA.DATA_0
1291	.0e2e	8d 23 9f	sta $9f23				sta kVERA.DATA_0
1292	.0e31	c8		iny					iny
1293	.0e32	ca		dex					dex
1294	.0e33	10 f6		bpl $0e2b				bpl -
1295	.0e35	ad 20 9f	lda $9f20			lda kVERA.ADDR_Lo
1296	.0e38	18		clc				clc
1297	.0e39	69 60		adc #$60			adc #128-32
1298	.0e3b	8d 20 9f	sta $9f20			sta kVERA.ADDR_Lo
1299	.0e3e	90 03		bcc $0e43			bcc +
1300	.0e40	ee 21 9f	inc $9f21				inc kVERA.ADDR_Mid
1301	.0e43	c0 00		cpy #$00		+	cpy #0
1302	.0e45	d0 e0		bne $0e27		bne --
1303							; plot bottom row of screen
300						.if int(kVRAM.gameScreen+(24*128)|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.0e47	a2 09		ldx #$09		ldx #len(VeraDESTAddressLUT)
304	={1052672:8,1053204:5,1055744:9,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVRAM.gameScreen+(24*128)|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000,1055744]
							VeraDESTAddressLUT ..=[kVRAM.gameScreen+(24*128)|kVERA.inc_1]
306						.endif
307	.0e49	20 13 2b	jsr $2b13	jsr setVERAAddressPort0_X

1305	.0e4c	a9 05		lda #$05		lda #5
1306	.0e4e	85 0f		sta $0f			sta ZPTemp
1307	.0e50	a0 cd		ldy #$cd		ldy #kSBC.M ; clear char
1308	.0e52	a2 27		ldx #$27	-	ldx #39
1309	.0e54	a9 00		lda #$00		lda #$00
1310	.0e56	8c 23 9f	sty $9f23		-	sty kVERA.DATA_0
1311	.0e59	8d 23 9f	sta $9f23			sta kVERA.DATA_0
1312	.0e5c	ca		dex				dex
1313	.0e5d	10 f7		bpl $0e56			bpl -
1314	.0e5f	ad 20 9f	lda $9f20		lda kVERA.ADDR_Lo
1315	.0e62	18		clc			clc
1316	.0e63	69 30		adc #$30		adc #128-80
1317	.0e65	8d 20 9f	sta $9f20		sta kVERA.ADDR_Lo
1318	.0e68	90 03		bcc $0e6d		bcc +
1319	.0e6a	ee 21 9f	inc $9f21			inc kVERA.ADDR_Mid
1320	.0e6d	c6 0f		dec $0f		+	dec ZPTemp
1321	.0e6f	10 e1		bpl $0e52		bpl --

1323	.0e71	20 67 1b	jsr $1b67		jsr pltLives
1324	.0e74	58		cli			cli
1325	.0e75	a9 c0		lda #$c0		lda #<GAMELOOP
1326	.0e77	85 1b		sta $1b			sta GameStatePointer
1327	.0e79	a9 08		lda #$08		lda #>GAMELOOP
1328	.0e7b	85 1c		sta $1c			sta GameStatePointer+1
1329	.0e7d	a9 00		lda #$00		lda #kPlayerState.appear
1330	.0e7f	8d 38 a0	sta $a038		sta PlayerData.state
1331	.0e82	a9 01		lda #$01		lda #1
1332	.0e84	20 f6 19	jsr $19f6		jsr playMusic
1333	.0e87	4c b5 08	jmp $08b5		jmp MAINLOOP

1335						; }}}
1336						; }}}

1338						.dsection sSUBS
1339						.section sSUBS
1340						;----------------------------
1341						; SUBS
1342						;----------------------------
1343						; {{{
1344	.0e8a					addXWithMSBAndClip
1345	.0e8a	64 2f		stz $2f			stz DidClipX
1346	.0e8c	bd 30 a3	lda $a330,x		lda mplexBuffer.xpos,x
1347	.0e8f	c9 c8		cmp #$c8		cmp #200
1348	.0e91	b0 11		bcs $0ea4		bcs _veryRight
1349	.0e93	c9 40		cmp #$40		cmp #64
1350	.0e95	b0 1b		bcs $0eb2		bcs _justAddAndGo
1351							;_veryLeft
1352								;clc
1353	.0e97	6d f5 a1	adc $a1f5			adc checkSpriteToCharData.xDeltaCheck
1354	.0e9a	c9 c8		cmp #$c8			cmp #200
1355	.0e9c	90 18		bcc $0eb6			bcc _justStore
1356	.0e9e	e6 2f		inc $2f					inc DidCLipX
1357	.0ea0	a9 00		lda #$00				lda #0
1358	.0ea2	80 12		bra $0eb6				bra _justStore
1359	.0ea4						_veryRight
1360	.0ea4	18		clc				clc
1361	.0ea5	6d f5 a1	adc $a1f5			adc checkSpriteToCharData.xDeltaCheck
1362	.0ea8	c9 f0		cmp #$f0			cmp #256-16
1363	.0eaa	90 0a		bcc $0eb6			bcc _justStore
1364	.0eac	e6 2f		inc $2f					inc DidClipX
1365	.0eae	a9 f0		lda #$f0				lda #256-16
1366	.0eb0	80 04		bra $0eb6				bra _justStore
1367	.0eb2						_justAddAndGo
1368	.0eb2	18		clc				clc
1369	.0eb3	6d f5 a1	adc $a1f5			adc checkSpriteToCharData.xDeltaCheck
1370	.0eb6						_justStore
1371	.0eb6	9d 30 a3	sta $a330,x			sta mplexBuffer.xpos,x

1373	.0eb9	60		rts			rts


1376	.0eba					joyToPlayerDelta
1377	.0eba	20 c3 15	jsr $15c3			jsr scanJoystick
1378	.0ebd	9c f5 a1	stz $a1f5			stz checkSpriteToCharData.xDeltaCheck
1379	.0ec0	9c f6 a1	stz $a1f6			stz checkSpriteToCharData.yDeltaCheck
1380	.0ec3	9c 34 a0	stz $a034			stz PlayerData.movingLR
1381	.0ec6	ad 00 a0	lda $a000			lda joyLeft
1382	.0ec9	0d 01 a0	ora $a001			ora joyRight
1383	.0ecc	f0 5a		beq $0f28			beq _noLR
1384	.0ece	ad 00 a0	lda $a000			lda joyLeft
1385	.0ed1	d0 2b		bne $0efe			bne _left
1386	.0ed3	ad 36 a0	lda $a036			lda PlayerData.slowMove
1387	.0ed6	f0 03		beq $0edb			beq +
1388	.0ed8	a9 01		lda #$01			lda #1
1389	>0eda	2c						.byte $2c ; bit
1390	.0edb	a9 02		lda #$02	+		lda #2
1391	.0edd	8d f5 a1	sta $a1f5			sta checkSpriteToCharData.xDeltaCheck
1392	.0ee0	ad 01 a0	lda $a001			lda joyRight
1393	.0ee3	2d 05 a0	and $a005			and oldJoyLeft
1394	.0ee6	f0 0b		beq $0ef3			beq _fullSpeedRight ; we were already going left
1395	.0ee8	ad 29 a0	lda $a029			lda PlayerData.onGround
1396	.0eeb	d0 03		bne $0ef0			bne _clearSpeedRight
1397	.0eed	a9 01		lda #$01			lda #1
1398	>0eef	2c						.byte $2c
1399	.0ef0					_clearSpeedRight
1400	.0ef0	9c 36 a0	stz $a036			stz PlayerData.slowMove
1401	.0ef3					_fullSpeedRight
1402	.0ef3	a9 01		lda #$01			lda #1
1403	.0ef5	8d 34 a0	sta $a034			sta PlayerData.movingLR
1404	.0ef8	3a		dec a				dec a ; a = 0
1405	.0ef9	20 27 10	jsr $1027			jsr changePlayerDir
1406	.0efc	80 32		bra $0f30			gra _endLR
1407	.0efe	ad 36 a0	lda $a036	_left	lda PlayerData.slowMove
1408	.0f01	f0 03		beq $0f06			beq +
1409	.0f03	a9 ff		lda #$ff			lda #255
1410	>0f05	2c						.byte $2c ; bit
1411	.0f06	a9 fe		lda #$fe	+		lda #254
1412	.0f08	8d f5 a1	sta $a1f5			sta checkSpriteToCharData.xDeltaCheck
1413	.0f0b	ad 00 a0	lda $a000			lda joyLeft
1414	.0f0e	2d 06 a0	and $a006			and oldJoyRight
1415	.0f11	f0 0b		beq $0f1e			beq _fullSpeedLeft ; we were already going left
1416	.0f13	ad 29 a0	lda $a029			lda PlayerData.onGround
1417	.0f16	d0 03		bne $0f1b			bne _clearSpeedLeft
1418	.0f18	a9 01		lda #$01			lda #1
1419	>0f1a	2c						.byte $2c
1420	.0f1b					_clearSpeedLeft
1421	.0f1b	9c 36 a0	stz $a036			stz PlayerData.slowMove
1422	.0f1e					_fullSpeedLeft
1423	.0f1e	a9 01		lda #$01			lda #1
1424	.0f20	8d 34 a0	sta $a034			sta PlayerData.movingLR
1425								;lda #1
1426	.0f23	20 27 10	jsr $1027			jsr changePlayerDir
1427	.0f26	80 08		bra $0f30			bra _endLR

1429	.0f28	a9 80		lda #$80	_noLR	lda #$80
1430	.0f2a	8d 35 a0	sta $a035			sta PlayerData.startedJumpLR
1431	.0f2d	9c 36 a0	stz $a036			stz PlayerData.slowMove
1432	.0f30					_endLR
1433	.0f30	ad 34 a0	lda $a034			lda PlayerData.movingLR
1434	.0f33	d0 06		bne $0f3b			bne +
1435	.0f35	ad 2d a0	lda $a02d			lda PlayerData.facingRight
1436	.0f38	20 27 10	jsr $1027			jsr changePlayerDir
1437	.0f3b	ad 29 a0	lda $a029	+		lda PlayerData.onGround
1438	.0f3e	2d 0a a0	and $a00a			and joyUpStart
1439	.0f41	0d 41 a0	ora $a041			ora PlayerData.forceJump
1440	.0f44	d0 53		bne $0f99			bne StartJump
1441	.0f46	ad 29 a0	lda $a029			lda PlayerData.onGround
1442	.0f49	d0 2e		bne $0f79			bne OnGround
1443	.0f4b	ad 2f a0	lda $a02f			lda PlayerData.yDeltaAccum + 1
1444	.0f4e	10 1a		bpl $0f6a			bpl falling
1445	.0f50	9c 2b a0	stz $a02b			stz PlayerData.isFalling
1446	.0f53	ad 2a a0	lda $a02a			lda PlayerData.hasJumped ; if this is 1
1447	.0f56	4d 2b a0	eor $a02b			eor PlayerData.isFalling   ; and so is this, it will make it 0, other wise still 1
1448	.0f59	2d 0b a0	and $a00b			and joyUpStop 			 ; and the player has let go
1449	.0f5c	d0 30		bne $0f8e			bne AbortJump
1450						;		lda PlayerData.onGround
1451						;		bne OnGround
1452								; we are in air then
1453	.0f5e					normalJumpUpdate
1454	.0f5e	a2 00		ldx #$00			ldx # kJumpIndexs.normal
1455	.0f60					customJumpUpdate
1456	.0f60	20 4f 10	jsr $104f			jsr incPlayerYDeltaAndReturn
1457	.0f63	ad 2f a0	lda $a02f			lda PlayerData.yDeltaAccum + 1
1458	.0f66	8d f6 a1	sta $a1f6			sta checkSpriteToCharData.yDeltaCheck
1459	.0f69	60		rts				rts
1460	.0f6a					falling
1461	.0f6a	a9 01		lda #$01			lda #1
1462	.0f6c	8d 2b a0	sta $a02b			sta PlayerData.isFalling
1463	.0f6f	ad 27 a0	lda $a027			lda PlayerData.canFloat
1464	.0f72	0d f3 a1	ora $a1f3			ora PasswordHaveSpring
1465	.0f75	f0 e7		beq $0f5e			beq normalJumpUpdate
1466	.0f77	80 4b		bra $0fc4			bra handleFall
1467	.0f79					OnGround
1468	.0f79	a9 01		lda #$01			lda #kPlayerState.normal
1469	.0f7b	8d 38 a0	sta $a038			sta PlayerData.state
1470	.0f7e	ad 40 a0	lda $a040			lda PlayerData.hitBubbleNum
1471	.0f81	f0 03		beq $0f86			beq _skip
1472	.0f83	a9 ff		lda #$ff			lda #255
1473	>0f85	2c						.byte $2c
1474	.0f86					_skip
1475	.0f86	a9 01		lda #$01			lda #1
1476	.0f88	8d f6 a1	sta $a1f6			sta checkSpriteToCharData.yDeltaCheck
1477	.0f8b	4c 2a 10	jmp $102a			jmp changePlayerAnimForCurrentDir
1478						;		rts

1480	.0f8e					AbortJump
1481	.0f8e	a9 80		lda #$80			lda #$80
1482	.0f90	8d 2e a0	sta $a02e			sta PlayerData.yDeltaAccum
1483	.0f93	a9 ff		lda #$ff			lda #$FF
1484	.0f95	8d 2f a0	sta $a02f			sta PlayerData.yDeltaAccum+1
1485	.0f98	60		rts				rts
1486	.0f99					StartJump
1487	.0f99	a9 01		lda #$01			lda #1
1488	.0f9b	8d 2a a0	sta $a02a			sta PlayerData.hasJumped	; we are jumping
1489	.0f9e	a9 03		lda #$03			lda #kPlayerState.jump
1490	.0fa0	8d 38 a0	sta $a038			sta PlayerData.state
1491	.0fa3	9c 2b a0	stz $a02b			stz PlayerData.isFalling	; not falling
1492	.0fa6	9c 29 a0	stz $a029			stz PlayerData.onGround		; not on the ground
1493	.0fa9	9c 2e a0	stz $a02e			stz PlayerData.yDeltaAccum	; set the Y jump accleration
1494	.0fac	9c 41 a0	stz $a041			stz PlayerData.forceJump
1495	.0faf	a9 50		lda #$50			lda # kTimers.floatTimer	; reset the float timer
1496	.0fb1	8d 2c a0	sta $a02c			sta PlayerData.floatTimer
1497	.0fb4	a9 fe		lda #$fe			lda # kPlayerParams.jumpStartDelta	; set the other half of jump accleration
1498	.0fb6	8d 2f a0	sta $a02f			sta PlayerData.yDeltaAccum + 1
1499	.0fb9	8d f6 a1	sta $a1f6			sta checkSpriteToCharData.yDeltaCheck
1500	.0fbc	20 2a 10	jsr $102a			jsr changePlayerAnimForCurrentDir
1501	.0fbf	a2 06		ldx #$06			ldx #kSFX.jump
1502	.0fc1	4c e7 19	jmp $19e7			jmp playSFX
1503								;rts ; above it now a jmp
1504	.0fc4					handleFall
1505	.0fc4	ad 38 a0	lda $a038			lda PlayerData.state
1506	.0fc7	c9 03		cmp #$03			cmp #kPlayerState.jump
1507	.0fc9	d0 0c		bne $0fd7			bne _didntJustStartFalling
1508	.0fcb	ad 02 a0	lda $a002			lda joyUp ; if we just start falling, and joy is up and we have spring float
1509	.0fce	f0 07		beq $0fd7			beq _didntJustStartFalling
1510	.0fd0	a9 02		lda #$02			lda #kPlayerState.flap
1511	.0fd2	8d 38 a0	sta $a038			sta PlayerData.state
1512	.0fd5	80 14		bra $0feb			bra _dontStopFloat
1513	.0fd7					_didntJustStartFalling
1514	.0fd7	ad 38 a0	lda $a038			lda PlayerData.state
1515	.0fda	c9 02		cmp #$02			cmp #kPlayerState.flap
1516	.0fdc	d0 1d		bne $0ffb			bne _checkUpStart
1517	.0fde	ad 0b a0	lda $a00b			lda joyUpStop
1518	.0fe1	f0 08		beq $0feb			beq _dontStopFloat
1519	.0fe3	a9 03		lda #$03			lda #kPlayerState.jump
1520	.0fe5	8d 38 a0	sta $a038			sta PlayerData.state
1521	.0fe8	4c 5e 0f	jmp $0f5e			jmp normalJumpUpdate
1522	.0feb					_dontStopFloat
1523	.0feb	ad 2c a0	lda $a02c			lda PlayerData.floatTimer
1524	.0fee	10 03		bpl $0ff3			bpl +
1525	.0ff0	4c 5e 0f	jmp $0f5e			jmp normalJumpUpdate
1526	.0ff3	ce 2c a0	dec $a02c	+		dec PlayerData.floatTimer
1527	.0ff6	a2 01		ldx #$01			ldx #kJumpIndexs.floaty
1528	.0ff8	4c 60 0f	jmp $0f60			jmp customJumpUpdate
1529	.0ffb					_checkUpStart
1530	.0ffb	ad 0a a0	lda $a00a			lda joyUpStart
1531	.0ffe	d0 03		bne $1003			bne +
1532	.1000	4c 5e 0f	jmp $0f5e			jmp normalJumpUpdate
1533	.1003	a9 02		lda #$02	+		lda #kPlayerState.flap
1534	.1005	8d 38 a0	sta $a038			sta PlayerData.state
1535	.1008	a2 01		ldx #$01			ldx #kJumpIndexs.floaty
1536	.100a	4c 60 0f	jmp $0f60			jmp customJumpUpdate

1538	.100d					enterOnGround
1539	.100d	a9 01		lda #$01			lda #kPlayerState.normal ; == 1
1540	.100f	8d 38 a0	sta $a038			sta PlayerData.state
1541								;lda #1
1542								.cerror kPlayerState.normal != 1, "need to add lda #1"
1543	.1012	8d 29 a0	sta $a029			sta PlayerData.onGround
1544	.1015	8d 2e a0	sta $a02e			sta PlayerData.yDeltaAccum
1545	.1018	9c 2a a0	stz $a02a			stz PlayerData.hasJumped
1546	.101b	9c 2b a0	stz $a02b			stz PlayerData.isFalling
1547	.101e	9c 2f a0	stz $a02f			stz PlayerData.yDeltaAccum + 1
1548	.1021	9c 36 a0	stz $a036			stz PlayerData.slowMove
1549	.1024	ad 2d a0	lda $a02d			lda PlayerData.facingRight
1550								;jmp changePlayerDir
1551								;rts ; above is now jmp
1552	.1027					changePlayerDir
1553	.1027	8d 2d a0	sta $a02d			sta PlayerData.facingRight
1554	.102a					changePlayerAnimForCurrentDir
1555	.102a	ad 38 a0	lda $a038			lda PlayerData.state
1556	.102d	c9 02		cmp #$02			cmp #kPlayerState.flap
1557	.102f	d0 04		bne $1035			bne _notFlap
1558	.1031	a9 06		lda #$06			lda #kPlayerAnimsIndex.flapRight
1559	.1033	80 14		bra $1049			bra _still
1560	.1035					_notFlap
1561	.1035	ad 29 a0	lda $a029			lda PlayerData.onGround
1562	.1038	d0 04		bne $103e			bne _onGround
1563	.103a	a9 04		lda #$04			lda #kPlayerAnimsIndex.jumpRight
1564	.103c	80 0b		bra $1049			bra _still
1565	.103e					_onGround
1566	.103e	ad 34 a0	lda $a034			lda PlayerData.movingLR
1567	.1041	f0 04		beq $1047			beq _notMoving
1568	.1043	a9 02		lda #$02			lda #kPlayerAnimsIndex.standWalkRight
1569	.1045	80 02		bra $1049			bra _still
1570	.1047					_notMoving
1571	.1047	a9 00		lda #$00			lda #kPlayerAnimsIndex.standRight
1572	.1049	18		clc		_still	clc
1573	.104a	6d 2d a0	adc $a02d			adc PlayerData.facingRight
1574	.104d	80 1b		bra $106a			gra setPlayerAnimeTo
1575								;rts ;above is now a jmp

1577	.104f					incPlayerYDeltaAndReturn
1578	.104f	ad 2e a0	lda $a02e			lda PlayerData.yDeltaAccum
1579	.1052	18		clc				clc
1580	.1053	7d e4 10	adc $10e4,x			adc PlayerJumpLUT,x
1581	.1056	8d 2e a0	sta $a02e			sta PlayerData.yDeltaAccum
1582	.1059	ad 2f a0	lda $a02f			lda PlayerData.yDeltaAccum + 1
1583	.105c	69 00		adc #$00			adc #0
1584	.105e	30 06		bmi $1066			bmi +
1585	.1060	c9 04		cmp #$04			cmp # kPlayerParams.maxFallSpeed
1586	.1062	90 02		bcc $1066			bcc +
1587	.1064	a9 04		lda #$04			lda # kPlayerParams.maxFallSpeed
1588	.1066	8d 2f a0	sta $a02f	+		sta PlayerData.yDeltaAccum + 1
1589	.1069	60		rts				rts

1591	.106a					setPlayerAnimeTo
1592	.106a	cd 37 a0	cmp $a037			cmp PlayerData.currAnim
1593	.106d	f0 1f		beq $108e			beq _dontchange
1594	.106f	8d 37 a0	sta $a037			sta PlayerData.currAnim
1595	.1072	aa		tax				tax
1596	.1073	bd e6 10	lda $10e6,x			lda PlayerSprLUT,x
1597	.1076	8d 30 a0	sta $a030			sta PlayerData.baseSprite
1598	.1079	20 8f 10	jsr $108f			jsr setSpritePtrFromFrameNumber
1599	.107c	bd f0 10	lda $10f0,x			lda PlayerFrameCountLUT,x
1600	.107f	8d 32 a0	sta $a032			sta PlayerData.frameCount
1601	.1082	bd fa 10	lda $10fa,x			lda PlayerAnimTimer,x
1602	.1085	8d 33 a0	sta $a033			sta PlayerData.frameTimer
1603	.1088	8d 44 a0	sta $a044			sta TickDowns.playerAnim
1604	.108b	9c 31 a0	stz $a031			stz PlayerData.frameOffset
1605	.108e					_dontchange
1606	.108e	60		rts				rts

1608	.108f					setSpritePtrFromFrameNumber
1609	.108f	8d f0 a2	sta $a2f0		sta mplexBuffer.sprp ; this needs to be x16 | $800
1610	.1092	9c 10 a3	stz $a310		stz mplexBuffer.sprph
1611	.1095	0e f0 a2	asl $a2f0		asl mplexBuffer.sprp ; x2
1612	.1098	2e 10 a3	rol $a310		rol mplexBuffer.sprph
1613	.109b	0e f0 a2	asl $a2f0		asl mplexBuffer.sprp ; x4
1614	.109e	2e 10 a3	rol $a310		rol mplexBuffer.sprph
1615	.10a1	0e f0 a2	asl $a2f0		asl mplexBuffer.sprp ; x8
1616	.10a4	2e 10 a3	rol $a310		rol mplexBuffer.sprph
1617	.10a7	0e f0 a2	asl $a2f0		asl mplexBuffer.sprp ; x16
1618	.10aa	2e 10 a3	rol $a310		rol mplexBuffer.sprph
1619	.10ad	ad 10 a3	lda $a310		lda mplexBuffer.sprph
1620	.10b0	09 08		ora #$08		ora #$08
1621	.10b2	8d 10 a3	sta $a310		sta mplexBuffer.sprph
1622	.10b5	60		rts			rts

1624						; returns carry clear if anim did not loop
1625						; carry is set if it did
1626	.10b6					updatePlayerAnim
1627	.10b6	ad 32 a0	lda $a032		lda PlayerData.frameCount
1628	.10b9	c9 02		cmp #$02		cmp #2
1629	.10bb	90 06		bcc $10c3		bcc _skip
1630	.10bd	ad 44 a0	lda $a044		lda TickDowns.playerAnim
1631	.10c0	f0 02		beq $10c4		beq _itTime
1632	.10c2	18		clc			clc
1633	.10c3					_skip
1634	.10c3	60		rts			rts
1635	.10c4					_itTime
1636	.10c4	ad 31 a0	lda $a031		lda PlayerData.frameOffset
1637	.10c7	18		clc			clc
1638	.10c8	69 01		adc #$01		adc #1
1639	.10ca	cd 32 a0	cmp $a032		cmp PlayerData.frameCount
1640	.10cd	90 02		bcc $10d1		bcc _store
1641	.10cf	a9 00		lda #$00		lda #0
1642	.10d1					_store
1643	.10d1	8d 31 a0	sta $a031		sta PlayerData.frameOffset
1644	.10d4	08		php			php ; if we overflowed c will be set, else clear
1645	.10d5	18		clc			clc
1646	.10d6	6d 30 a0	adc $a030		adc PlayerData.baseSprite
1647	.10d9	20 8f 10	jsr $108f		jsr setSpritePtrFromFrameNumber
1648							;sta mplexBuffer.sprp
1649	.10dc	ad 33 a0	lda $a033		lda PlayerData.frameTimer
1650	.10df	8d 44 a0	sta $a044		sta TickDowns.playerAnim
1651	.10e2	28		plp			plp ; restore carry state
1652	.10e3	60		rts			rts

1654	>10e4	13 04				PlayerJumpLUT .byte kPlayerParams.jumpDeltaAccum, kPlayerParams.jumpDeltaAccumFloat
1655												; Left	Right  Walk L	Walk R
1656	>10e6	00 04 08 0c 10 12 14 16		PlayerSprLUT		.byte 0,0+04,0+08,0+12,0+16,0+18,0+20,0+22,0+24,0+28
	>10ee	18 1c
1657	>10f0	01 01 04 04 02 02 02 02		PlayerFrameCountLUT .byte 1	   	  ,1		  ,4		  ,4		  ,2		  ,2		  ,2		  ,2		  ,4		  ,4
	>10f8	04 04
1658	>10fa	ff ff 08 08 08 08 08 08		PlayerAnimTimer		.byte 255     ,255		  ,8		  ,8		  ,8		  ,8		  ,8		  ,8		  ,8		  ,8
	>1102	08 08

1660	.1104					clearPlayerStuct
1661	.1104	a2 1d		ldx #$1d		ldx #size(sPlayerData)-1
1662	.1106	9e 25 a0	stz $a025,x	-	stz PlayerData,x
1663	.1109	ca		dex			dex
1664	.110a	10 fa		bpl $1106		bpl -
1665	.110c	60		rts			rts

1667	.110d					removePickups
1668	.110d	9c 26 a0	stz $a026		stz PlayerData.hasShield
1669	.1110	9c 27 a0	stz $a027		stz PlayerData.canFloat
1670	.1113	9c 28 a0	stz $a028		stz PlayerData.hasSpring
1671	.1116	9c 3a a0	stz $a03a		stz PlayerData.bulletActive
1672	.1119	9c 3e a0	stz $a03e		stz PlayerData.bulletEgg
1673	.111c	60		rts			rts


1676	>111d	00				bulletFrame .byte 0

1678	.111e					startBullet
1679	.111e	a9 01		lda #$01		lda #1
1680	.1120	8d 3a a0	sta $a03a		sta PlayerData.bulletActive
1681	.1123	a2 03		ldx #$03		ldx #kSFX.bubble
1682	.1125	20 e7 19	jsr $19e7		jsr playSFX
1683	.1128	9c 3b a0	stz $a03b		stz PlayerData.bulletUD
1684	.112b	9c 3d a0	stz $a03d		stz PlayerData.bulletBurst
1685	.112e	ad 2d a0	lda $a02d		lda PlayerData.facingRight
1686	.1131	8d 3c a0	sta $a03c		sta PlayerData.bulletLR
1687	.1134	a9 c8		lda #$c8		lda #200
1688	.1136	8d 46 a0	sta $a046		sta TickDowns.bulletLifeTimer
1689	.1139	ad 30 a3	lda $a330		lda mplexBuffer.xpos
1690	.113c	8d 31 a3	sta $a331		sta mplexBuffer.xpos+kBulletSpriteOffset
1691	.113f	ad 70 a3	lda $a370		lda mplexBuffer.ypos
1692	.1142	38		sec			sec
1693	.1143	e9 03		sbc #$03		sbc #3
1694	.1145	8d 71 a3	sta $a371		sta mplexBuffer.ypos+kBulletSpriteOffset
1695	.1148	ad 50 a3	lda $a350		lda mplexBuffer.xmsb
1696	.114b	8d 51 a3	sta $a351		sta mplexBuffer.xmsb+kBulletSpriteOffset
1697	.114e	ad 3e a0	lda $a03e		lda PlayerData.bulletEgg
1698	.1151	0d f2 a1	ora $a1f2		ora PasswordRedBullets
1699	.1154	f0 04		beq $115a		beq _normal
1700	.1156	a9 ff		lda #$ff			lda #kSprites.bulletSprite+7
1701								.cerror kSprites.bulletSprite+7 == 0, "change branch"
1702	.1158	80 02		bra $115c			bra _store
1703	.115a					_normal
1704	.115a	a9 f8		lda #$f8		lda #kSprites.bulletSprite
1705	.115c					_store
1706	.115c	80 76		bra $11d4		gra SetBulletSpriteFromFrame
1707							;rts

1709	.115e					updateBullet
1710	.115e	ad 3a a0	lda $a03a		lda PlayerData.bulletActive
1711	.1161	f0 1a		beq $117d		beq bulletExit
1712	.1163	ad 46 a0	lda $a046		lda TickDowns.bulletLifeTimer
1713	.1166	d0 2a		bne $1192		bne bulletNotDead
1714	.1168					removeBullet
1715	.1168	9c 3a a0	stz $a03a		stz PlayerData.bulletActive
1716	.116b	ad 3e a0	lda $a03e		lda PlayerData.bulletEgg
1717	.116e	f0 08		beq $1178		beq +
1718	.1170	ad f2 a1	lda $a1f2			lda PasswordRedBullets
1719	.1173	d0 03		bne $1178			bne +
1720	.1175	ce 3e a0	dec $a03e				dec PlayerData.bulletEgg
1721	.1178	a9 ff		lda #$ff	+	lda #255
1722	.117a	8d 71 a3	sta $a371		sta mplexBuffer.ypos+kBulletSpriteOffset
1723	.117d					bulletExit
1724	.117d	60		rts			rts

1726	.117e					burstBullet
1727	.117e	a9 fb		lda #$fb		lda #kSprites.bulletSprite+3
1728	.1180	20 d4 11	jsr $11d4		jsr SetBulletSpriteFromFrame
1729	.1183	a9 10		lda #$10		lda #16
1730	.1185	8d 46 a0	sta $a046		sta TickDowns.bulletLifeTimer
1731	.1188	a9 01		lda #$01		lda #1
1732	.118a	8d 3d a0	sta $a03d		sta PlayerData.bulletBurst
1733	.118d	a2 04		ldx #$04		ldx #kSFX.ebubble
1734	.118f	4c e7 19	jmp $19e7		jmp playSFX
1735							;rts ; above is now a jump
1736	.1192					bulletNotDead
1737	.1192	ad 3d a0	lda $a03d		lda PlayerData.bulletBurst
1738	.1195	d0 e6		bne $117d		bne bulletExit
1739	.1197	ad 3e a0	lda $a03e		lda PlayerData.bulletEgg
1740	.119a	0d f2 a1	ora $a1f2		ora PasswordRedBullets
1741	.119d	d0 17		bne $11b6		bne _bulletFull
1742	.119f	ad 1d 11	lda $111d		lda bulletFrame
1743	.11a2	c9 fa		cmp #$fa		cmp #kSprites.bulletSprite+2
1744	.11a4	f0 10		beq $11b6		beq _bulletFull
1745	.11a6	ad 46 a0	lda $a046		lda TickDowns.bulletLifeTimer
1746	.11a9	29 07		and #$07		and #$07
1747	.11ab	d0 09		bne $11b6		bne _bulletFull
1748	.11ad	ee 1d 11	inc $111d		inc bulletFrame
1749	.11b0	ad 1d 11	lda $111d		lda bulletFrame
1750	.11b3	20 d4 11	jsr $11d4		jsr SetBulletSpriteFromFrame
1751	.11b6					_bulletFull
1752	.11b6	a9 01		lda #$01		lda #kBulletCollisionbox
1753	.11b8	85 1e		sta $1e			sta CollideSpriteBoxIndex
1754							; lda #kBulletSpriteOffset ; same as kBulletCollisionbox
1755	.11ba	85 1d		sta $1d			sta CollideSpriteToCheck
1756	.11bc	a9 fe		lda #$fe		lda #<UpdateBulletEndYColl
1757	.11be	85 06		sta $06			sta Pointer1
1758	.11c0	a9 11		lda #$11		lda #>UpdateBulletEndYColl
1759	.11c2	85 07		sta $07			sta Pointer1+1
1760	.11c4	a9 00		lda #$00		lda #0
1761	.11c6	85 05		sta $05			sta CollisionResult
1762	.11c8	a8		tay			tay ; ldy #0
1763	.11c9	ad 3b a0	lda $a03b		lda PlayerData.bulletUD
1764	.11cc	f0 03		beq $11d1		beq +
1765	.11ce	4c 7e 1e	jmp $1e7e		jmp entDown
1766	.11d1	4c 42 1e	jmp $1e42	+	jmp entUp

1768	.11d4					SetBulletSpriteFromFrame
1769	.11d4	8d 1d 11	sta $111d		sta bulletFrame
1770	.11d7	8d f1 a2	sta $a2f1		sta mplexBuffer.sprp+kBulletSpriteOffset ; this needs to be x16 | $800
1771	.11da	9c 11 a3	stz $a311		stz mplexBuffer.sprph+kBulletSpriteOffset
1772	.11dd	0e f1 a2	asl $a2f1		asl mplexBuffer.sprp+kBulletSpriteOffset ; x2
1773	.11e0	2e 11 a3	rol $a311		rol mplexBuffer.sprph+kBulletSpriteOffset
1774	.11e3	0e f1 a2	asl $a2f1		asl mplexBuffer.sprp+kBulletSpriteOffset ; x4
1775	.11e6	2e 11 a3	rol $a311		rol mplexBuffer.sprph+kBulletSpriteOffset
1776	.11e9	0e f1 a2	asl $a2f1		asl mplexBuffer.sprp+kBulletSpriteOffset ; x8
1777	.11ec	2e 11 a3	rol $a311		rol mplexBuffer.sprph+kBulletSpriteOffset
1778	.11ef	0e f1 a2	asl $a2f1		asl mplexBuffer.sprp+kBulletSpriteOffset ; x16
1779	.11f2	2e 11 a3	rol $a311		rol mplexBuffer.sprph+kBulletSpriteOffset
1780	.11f5	ad 11 a3	lda $a311		lda mplexBuffer.sprph+kBulletSpriteOffset
1781	.11f8	09 08		ora #$08		ora #$08
1782	.11fa	8d 11 a3	sta $a311		sta mplexBuffer.sprph+kBulletSpriteOffset
1783	.11fd	60		rts			rts

1785	.11fe					UpdateBulletEndYColl
1786	.11fe	a5 05		lda $05			lda CollisionResult
1787	.1200	f0 0a		beq $120c		beq _updateY
1788	.1202	ad 3b a0	lda $a03b		lda PlayerData.bulletUD
1789	.1205	49 01		eor #$01		eor #1
1790	.1207	8d 3b a0	sta $a03b		sta PlayerData.bulletUD
1791	.120a	10 0a		bpl $1216		bpl _checkX
1792	.120c					_updateY
1793	.120c	ad 71 a3	lda $a371		lda mplexBuffer.ypos+kBulletSpriteOffset
1794	.120f	18		clc			clc
1795	.1210	6d f6 a1	adc $a1f6		adc checkSpriteToCharData.yDeltaCheck
1796	.1213	8d 71 a3	sta $a371		sta mplexBuffer.ypos+kBulletSpriteOffset
1797	.1216					_checkX
1798	.1216	a9 2e		lda #$2e		lda #<UpdateBulletEndXColl
1799	.1218	85 06		sta $06			sta Pointer1
1800	.121a	a9 12		lda #$12		lda #>UpdateBulletEndXColl
1801	.121c	85 07		sta $07			sta Pointer1+1
1802	.121e	a9 00		lda #$00		lda #$00
1803	.1220	85 05		sta $05			sta CollisionResult
1804	.1222	a8		tay			tay ;ldy #0
1805	.1223	ad 3c a0	lda $a03c		lda PlayerData.bulletLR
1806	.1226	d0 03		bne $122b		bne +
1807	.1228	4c 23 1e	jmp $1e23		jmp entRight
1808	.122b	4c 5f 1e	jmp $1e5f	+	jmp entLeft

1810							; do some more collision checking here
1811	.122e					UpdateBulletEndXColl
1812	.122e	a5 05		lda $05			lda CollisionResult
1813	.1230	f0 0a		beq $123c		beq _updateX
1814	.1232	ad 3c a0	lda $a03c		lda PlayerData.bulletLR
1815	.1235	49 01		eor #$01		eor #1
1816	.1237	8d 3c a0	sta $a03c		sta PlayerData.bulletLR
1817	.123a	10 11		bpl $124d		bpl _checkEnts
1818	.123c					_updateX
1819	.123c	a2 01		ldx #$01		ldx #kBulletSpriteOffset
1820	.123e	20 8a 0e	jsr $0e8a		jsr addXWithMSBAndClip
1821	.1241	a5 2f		lda $2f			lda DidClipX
1822	.1243	f0 08		beq $124d		beq _checkEnts
1823	.1245	ad 3c a0	lda $a03c		lda PlayerData.bulletLR
1824	.1248	49 01		eor #$01		eor #1
1825	.124a	8d 3c a0	sta $a03c		sta PlayerData.bulletLR
1826	.124d					_checkEnts
1827	.124d	20 65 24	jsr $2465		jsr collideBulletAgainstRest
1828	.1250	90 1e		bcc $1270		bcc _exit2 ; didn't hit one
1829	.1252	bd 52 a0	lda $a052,x		lda EntityData.type,x
1830	.1255	20 8a 12	jsr $128a		jsr isTypeBoss
1831	.1258	b0 17		bcs $1271		bcs _boss
1832	.125a	a9 ff		lda #$ff			lda #255
1833	.125c	9d 72 a3	sta $a372,x			sta mplexBuffer.ypos+kEntsSpriteOffset,x
1834	.125f	9d 1a a1	sta $a11a,x			sta EntityData.entState,x
1835	.1262	9d 9d a0	sta $a09d,x			sta EntityData.movTimer,x
1836	.1265	1a		inc a				inc a ; 0
1837	.1266	9d 84 a0	sta $a084,x			sta EntityData.active,x
1838	.1269	1a		inc a				inc a ;1
1839	.126a	9d 97 a1	sta $a197,x			sta EntityData.speed,x
1840	.126d	4c 7e 11	jmp $117e			jmp burstBullet
1841	.1270						_exit2
1842	.1270	60		rts				rts
1843	.1271					_boss
1844	.1271	ad 3e a0	lda $a03e		lda PlayerData.bulletEgg
1845	.1274	0d f2 a1	ora $a1f2		ora PasswordRedBullets
1846	.1277	f0 f7		beq $1270		beq _exit2 ; only accept eggs for the boss
1847	.1279	bd 52 a0	lda $a052,x		lda EntityData.type,x
1848	.127c	20 9a 12	jsr $129a		jsr isTypeBossBounceDetect
1849	.127f	b0 03		bcs $1284		bcs _found
1850	.1281	ca		dex				dex ; doesn't affect C
1851	.1282	80 ed		bra $1271			bra _boss
1852	.1284					_found
1853	.1284	20 a6 12	jsr $12a6		jsr hurtBoss
1854	.1287	4c 7e 11	jmp $117e		jmp burstBullet

1856						; carry clear not boss, set boss
1857	.128a					isTypeBoss
1858	.128a	c9 08		cmp #$08		cmp #kEntity.bear
1859	.128c	90 08		bcc $1296		bcc _notBoss
1860	.128e	c9 0c		cmp #$0c		cmp #kEntity.octopussBody+1
1861	.1290	90 06		bcc $1298		bcc _boss
1862	.1292	c9 0d		cmp #$0d		cmp #kEntity.bossDummy
1863	.1294	f0 02		beq $1298		beq _boss
1864	.1296					_notBoss
1865	.1296	18		clc			clc
1866	>1297	24					.byte $24
1867	.1298					_boss
1868	.1298	38		sec			sec
1869	.1299	60		rts			rts

1871	.129a					isTypeBossBounceDetect
1872	.129a	c9 08		cmp #$08		cmp #kEntity.bear
1873	.129c	f0 06		beq $12a4		beq _yes
1874	.129e	c9 09		cmp #$09		cmp #kEntity.octopuss
1875	.12a0	f0 02		beq $12a4		beq _yes
1876	.12a2	18		clc			clc
1877	>12a3	24					.byte $24
1878	.12a4					_yes
1879	.12a4	38		sec			sec
1880	.12a5	60		rts			rts

1882	.12a6					hurtBoss
1883	.12a6	bd 1a a1	lda $a11a,x		lda EntityData.entState,x
1884	.12a9	c9 01		cmp #$01		cmp #kBoss.dead
1885	.12ab	f0 19		beq $12c6		beq _exit
1886	.12ad	bd 9e a0	lda $a09e,x		lda EntityData.movTimer+1,x
1887	.12b0	d0 14		bne $12c6		bne _exit
1888	.12b2	de 84 a0	dec $a084,x		dec EntityData.active,x
1889	.12b5	bd 84 a0	lda $a084,x		lda EntityData.active,x
1890	.12b8	c9 01		cmp #$01		cmp #1
1891	.12ba	f0 0b		beq $12c7		beq _killedBoss
1892							; we need to flash them so the player knows they did something
1893	.12bc	a9 01		lda #$01		lda #01
1894	.12be	20 74 1d	jsr $1d74		jsr setBossSpriteToColour
1895	.12c1	a9 10		lda #$10		lda #16
1896	.12c3	9d 9e a0	sta $a09e,x		sta EntityData.movTimer+1,x ; store the flash timer in the 2nd sprite
1897	.12c6					_exit
1898	.12c6	60		rts			rts
1899	.12c7					_killedBoss
1900							; well just killed the boss
1901	.12c7	a9 01		lda #$01		lda #kBoss.dead
1902	.12c9	9d 1a a1	sta $a11a,x		sta EntityData.entState,x
1903	.12cc	a9 fb		lda #$fb		lda #kSprites.splat
1904							;sta mplexBuffer.sprp+kEntsSpriteOffset,x
1905							;sta mplexBuffer.sprp+kEntsSpriteOffset+1,x
1906							;sta mplexBuffer.sprp+kEntsSpriteOffset+2,x
1907							;sta mplexBuffer.sprp+kEntsSpriteOffset+3,x
1908	.12ce	20 d0 22	jsr $22d0		jsr SetEntSpriteFromFrame
1909	.12d1	e8		inx			inx
1910	.12d2	a9 fb		lda #$fb		lda #kSprites.splat
1911	.12d4	20 d0 22	jsr $22d0		jsr SetEntSpriteFromFrame
1912	.12d7	e8		inx			inx
1913	.12d8	a9 fb		lda #$fb		lda #kSprites.splat
1914	.12da	20 d0 22	jsr $22d0		jsr SetEntSpriteFromFrame
1915	.12dd	e8		inx			inx
1916	.12de	a9 fb		lda #$fb		lda #kSprites.splat
1917	.12e0	20 d0 22	jsr $22d0		jsr SetEntSpriteFromFrame
1918	.12e3	ca		dex			dex
1919	.12e4	ca		dex			dex
1920	.12e5	ca		dex			dex
1921	.12e6	a9 19		lda #$19		lda #kBoss.deathAnimTime
1922	.12e8	9d 9d a0	sta $a09d,x		sta EntityData.movTimer,x
1923	.12eb	86 0f		stx $0f			stx ZPTemp
1924	.12ed	a9 03		lda #$03		lda #kScoreIndex.boss
1925	.12ef	20 50 1a	jsr $1a50		jsr giveScore
1926	.12f2	a6 0f		ldx $0f			ldx ZPTemp
1927	.12f4	60		rts			rts

1929	.12f5					clearAllSprites
1930	.12f5	a2 00		ldx #$00		ldx #0
1931	.12f7	a9 ff		lda #$ff		lda #255
1932	.12f9	9d 70 a3	sta $a370,x	-	sta mplexBuffer.ypos,x	; disbale all sprites
1933	.12fc	9d 50 a3	sta $a350,x		sta mplexBuffer.xmsb,x  ; to be sure sure
1934	.12ff	e8		inx			inx
1935	.1300	e0 20		cpx #$20		cpx #mPlex.kMaxSpr+1	 ;have we reached 32 yet?
1936	.1302	d0 f5		bne $12f9		bne -
1937	.1304	60		rts			rts

1939	.1305					disableAllEntSprites
1940	.1305	a9 ff		lda #$ff		lda #255
1941	.1307	a2 1f		ldx #$1f		ldx #mplex.kMaxSpr
1942	.1309	9d 70 a3	sta $a370,x	-	sta mplexBuffer.ypos,x
1943	.130c	ca		dex			dex
1944	.130d	d0 fa		bne $1309		bne -
1945	.130f	60		rts			rts

1947	.1310					clearAllEntities
1948	.1310	9c 51 a0	stz $a051		stz EntityData.number
1949	.1313	9c c9 a1	stz $a1c9		stz EntityData.numPipes
1950	.1316	9c d2 a1	stz $a1d2		stz EntityData.lastPipeUsed
1951	.1319	a2 19		ldx #$19		ldx #kEntity.maxEntities
1952	.131b	9e 52 a0	stz $a052,x	-	stz EntityData.type,x
1953	.131e	9e 84 a0	stz $a084,x		stz EntityData.active,x
1954	.1321	9e 1a a1	stz $a11a,x		stz EntityData.entState,x
1955	.1324	ca		dex			dex
1956	.1325	10 f4		bpl $131b		bpl -
1957	.1327	60		rts			rts

1959	.1328					emptyTitleScreen
300						.if int(kVRAM.titleScreen | kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.1328	a2 0a		ldx #$0a		ldx #len(VeraDESTAddressLUT)
304	={1048576:10,1052672:8,1053204:5,1055744:9,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVRAM.titleScreen | kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000,1055744,$100000]
							VeraDESTAddressLUT ..=[kVRAM.titleScreen | kVERA.inc_1]
306						.endif
307	.132a	20 13 2b	jsr $2b13	jsr setVERAAddressPort0_X

1961	.132d	a0 0f		ldy #$0f			ldy #$0f ; do 16 pages aka 4K
1962	.132f	a2 00		ldx #$00			ldx #00
1963	.1331	a9 a0		lda #$a0	-		lda #" "
1964	.1333	8d 23 9f	sta $9f23			sta kVERA.DATA_0
1965	.1336	9c 23 9f	stz $9f23			stz kVERA.DATA_0
1966	.1339	ca		dex				dex
1967	.133a	d0 f5		bne $1331			bne -
1968	.133c	88		dey				dey
1969	.133d	10 f2		bpl $1331			bpl -
1970	.133f	60		rts				rts

1972	.1340					convertLevelToTileMap
1973	.1340	9c 1e a0	stz $a01e			stz LevelData.numKeys
1974	.1343	9c 1f a0	stz $a01f			stz LevelData.totalKeys
1975	.1346	9c c9 a1	stz $a1c9			stz EntityData.numPipes
1976	.1349	9c d2 a1	stz $a1d2			stz EntityData.lastPipeUsed
1977	.134c	a9 ff		lda #$ff			lda #$FF
1978	.134e	8d 21 a0	sta $a021			sta LevelData.exitIndex
1979	.1351	8d 22 a0	sta $a022			sta LevelData.exitIndex+1
1980	.1354	a9 00		lda #$00			lda #<tileMapTemp
1981	.1356	85 06		sta $06				sta Pointer1
1982								;sta LevelTileMapPtrLo
1983	.1358	a9 a2		lda #$a2			lda #>tileMapTemp
1984	.135a	85 07		sta $07				sta Pointer1+1
1985								;sta LevelTileMapPtrHi
1986	.135c	ae 1b a0	ldx $a01b			ldx GameData.currLevel
1987	.135f	bd 6e 5e	lda $5e6e,x			lda LevelTableLo,x
1988	.1362	85 08		sta $08				sta Pointer2
1989	.1364	bd 8d 5e	lda $5e8d,x			lda LevelTableHi,x
1990	.1367	85 09		sta $09				sta Pointer2+1
1991						; read level pointers
1992	.1369	a0 00		ldy #$00			ldy #0
1993	.136b	84 15		sty $15				sty ActiveTileIndex
1994								;lda (Pointer2),y
1995								;clc
1996								;adc Pointer2
1997						 		;sta LevelKeyListPtrLo skip these pointers as no longer used
1998	.136d	c8		iny				iny
1999								;lda (Pointer2),y
2000								;adc Pointer2+1
2001								;sta LevelKeyListPtrHi
2002	.136e	c8		iny				iny
2003	.136f	b1 08		lda ($08),y			lda (Pointer2),y
2004	.1371	18		clc				clc
2005	.1372	65 08		adc $08				adc Pointer2
2006	.1374	85 00		sta $00				sta EntityDataPointer
2007	.1376	c8		iny				iny
2008	.1377	b1 08		lda ($08),y			lda (Pointer2),y
2009	.1379	65 09		adc $09				adc Pointer2+1
2010	.137b	85 01		sta $01				sta EntityDataPointer+1
2011	.137d	18		clc				clc
2012	.137e	a5 08		lda $08				lda Pointer2
2013	.1380	69 04		adc #$04			adc #4
2014	.1382	85 08		sta $08				sta Pointer2
2015	.1384	a5 09		lda $09				lda Pointer2+1
2016	.1386	69 00		adc #$00			adc #0
2017	.1388	85 09		sta $09				sta Pointer2+1

2019	.138a	a9 0c		lda #$0c			lda #12
2020	.138c	48		pha				pha
2021	.138d	a0 00		ldy #$00	_row	ldy #0
2022	.138f					_loop	; read in 16 bytes
2023	.138f	b1 08		lda ($08),y			lda (Pointer2),y
2024	.1391	c9 12		cmp #$12			cmp # kTiles.player
2025	.1393	f0 4a		beq $13df			beq _playerPos
2026	.1395	c9 11		cmp #$11			cmp # kTiles.exit
2027	.1397	f0 5b		beq $13f4			beq _exitPos
2028	.1399	c9 09		cmp #$09			cmp # kTiles.key1
2029	.139b	f0 4b		beq $13e8			beq _key
2030	.139d	c9 0a		cmp #$0a			cmp # kTiles.key2
2031	.139f	f0 47		beq $13e8			beq _key
2032	.13a1	c9 0b		cmp #$0b			cmp # kTiles.key3
2033	.13a3	f0 43		beq $13e8			beq _key
2034	.13a5	c9 0c		cmp #$0c			cmp # kTiles.key4
2035	.13a7	f0 3f		beq $13e8			beq _key
2036	.13a9	c9 13		cmp #$13			cmp # kTiles.pipe
2037	.13ab	f0 5c		beq $1409			beq _pipe
2038	.13ad	c9 14		cmp #$14			cmp # kTiles.diss
2039	.13af	f0 3f		beq $13f0			beq _dissBlock
2040								; covert and then push out
2041	.13b1					_cont	;tax
2042								;lda toolToTileLUT,x
2043	.13b1	91 06		sta ($06),y			sta (Pointer1),y
2044	.13b3	e6 15		inc $15				inc ActiveTileIndex
2045	.13b5	c8		iny				iny
2046	.13b6	c0 10		cpy #$10			cpy #16
2047	.13b8	d0 d5		bne $138f			bne _loop
2048	.13ba	18		clc				clc
2049	.13bb	a5 08		lda $08				lda Pointer2
2050	.13bd	69 10		adc #$10			adc #16
2051	.13bf	85 08		sta $08				sta Pointer2
2052	.13c1	a5 09		lda $09				lda Pointer2+1
2053	.13c3	69 00		adc #$00			adc #0
2054	.13c5	85 09		sta $09				sta Pointer2+1
2055	.13c7	18		clc				clc
2056	.13c8	a5 06		lda $06				lda Pointer1
2057	.13ca	69 10		adc #$10			adc #16
2058	.13cc	85 06		sta $06				sta Pointer1
2059	.13ce	a5 07		lda $07				lda Pointer1+1
2060	.13d0	69 00		adc #$00			adc #0
2061	.13d2	85 07		sta $07				sta Pointer1+1
2062	.13d4	68		pla				pla
2063	.13d5	38		sec				sec
2064	.13d6	e9 01		sbc #$01			sbc #1
2065	.13d8	c9 00		cmp #$00			cmp #0
2066	.13da	48		pha				pha
2067	.13db	d0 b0		bne $138d			bne _row
2068	.13dd	68		pla				pla
2069	.13de	60		rts				rts
2070	.13df					_playerPos
2071	.13df	a5 15		lda $15				lda ActiveTileIndex
2072	.13e1	8d 20 a0	sta $a020			sta LevelData.playerIndex
2073	.13e4	a9 00		lda #$00			lda #kTiles.back ; 0
2074	.13e6	80 c9		bra $13b1			bra _cont
2075	.13e8	ee 1e a0	inc $a01e	_key	inc LevelData.numKeys
2076	.13eb	ee 1f a0	inc $a01f			inc LevelData.totalKeys
2077	.13ee	80 c1		bra $13b1			bra _cont
2078	.13f0					_dissBlock
2079	.13f0	a9 14		lda #$14			lda #kTiles.diss
2080	.13f2	80 bd		bra $13b1			bra _cont
2081	.13f4					_exitPos
2082	.13f4	a5 15		lda $15				lda ActiveTileIndex
2083	.13f6	ae 21 a0	ldx $a021			ldx LevelData.exitIndex
2084	.13f9	e0 ff		cpx #$ff			cpx #$FF
2085	.13fb	d0 05		bne $1402			bne _2nd
2086	.13fd	8d 21 a0	sta $a021				sta LevelData.exitIndex
2087	.1400	80 03		bra $1405				bra +
2088	.1402	8d 22 a0	sta $a022	_2nd	sta LevelData.exitIndex+1
2089	.1405	a9 11		lda #$11	+		lda #kTiles.exit
2090	.1407	80 a8		bra $13b1			bra _cont
2091	.1409					_pipe
2092	.1409	ae c9 a1	ldx $a1c9			ldx EntityData.numPipes
2093	.140c	a5 15		lda $15				lda ActiveTileIndex
2094	.140e	38		sec				sec
2095	.140f	e9 10		sbc #$10			sbc #16
2096	.1411	9d ca a1	sta $a1ca,x			sta EntityData.pipeIndex,x
2097	.1414	e8		inx				inx
2098	.1415	8e c9 a1	stx $a1c9			stx EntityData.numPipes
2099	.1418	a9 13		lda #$13			lda #kTiles.pipe
2100	.141a	80 95		bra $13b1			bra _cont


2103	.141c					addShadowsToMap
2104	.141c	64 14		stz $14			stz TempX
2105	.141e	a4 14		ldy $14		-	ldy TempX
2106	.1420	20 42 14	jsr $1442		jsr tileIsSafeToChange
2107	.1423	90 03		bcc $1428		bcc _next
2108	.1425	20 4e 14	jsr $144e		jsr calcBCDEforTileY
2109	.1428					_next
2110	.1428	e6 14		inc $14			inc TempX
2111	.142a	a5 14		lda $14			lda TempX
2112	.142c	c9 c0		cmp #$c0		cmp #kLevelSizeMax
2113	.142e	d0 ee		bne $141e		bne -
2114	.1430	60		rts			rts

2116	.1431					tileIsWall
2117	.1431	b9 00 a2	lda $a200,y		lda tileMapTemp,y
2118	.1434	f0 0a		beq $1440		beq	_no
2119	.1436	c9 06		cmp #$06		cmp #kTiles.wall4+1
2120	.1438	90 05		bcc $143f		bcc _yes
2121	.143a	c9 14		cmp #$14		cmp #kTiles.diss
2122	.143c	d0 02		bne $1440		bne _no
2123	.143e	18		clc			clc
2124	.143f					_yes
2125	.143f	60		rts			rts ; carry is clear
2126	.1440	38		sec		_no sec
2127	.1441	60		rts			rts ; carry is set

2129	.1442					tileIsSafeToChange
2130	.1442	b9 00 a2	lda $a200,y		lda tileMapTemp,y
2131	.1445	f0 05		beq $144c		beq _yes ; 0 is safe
2132	.1447	c9 22		cmp #$22		cmp #kTiles.underHangStart
2133	.1449	b0 01		bcs $144c		bcs _yes
2134	.144b	60		rts			rts ; carry is clear
2135	.144c					_yes
2136	.144c	38		sec			sec
2137	.144d	60		rts			rts

2139						; Don't try and understand this, not worth your life, it calcs the saul drop shadow, just move on.
2140						;  BCD
2141						;  EA
2142						;   H
2143						; A is tile we are testing
2144						;  BCDE H
2145						;  1110   = under hang
2146						;  1100   = under hang right end
2147						;  0110   = under hanr left  end
2148						;  0001 0 = left wall top end
2149						;  1001   = left wall
2150						;  1000   = 35
2151						;  11X1   = top left
2152						;  0XX1 1 = bottom left
2153	.144e					calcBCDEforTileY
2154	.144e	84 0f		sty $0f			sty ZPTemp
2155	.1450	84 10		sty $10			sty ZPTemp2
2156	.1452	98		tya			tya
2157	.1453	29 0f		and #$0f		and #15
2158	.1455	d0 04		bne $145b		bne _canDoLeft
2159	.1457	a9 80		lda #$80			lda #$80		; can'r do left on Negative
2160	.1459	80 02		bra $145d			bra +
2161	.145b					_canDoLeft
2162	.145b	a9 00		lda #$00		lda #0
2163	.145d	85 12		sta $12		+	sta ZPTemp4
2164	.145f	a5 0f		lda $0f			lda ZPTemp
2165	.1461	29 0f		and #$0f		and #15
2166	.1463	c9 0f		cmp #$0f		cmp #15
2167	.1465	d0 04		bne $146b		bne _canDoRight
2168	.1467	a9 40		lda #$40			lda #$40		 ; can't do right on Overflow
2169	.1469	85 12		sta $12				sta ZPTemp4
2170	.146b					_canDoRight
2171	.146b					END_LEFT_RIGHT_CHECK
2172	.146b	a9 07		lda #$07		lda #1+2+4 ; first 3 are empty ( it is inverted later)
2173	.146d	85 11		sta $11			sta ZPTemp3
2174	.146f	a4 0f		ldy $0f			ldy ZPTemp
2175	.1471	c0 10		cpy #$10		cpy #kTileXCount
2176	.1473	90 2b		bcc $14a0		bcc _doneFirstRow ; if it is the first row than ALL of above is not solid
2177	.1475	64 11		stz $11				stz ZPTemp3
2178	.1477	98		tya				tya
2179								;sec ;from bcc above
2180	.1478	e9 11		sbc #$11			sbc #kTileXCount+1 ; so get -1x,-1y
2181	.147a	85 10		sta $10				sta ZPTemp2
2182	.147c	a8		tay				tay
2183	.147d	24 12		bit $12				bit ZPTemp4 ; test to see if we can do right
2184	.147f	30 07		bmi $1488			bmi _noB	; no then skip B
2185	.1481	20 31 14	jsr $1431				jsr tileIsWall
2186	.1484	26 11		rol $11					rol ZPTemp3
2187	.1486	80 03		bra $148b				bra _testC
2188	.1488						_noB
2189	.1488	38		sec				sec			; if there is no B then make it clear
2190	.1489	26 11		rol $11				rol ZPTemp3
2191	.148b						_testC
2192	.148b	c8		iny				iny
2193	.148c	20 31 14	jsr $1431			jsr tileIsWall
2194	.148f	26 11		rol $11				rol ZPTemp3
2195	.1491	c8		iny				iny
2196	.1492	24 12		bit $12				bit ZPTemp4
2197	.1494	70 07		bvs $149d			bvs _noRight
2198	.1496	20 31 14	jsr $1431				jsr tileIsWall
2199	.1499	26 11		rol $11					rol ZPTemp3
2200	.149b	80 03		bra $14a0				bra _doneFirstRow
2201	.149d						_noRight
2202	.149d	38		sec				sec ; make it as 1 so it gets 0 later
2203	.149e	26 11		rol $11				rol ZPTemp3
2204	.14a0					_doneFirstRow
2205	.14a0	24 12		bit $12			bit ZPTemp4
2206	.14a2	30 0a		bmi $14ae		bmi _noE ; check negative flag
2207	.14a4	a4 0f		ldy $0f				ldy ZPTemp
2208	.14a6	88		dey				dey
2209	.14a7	20 31 14	jsr $1431			jsr tileIsWall
2210	.14aa	26 11		rol $11				rol ZPTemp3
2211	.14ac	80 03		bra $14b1			bra DoIndexCheck
2212	.14ae					_noE
2213	.14ae	38		sec			sec ; make it 1 so it gets 0 later
2214	.14af	26 11		rol $11			rol ZPTemp3
2215	.14b1					DoIndexCheck
2216	.14b1	a5 11		lda $11			lda ZPTemp3
2217	.14b3	49 0f		eor #$0f		eor #$0F ;
2218	.14b5	a8		tay			tay
2219	.14b6					BCDEYVALUECHECK
2220	.14b6	b9 d2 14	lda $14d2,y		lda BCDELUT,y
2221	.14b9	30 06		bmi $14c1		bmi _checkH
2222	.14bb						_writeMap
2223	.14bb	a4 0f		ldy $0f				ldy ZPTemp
2224	.14bd	99 00 a2	sta $a200,y			sta tileMapTemp,y
2225	.14c0	60		rts				rts
2226	.14c1					_checkH
2227	.14c1	a5 0f		lda $0f			lda ZPTemp
2228	.14c3	18		clc			clc
2229	.14c4	69 10		adc #$10		adc #kTileXCount
2230	.14c6	a8		tay			tay
2231	.14c7	20 31 14	jsr $1431		jsr tileIsWall
2232	.14ca	b0 02		bcs $14ce		bcs _HNotWall
2233	.14cc	a9 00		lda #$00			lda #kTiles.back
2234	.14ce					_HNotWall
2235	.14ce	a9 25		lda #$25		lda #kTiles.sideShadow
2236	.14d0	80 e9		bra $14bb		bra _writeMap

2238	>14d2	00				BCDELUT	.byte $00							; 0000
2239	>14d3	25						.byte kTiles.sideShadow				; 0001
2240	>14d4	00						.byte $00								; 0010
2241	>14d5	25						.byte kTiles.sideShadow				; 0011
2242	>14d6	22						.byte kTiles.underHangStart		; 0100
2243	>14d7	27						.byte kTiles.topLeftCorner			; 0101
2244	>14d8	22						.byte kTiles.underHangStart		; 0110
2245	>14d9	25						.byte kTiles.sideShadow				; 0111
2246	>14da	24						.byte kTiles.shadowOpenCorner		; 1000
2247	>14db	26						.byte kTiles.middlesideShadow		; 1001
2248	>14dc	24						.byte kTiles.shadowOpenCorner		; 1010
2249	>14dd	25						.byte kTiles.sideShadow				; 1011
2250	>14de	23						.byte kTiles.underHang				; 1100
2251	>14df	27						.byte kTiles.topLeftCorner			; 1101
2252	>14e0	23						.byte kTiles.underHang				; 1110
2253	>14e1	27						.byte kTiles.topLeftCorner			; 1111

2255								; back
2256								;wall,wall1,wall2,wall3,wall4
2257								;spike,flower,fruit
2258								;key1,key2,key3,key4
2259								;shield,spring,potion,egg
2260								;exit,something,something,
2261								;diss + 13
2262	.14e2					toolToTileLUT
2263	>14e2	00					.byte 0
2264	>14e3	01 01 01 01 01				.byte 1,1,1,1,1
2265	>14e8	02 03 04				.byte 2,3,4
2266	>14eb	05 05 05 05				.byte 5,5,5,5
2267	>14ef	06 07 08 09				.byte 6,7,8,9
2268	>14f3	0a 0f 10				.byte 10,15,16
2269	>14f6	11 12 13 14 15 16 17 18			.byte 17,18,19,20,21,22,23,24,25,26,27,28,29,30 ; diss cont
	>14fe	19 1a 1b 1c 1d 1e
2270	>1504	1f 20 21 22 23 24			.byte 31,32,33,34,35,36

2272	.150a					kTiles .block
2273	=0						back = 0

2275	=1						wall = 1
2276	=2						wall1 = 2
2277						;	wall2 = 3
2278						;	wall3 = 4
2279	=5						wall4 = 5

2281	=6						spike = 6
2282	=7						flower = 7
2283	=8						fruit = 8

2285	=9						key1 = 9
2286	=10						key2 = 10
2287	=11						key3 = 11
2288	=12						key4 = 12

2290	=13						shield = 13
2291	=14						spring = 14
2292	=15						potion = 15
2293	=16						egg = 16

2295	=17						exit = 17
2296	=18						player = 18

2298	=19						pipe = 19
2299	=20						diss = 20
2300	=33						dissNoColide = 33

2302	=34						underHangStart = 34
2303	=35						underHang = 35
2304	=36						shadowOpenCorner = 36
2305	=37						sideShadow = 37
2306	=38						middlesideShadow = 38
2307	=39						topLeftCorner = 39
2308	=37						intermissionOldWall = 37; 40 37 is the looked up value
2309						.bend
2310	=10					kDoorClosed = 10
2311	=14					kDoorOpen = 14

2313	=7					kKeyToWallDelta = kTiles.key1 - kTiles.wall1
2314						; }}}
2315						; {{{
2316	.150a					plotTileMap
2317	.150a	78		sei				sei
2318	.150b	86 06		stx $06				stx Pointer1.lo
2319	.150d	84 07		sty $07				sty Pointer1.hi
2320	.150f	9c 25 9f	stz $9f25			stz kVERA.CTRL
2321	.1512	a9 10		lda #$10			lda #`kVRAM.gameScreen | kVERA.inc_1
2322	.1514	8d 22 9f	sta $9f22			sta kVERA.ADDR_Hi
2323	.1517	a9 0a		lda #$0a			lda #kDoorClosed
2324	.1519	8d 23 a0	sta $a023			sta LevelData.exitFrame
2325	.151c	a9 00		lda #$00			lda # <kVRAM.gameScreen
2326	.151e	85 08		sta $08				sta Pointer2
2327	.1520	a9 10		lda #$10			lda # >kVRAM.gameScreen
2328	.1522	85 09		sta $09				sta Pointer2+1
2329	.1524	a9 0c		lda #$0c			lda #kTileYCount ; num rows
2330	.1526	48		pha				pha
2331	.1527	a0 00		ldy #$00	_pltY	ldy #00 ; num cols
2332	.1529	98		tya				tya
2333	.152a	48		pha				pha
2334	.152b	b1 06		lda ($06),y	_pltX	lda (Pointer1),y ; tile num
2335	.152d	aa		tax				tax
2336	.152e	bd e2 14	lda $14e2,x			lda toolToTileLUT,x ; convert map to actual tile
2337	.1531	20 6d 15	jsr $156d			jsr renderTile
2338	.1534	18		clc				clc
2339	.1535	a5 08		lda $08				lda Pointer2.lo
2340	.1537	69 04		adc #$04			adc #4
2341	.1539	85 08		sta $08				sta Pointer2.lo
2342	.153b	90 02		bcc $153f			bcc +
2343	.153d	e6 09		inc $09					inc Pointer2.hi
2344	.153f	68		pla			+	pla
2345	.1540	18		clc				clc
2346	.1541	69 01		adc #$01			adc #1
2347	.1543	48		pha				pha
2348	.1544	a8		tay				tay
2349	.1545	c0 10		cpy #$10			cpy #kTileXCount
2350	.1547	d0 e2		bne $152b			bne _pltX
2351	.1549	68		pla				pla
2352	.154a	18		clc				clc
2353	.154b	a5 06		lda $06				lda Pointer1.lo
2354	.154d	69 10		adc #$10			adc #kTileXCount
2355	.154f	85 06		sta $06				sta Pointer1.lo
2356	.1551	a5 07		lda $07				lda Pointer1.hi
2357	.1553	69 00		adc #$00			adc #00
2358	.1555	85 07		sta $07				sta Pointer1.hi
2359	.1557	68		pla				pla
2360	.1558	38		sec				sec
2361	.1559	e9 01		sbc #$01			sbc #1
2362	.155b	f0 0e		beq $156b			beq _exit
2363	.155d	48		pha				pha
2364	.155e	18		clc				clc
2365	.155f	a5 08		lda $08				lda Pointer2.lo
2366								; so we are at the end of the first line so +32
2367								; we need to get to the start of the line 2 below
2368								; so we need to move to the next line, 64 wide * 2
2369								; so + 128, however the screen is 40 visible not 32
2370								; so we need to add * more chars * 2 so + 16
2371								; but then the screen is not 40 wide its 64 wide
2372								; so we need to also add the extra stride which is
2373								; 128-80 (64-40*2)
2374	.1561	69 c0		adc #$c0			adc #128+16+128-80 ;48
2375	.1563	85 08		sta $08				sta Pointer2.lo
2376	.1565	90 02		bcc $1569			bcc +
2377	.1567	e6 09		inc $09					inc Pointer2.hi
2378	.1569	80 bc		bra $1527	+		gra _pltY
2379	.156b					_exit
2380	.156b	58		cli			cli
2381	.156c	60		rts			rts

2383						; a = tile num, Pointer2 = Screen, Pointer 3 = CRAM
2384	.156d					renderTile
2385	.156d	85 0c		sta $0c				sta Pointer4
2386	.156f	a5 08		lda $08				lda Pointer2.lo
2387	.1571	8d 20 9f	sta $9f20			sta kVERA.ADDR_Lo
2388	.1574	a5 09		lda $09				lda Pointer2.hi
2389	.1576	8d 21 9f	sta $9f21			sta kVERA.ADDR_Mid ; set the start

2391	.1579	64 0d		stz $0d				stz Pointer4+1
2392	.157b	06 0c		asl $0c				asl Pointer4
2393	.157d	26 0d		rol $0d				rol Pointer4+1
2394	.157f	06 0c		asl $0c				asl Pointer4	 ; tile num x 4
2395	.1581	26 0d		rol $0d				rol Pointer4+1
2396								; covert to tiles offset
2397	.1583	18		clc				clc
2398	.1584	a5 0c		lda $0c				lda Pointer4
2399	.1586	69 b3		adc #$b3			adc # <fileTiles
2400	.1588	85 0c		sta $0c				sta Pointer4
2401	.158a	a5 0d		lda $0d				lda Pointer4+1
2402	.158c	69 53		adc #$53			adc # >fileTiles
2403	.158e	85 0d		sta $0d				sta Pointer4+1
2404	.1590	b2 0c		lda ($0c)			lda (Pointer4)
2405	.1592	8d 23 9f	sta $9f23			sta kVERA.DATA_0
2406	.1595	9c 23 9f	stz $9f23			stz kVERA.DATA_0 ; the CRAM value
2407	.1598	a0 01		ldy #$01			ldy #1
2408	.159a	b1 0c		lda ($0c),y			lda (Pointer4),y
2409	.159c	8d 23 9f	sta $9f23			sta kVERA.DATA_0
2410	.159f	9c 23 9f	stz $9f23			stz kVERA.DATA_0 ; the CRAM value
2411	.15a2	c8		iny				iny
2412	.15a3	ad 20 9f	lda $9f20			lda kVERA.ADDR_Lo
2413	.15a6	18		clc				clc
2414	.15a7	69 7c		adc #$7c			adc #128-4 ; next line - 1 char
2415	.15a9	8d 20 9f	sta $9f20			sta kVERA.ADDR_Lo
2416	.15ac	90 03		bcc $15b1			bcc +
2417	.15ae	ee 21 9f	inc $9f21				inc kVERA.ADDR_Mid
2418	.15b1					+
2419	.15b1	b1 0c		lda ($0c),y			lda (Pointer4),y
2420	.15b3	8d 23 9f	sta $9f23			sta kVERA.DATA_0
2421	.15b6	9c 23 9f	stz $9f23			stz kVERA.DATA_0 ; the CRAM value
2422	.15b9	c8		iny				iny
2423	.15ba	b1 0c		lda ($0c),y			lda (Pointer4),y
2424	.15bc	8d 23 9f	sta $9f23			sta kVERA.DATA_0
2425	.15bf	9c 23 9f	stz $9f23			stz kVERA.DATA_0 ; the CRAM value
2426	.15c2	60		rts				rts

2428	.15c3					scanJoystick
2429	.15c3	a2 04		ldx #$04			ldx #4
2430	.15c5	bd 00 a0	lda $a000,x	-		lda joyLeft,x
2431	.15c8	9d 05 a0	sta $a005,x			sta oldJoyLeft,x
2432	.15cb	a9 00		lda #$00			lda #0
2433	.15cd	9d 00 a0	sta $a000,x			sta joyLeft,x
2434	.15d0	ca		dex				dex
2435	.15d1	10 f2		bpl $15c5			bpl -
2436	.15d3	a2 01		ldx #$01			ldx #1
2437	.15d5	ad bc 02	lda $02bc			lda JOY1
2438	.15d8	4a		lsr a				lsr a
2439	.15d9	90 4e		bcc $1629			bcc _joyRight
2440	.15db	4a		lsr a					lsr a
2441	.15dc	90 46		bcc $1624				bcc _joyLeft
2442	.15de					_checkUD
2443	.15de	4a		lsr a				lsr a
2444	.15df	90 3d		bcc $161e			bcc _joyDown
2445	.15e1	4a		lsr a					lsr a
2446	.15e2	90 30		bcc $1614				bcc _joyUp
2447	.15e4					_checkFire
2448	.15e4	4a		lsr a				lsr a; start
2449	.15e5	4a		lsr a				lsr a; select
2450	.15e6	4a		lsr a				lsr a ; B
2451	.15e7	90 30		bcc $1619			bcc _joyB
2452	.15e9					_checkA
2453	.15e9	4a		lsr a				lsr a ; A
2454	.15ea	b0 03		bcs $15ef			bcs _joyEnd
2455	.15ec	8e 04 a0	stx $a004				stx joyFire
2456	.15ef					_joyEnd
2457	.15ef	ad 07 a0	lda $a007			lda oldJoyUp
2458	.15f2	4d 02 a0	eor $a002			eor joyUp
2459	.15f5	2d 02 a0	and $a002			and joyUp
2460	.15f8	8d 0a a0	sta $a00a			sta joyUpStart
2461	.15fb	ad 02 a0	lda $a002			lda joyUp
2462	.15fe	4d 07 a0	eor $a007			eor OldJoyUp
2463	.1601	2d 07 a0	and $a007			and OldJoyUp
2464	.1604	8d 0b a0	sta $a00b			sta joyUpStop
2465	.1607	ad 09 a0	lda $a009			lda oldJoyFire
2466	.160a	4d 04 a0	eor $a004			eor joyFire
2467	.160d	2d 04 a0	and $a004			and joyFire
2468	.1610	8d 0c a0	sta $a00c			sta joyFireEvent
2469	.1613	60		rts				rts

2471	.1614					_joyUp
2472	.1614	8e 02 a0	stx $a002			stx joyUp
2473	.1617	90 cb		bcc $15e4			gcc _checkFire
2474	.1619					_joyB
2475	.1619	8e 02 a0	stx $a002			stx joyUp
2476	.161c	90 cb		bcc $15e9			gcc _checkA

2478	.161e					_joyDown
2479	.161e	8e 03 a0	stx $a003			stx joyDown
2480	.1621	4a		lsr a				lsr a ; skip up bit
2481	.1622	80 c0		bra $15e4			bra _checkFire

2483	.1624					_joyLeft
2484	.1624	8e 00 a0	stx $a000			stx joyLeft
2485	.1627	90 b5		bcc $15de			gcc _checkUD

2487	.1629					_joyRight
2488	.1629	8e 01 a0	stx $a001			stx joyRight
2489	.162c	4a		lsr a				lsr a; skip left bit
2490	.162d	80 af		bra $15de			bra _checkUD


2493	>162f	02 02 02 04 00 e8 0c 04		CollisionBoxesX .byte 02,02,02,04,00,$e8,12,04 ; $e8 = -24
2494	>1637	0d 0d 0d 10 30 30 01 10		CollisionBoxesW .byte 13,13,13,16,48, 48,01,16
2495	>163f	02 02 00 04 00 0c 0c 01		CollisionBoxesY .byte 02,02,00,04,00, 12,12,01
2496	>1647	0c 10 14 10 0c 1e 01 08		CollisionBoxesH .byte 12,16,20,16,12, 30,01,08


2499	.164f					convertXSingleByteEntX
2500	.164f	bd 30 a3	lda $a330,x		lda mplexBuffer.xpos,x
2501						; this should not be needed on cx16
2502						; one the 64 I got arround the 24-280, by using the fact the player
2503						; can only be on screen on the X and must be stopped at 256 visible pixels
2504						; thus I could slide the 9 bits down to 8 to make life easier
2505						; the cx16 doesn't have a side border so 0 is the first visible pixel
2506	.1652	60		rts			rts

2508	.1653					newCollision
2509	.1653	a6 1d		ldx $1d			ldx CollideSpriteToCheck
2510	.1655	a4 1e		ldy $1e			ldy CollideSpriteBoxIndex
2511							; calc the final Xs
2512	.1657	20 4f 16	jsr $164f		jsr convertXSingleByteEntX
2513	.165a	18		clc			clc
2514	.165b	79 2f 16	adc $162f,y		adc CollisionBoxesX,y
2515	.165e	6d f5 a1	adc $a1f5		adc checkSpriteToCharData.xDeltaCheck
2516	.1661	85 27		sta $27			sta CollideInternalSprTLX
2517	.1663	18		clc			clc
2518	.1664	79 37 16	adc $1637,y		adc CollisionBoxesW,y
2519	.1667	85 28		sta $28			sta CollideInternalSprBRX
2520							; calc the final Ys
2521	.1669	bd 70 a3	lda $a370,x		lda mplexBuffer.ypos,x
2522	.166c	18		clc			clc
2523	.166d	79 3f 16	adc $163f,y		adc CollisionBoxesY,y
2524	.1670	6d f6 a1	adc $a1f6		adc checkSpriteToCharData.yDeltaCheck
2525	.1673	20 d3 16	jsr $16d3		jsr ClipY
2526	.1676	85 29		sta $29			sta CollideInternalSprTLY
2527	.1678	18		clc			clc
2528	.1679	79 47 16	adc $1647,y		adc CollisionBoxesH,y
2529	.167c	20 d3 16	jsr $16d3		jsr ClipY
2530	.167f	85 2a		sta $2a			sta CollideInternalSprBRY
2531							; calc the tile index
2532	.1681	a2 01		ldx #$01		ldx #1
2533	.1683	b5 27		lda $27,x	-	lda CollideInternalSprTLX,x
2534	.1685	4a		lsr a			lsr a
2535	.1686	4a		lsr a			lsr a
2536	.1687	4a		lsr a			lsr a
2537	.1688	4a		lsr a			lsr a
2538	.1689	95 2b		sta $2b,x		sta CollideInternalTTLX,x
2539	.168b	ca		dex			dex
2540	.168c	10 f5		bpl $1683		bpl -
2541	.168e	a5 2b		lda $2b			lda CollideInternalTTLX
2542	.1690	c5 2c		cmp $2c			cmp CollideInternalTBRX ; make sure right has not wrapped and is not < left
2543	.1692	90 02		bcc $1696		bcc +
2544	.1694	85 2c		sta $2c				sta CollideInternalTBRX
2545	.1696					+
2546	.1696	a5 29		lda $29			lda CollideInternalSprTLY
2547	.1698	29 f0		and #$f0		and #$f0
2548	.169a	85 2d		sta $2d			sta CollideInternalTTLY
2549	.169c	a5 2a		lda $2a			lda CollideInternalSprBRY
2550	.169e	29 f0		and #$f0		and #$f0
2551	.16a0	85 2e		sta $2e			sta CollideInternalTBRY
2552							; covert the tile X,Y into a the index and pull Char
2553	.16a2	a5 2d		lda $2d			lda CollideInternalTTLY
2554	.16a4	05 2b		ora $2b			ora CollideInternalTTLX
2555	.16a6	85 1f		sta $1f			sta CollideCharTLI
2556	.16a8	aa		tax			tax
2557	.16a9	bd 00 a2	lda $a200,x		lda tileMapTemp,x
2558	.16ac	85 20		sta $20			sta CollideCharTLC

2560	.16ae	a5 2d		lda $2d			lda CollideInternalTTLY
2561	.16b0	05 2c		ora $2c			ora CollideInternalTBRX
2562	.16b2	85 21		sta $21			sta CollideCharTRI
2563	.16b4	aa		tax			tax
2564	.16b5	bd 00 a2	lda $a200,x		lda tileMapTemp,x
2565	.16b8	85 22		sta $22			sta CollideCharTRC

2567	.16ba	a5 2e		lda $2e			lda CollideInternalTBRY
2568	.16bc	05 2b		ora $2b			ora CollideInternalTTLX
2569	.16be	85 23		sta $23			sta CollideCharBLI
2570	.16c0	aa		tax			tax
2571	.16c1	bd 00 a2	lda $a200,x		lda tileMapTemp,x
2572	.16c4	85 24		sta $24			sta CollideCharBLC

2574	.16c6	a5 2e		lda $2e			lda CollideInternalTBRY
2575	.16c8	05 2c		ora $2c			ora CollideInternalTBRX
2576	.16ca	85 25		sta $25			sta CollideCharBRI
2577	.16cc	aa		tax			tax
2578	.16cd	bd 00 a2	lda $a200,x		lda tileMapTemp,x
2579	.16d0	85 26		sta $26			sta CollideCharBRC
2580	.16d2	60		rts			rts

2582	.16d3					ClipY
2583	.16d3	c9 d0		cmp #$d0		cmp #208
2584	.16d5	b0 01		bcs $16d8		bcs +
2585	.16d7	60		rts				rts ; 0 - 192 = safe 192-208 = shared 16 off screen
2586	.16d8	c9 f0		cmp #$f0	+	cmp #240
2587	.16da	90 03		bcc $16df		bcc _bottomOfScreen
2588								; top of screen
2589	.16dc	a9 c1		lda #$c1			lda #193
2590	.16de	60		rts				rts
2591	.16df					_bottomOfScreen
2592	.16df	a9 d0		lda #$d0		lda #208
2593	.16e1	60		rts			rts

2595	.16e2					checkSpriteToCharCollision
2596	.16e2	ad f6 a1	lda $a1f6		lda checkSpriteToCharData.yDeltaCheck
2597	.16e5	8d f8 a1	sta $a1f8		sta checkSpriteToCharData.yDeltaBackup
2598	.16e8	ad f5 a1	lda $a1f5		lda checkSpriteToCharData.xDeltaCheck
2599	.16eb	8d f7 a1	sta $a1f7		sta checkSpriteToCharData.xDeltaBackup
2600	.16ee	9c f5 a1	stz $a1f5		stz checkSpriteToCharData.xDeltaCheck
2601	.16f1	64 1d		stz $1d			stz CollideSpriteToCheck
2602	.16f3	64 1e		stz $1e			stz CollideSpriteBoxIndex
2603	.16f5	20 56 17	jsr $1756		jsr CSTCCY
2604	.16f8	a5 23		lda $23			lda CollideCharBLI
2605	.16fa	85 15		sta $15			sta ActiveTileIndex
2606	.16fc	a5 24		lda $24			lda CollideCharBLC
2607	.16fe	85 16		sta $16			sta ActiveTile
2608	.1700	20 07 18	jsr $1807		jsr checkOnDissTile
2609	.1703	a5 23		lda $23			lda CollideCharBLI
2610	.1705	c5 25		cmp $25			cmp CollideCharBRI
2611	.1707	f0 0b		beq $1714		beq _otherIsSame
2612	.1709	a5 25		lda $25				lda CollideCharBRI
2613	.170b	85 15		sta $15				sta ActiveTileIndex
2614	.170d	a5 26		lda $26				lda CollideCharBRC
2615	.170f	85 16		sta $16				sta ActiveTile
2616	.1711	20 07 18	jsr $1807			jsr checkOnDissTile
2617	.1714					_otherIsSame
2618	.1714	ad f7 a1	lda $a1f7		lda checkSpriteToCharData.xDeltaBackup
2619	.1717	8d f5 a1	sta $a1f5		sta checkSpriteToCharData.xDeltaCheck
2620	.171a	9c f6 a1	stz $a1f6		stz checkSpriteToCharData.yDeltaCheck
2621	.171d	20 c3 17	jsr $17c3		jsr CSTCCX
2622	.1720	ad f8 a1	lda $a1f8		lda checkSpriteToCharData.yDeltaBackup
2623	.1723	8d f6 a1	sta $a1f6		sta checkSpriteToCharData.yDeltaCheck
2624	.1726	a6 1f		ldx $1f			ldx CollideCharTLI
2625	.1728	a5 20		lda $20			lda CollideCharTLC
2626	.172a	20 59 18	jsr $1859		jsr checkActionTile
2627	.172d	a5 21		lda $21			lda CollideCharTRI
2628	.172f	c5 1f		cmp $1f			cmp CollideCharTLI
2629	.1731	f0 06		beq $1739		beq _skipTR
2630	.1733	aa		tax				tax
2631	.1734	a5 22		lda $22				lda CollideCharTRC
2632	.1736	20 59 18	jsr $1859			jsr checkActionTile
2633	.1739					_skipTR
2634	.1739	a5 23		lda $23			lda CollideCharBLI
2635	.173b	c5 1f		cmp $1f			cmp CollideCharTLI
2636	.173d	f0 06		beq $1745		beq _skipBL
2637	.173f	aa		tax				tax
2638	.1740	a5 24		lda $24				lda CollideCharBLC
2639	.1742	20 59 18	jsr $1859			jsr checkActionTile
2640	.1745					_skipBL
2641	.1745	a5 25		lda $25			lda CollideCharBRI
2642	.1747	c5 21		cmp $21			cmp CollideCharTRI
2643	.1749	f0 0a		beq $1755		beq _skipBR
2644	.174b	c5 23		cmp $23				cmp CollideCharBLI
2645	.174d	f0 06		beq $1755			beq _skipBR
2646	.174f	aa		tax					tax
2647	.1750	a5 26		lda $26					lda CollideCharBRC
2648	.1752	20 59 18	jsr $1859				jsr checkActionTile
2649	.1755					_skipBR
2650	.1755	60		rts			rts

2652	.1756					CSTCCY
2653	.1756	a2 00		ldx #$00		ldx #0
2654	.1758	86 0f		stx $0f			stx ZPTemp
2655	.175a	86 10		stx $10			stx ZPTemp2
2656	.175c	86 11		stx $11			stx ZPTemp3
2657	.175e	86 12		stx $12			stx ZPTemp4
2658	.1760	a0 00		ldy #$00		ldy #0
2659	.1762	20 53 16	jsr $1653		jsr newCollision
2660	.1765	a5 20		lda $20			lda CollideCharTLC
2661	.1767	20 c2 1a	jsr $1ac2		jsr checkSolidTile
2662	.176a	26 0f		rol $0f			rol ZPTemp
2663	.176c	a5 22		lda $22			lda CollideCharTRC
2664	.176e	20 c2 1a	jsr $1ac2		jsr checkSolidTile
2665	.1771	26 10		rol $10			rol ZPTemp2
2666	.1773	a5 24		lda $24			lda CollideCharBLC
2667	.1775	20 c2 1a	jsr $1ac2		jsr checkSolidTile
2668	.1778	26 11		rol $11			rol ZPTemp3
2669	.177a	a5 26		lda $26			lda CollideCharBRC
2670	.177c	20 c2 1a	jsr $1ac2		jsr checkSolidTile
2671	.177f	26 12		rol $12			rol ZPTemp4
2672	.1781	ad f6 a1	lda $a1f6		lda checkSpriteToCharData.yDeltaCheck
2673	.1784	10 27		bpl $17ad		bpl _checkDown
2674							; check up
2675	.1786	a5 0f		lda $0f			lda ZPTemp
2676	.1788	05 10		ora $10			ora ZPTemp2
2677	.178a	f0 36		beq $17c2		beq _exit
2678							; abort jump
2679	.178c	ad 40 a0	lda $a040		lda PlayerData.hitBubbleNum
2680	.178f	f0 04		beq $1795		beq _startFall
2681	.1791	9c f8 a1	stz $a1f8			stz checkSpriteToCharData.yDeltaBackup
2682	.1794	60		rts				rts
2683	.1795					_startFall
2684	.1795	a9 01		lda #$01		lda #1
2685	.1797	8d 2b a0	sta $a02b		sta PlayerData.isFalling
2686	.179a	1a		inc a			inc a ;  #2
2687	.179b	8d 2e a0	sta $a02e		sta PlayerData.yDeltaAccum
2688	.179e	8d 2f a0	sta $a02f		sta PlayerData.yDeltaAccum+1
2689	.17a1	60		rts			rts
2690	.17a2					_onGround
2691	.17a2	9c f8 a1	stz $a1f8		stz checkSpriteToCharData.yDeltaBackup
2692	.17a5	20 0d 10	jsr $100d		jsr enterOnGround
2693	.17a8	9c f6 a1	stz $a1f6		stz checkSpriteToCharData.yDeltaCheck
2694	.17ab	80 15		bra $17c2		bra _exit
2695	.17ad					_checkDown
2696	.17ad	ad 40 a0	lda $a040		lda PlayerData.hitBubbleNum
2697	.17b0	d0 10		bne $17c2		bne _exit
2698	.17b2	a5 11		lda $11				lda ZPTemp3
2699	.17b4	05 12		ora $12				ora ZPTemp4
2700	.17b6	d0 ea		bne $17a2			bne _onGround
2701	.17b8	ae 29 a0	ldx $a029				ldx PlayerData.onGround
2702	.17bb	9c 29 a0	stz $a029				stz PlayerData.onGround
2703	.17be	e0 01		cpx #$01				cpx #1
2704	.17c0	f0 d3		beq $1795				beq _startFall
2705	.17c2					_exit
2706	.17c2	60		rts			rts

2708	.17c3					CSTCCX
2709	.17c3	a2 00		ldx #$00		ldx #0
2710	.17c5	86 0f		stx $0f			stx ZPTemp
2711	.17c7	86 10		stx $10			stx ZPTemp2
2712	.17c9	86 11		stx $11			stx ZPTemp3
2713	.17cb	86 12		stx $12			stx ZPTemp4
2714	.17cd	a0 00		ldy #$00		ldy #0
2715	.17cf	20 53 16	jsr $1653		jsr newCollision
2716	.17d2	a5 20		lda $20			lda CollideCharTLC
2717	.17d4	20 c2 1a	jsr $1ac2		jsr checkSolidTile
2718	.17d7	26 0f		rol $0f			rol ZPTemp
2719	.17d9	a5 22		lda $22			lda CollideCharTRC
2720	.17db	20 c2 1a	jsr $1ac2		jsr checkSolidTile
2721	.17de	26 10		rol $10			rol ZPTemp2
2722	.17e0	a5 24		lda $24			lda CollideCharBLC
2723	.17e2	20 c2 1a	jsr $1ac2		jsr checkSolidTile
2724	.17e5	26 11		rol $11			rol ZPTemp3
2725	.17e7	a5 26		lda $26			lda CollideCharBRC
2726	.17e9	20 c2 1a	jsr $1ac2		jsr checkSolidTile
2727	.17ec	26 12		rol $12			rol ZPTemp4
2728	.17ee	ad f5 a1	lda $a1f5		lda checkSpriteToCharData.xDeltaCheck
2729	.17f1	f0 13		beq $1806		beq _exit
2730	.17f3	10 0b		bpl $1800		bpl _checkRight
2731								; left
2732	.17f5	a5 0f		lda $0f				lda ZPtemp
2733	.17f7	05 11		ora $11				ora ZPtemp3
2734	.17f9	f0 0b		beq $1806			beq _exit
2735	.17fb					_noX
2736	.17fb	9c f5 a1	stz $a1f5		stz checkSpriteToCharData.xDeltaCheck
2737	.17fe	80 06		bra $1806		bra _exit
2738	.1800					_checkRight
2739	.1800	a5 10		lda $10			lda ZPtemp2
2740	.1802	05 12		ora $12			ora ZPtemp4
2741	.1804	d0 f5		bne $17fb		bne _noX
2742	.1806					_exit
2743	.1806	60		rts			rts


2746	.1807					checkOnDissTile
2747	.1807	ad 29 a0	lda $a029		lda PlayerData.onGround
2748	.180a	d0 01		bne $180d		bne _c
2749	.180c					_exit
2750	.180c	60		rts			rts
2751							; get the tile below the player
2752	.180d	ad 43 a0	lda $a043	_c	lda TickDowns.dissBlocks
2753	.1810	d0 fa		bne $180c		bne _exit
2754	.1812	a5 16		lda $16				lda ActiveTile
2755	.1814	c9 14		cmp #$14			cmp #kTiles.diss
2756	.1816	90 f4		bcc $180c			bcc _exit
2757	.1818	c9 21		cmp #$21				cmp #kTiles.dissNoColide
2758	.181a	b0 f0		bcs $180c				bcs _exit
2759	.181c	a9 08		lda #$08					lda #kTimers.dissBlocksValue
2760	.181e	8d 43 a0	sta $a043					sta TickDowns.dissBlocks
2761	.1821	a6 15		ldx $15						ldx ActiveTileIndex
2762	.1823	fe 00 a2	inc $a200,x					inc tileMapTemp,x
2763	.1826	bd 00 a2	lda $a200,x					lda tileMapTemp,x
2764	.1829	c9 20		cmp #$20					cmp #kTiles.dissNoColide-1
2765	.182b	08		php						php
2766	.182c	20 1a 1a	jsr $1a1a					jsr pltSingleTileNew
2767	.182f	28		plp						plp
2768	.1830	d0 da		bne $180c					bne _exit
2769	.1832					CheckForShadowPlots
2770	.1832	a2 01		ldx #$01		ldx #1
2771	.1834	20 3e 18	jsr $183e		jsr _checkRemoveTile
2772	.1837	a2 10		ldx #$10		ldx #16
2773	.1839	20 3e 18	jsr $183e		jsr _checkRemoveTile
2774	.183c	a2 11		ldx #$11		ldx #17
2775						;	jmp _checkRemoveTile
2776	.183e					_checkRemoveTile
2777	.183e	86 0f		stx $0f			stx ZPTemp
2778	.1840	a5 15		lda $15			lda ActiveTileIndex
2779	.1842	48		pha			pha
2780	.1843	18		clc			clc
2781	.1844	65 0f		adc $0f			adc ZPTemp
2782	.1846	c9 c0		cmp #$c0		cmp #kLevelSizeMax
2783	.1848	b0 0b		bcs $1855		bcs _exit2
2784	.184a	85 15		sta $15				sta ActiveTileIndex
2785	.184c	a8		tay				tay
2786	.184d	20 42 14	jsr $1442			jsr tileIsSafeToChange
2787	.1850	90 03		bcc $1855			bcc _exit2
2788	.1852	20 08 1a	jsr $1a08				jsr clearTileNew
2789	.1855					_exit2
2790	.1855	68		pla			pla
2791	.1856	85 15		sta $15			sta ActiveTileIndex
2792	.1858	60		rts			rts

2794	.1859					checkActionTile
2795	.1859	85 16		sta $16			sta ActiveTile ; for later
2796	.185b	86 15		stx $15			stx ActiveTileIndex ; for later
2797	.185d	a0 00		ldy #$00		ldy #0
2798	.185f	d9 73 18	cmp $1873,y	-	cmp TileFuncLookup,y
2799	.1862	f0 06		beq $186a		beq _found
2800	.1864	c8		iny				iny
2801	.1865	c0 0c		cpy #$0c			cpy # size(TileFuncLookup)
2802	.1867	d0 f6		bne $185f			bne -
2803	.1869	60		rts				rts

2805	.186a					_found
2806	.186a	b9 8b 18	lda $188b,y		lda TileFuncLUTHi,y
2807	.186d	48		pha			pha
2808	.186e	b9 7f 18	lda $187f,y		lda TileFuncLUTLo,y
2809	.1871	48		pha			pha
2810	.1872	60		rts			rts

2812	>1873	08 07 09 0a 0b 0c 06 0e		TileFuncLookup .byte kTiles.fruit,kTiles.flower,kTiles.key1,kTiles.key2,kTiles.key3,kTiles.key4,kTiles.spike,kTiles.spring,kTiles.potion,kTiles.shield,kTiles.exit,kTiles.egg
	>187b	0f 0d 11 10
2813	>187f	96 a3 c3 c3 c3 c3 f2 f8		TileFuncLUTLo .byte <fruitFunc-1 ,<flowerFunc-1,<keyFunc-1 ,<keyFunc-1 ,<keyFunc-1 ,<keyFunc-1 ,<spikeFunc-1,<springFunc-1,<potionFunc-1,<shildFunction-1,<exitFunc-1,<eggFunc-1
	>1887	09 30 5f 75
2814	>188b	18 18 18 18 18 18 18 18		TileFuncLUTHi .byte >fruitFunc-1 ,>flowerFunc-1,>keyFunc-1 ,>keyFunc-1 ,>keyFunc-1 ,>keyFunc-1 ,>spikeFunc-1,>springFunc-1,>potionFunc-1,>shildFunction-1,>exitFunc-1,>eggFunc-1
	>1893	19 19 19 19

2816	.1897					fruitFunc
2817	.1897	20 08 1a	jsr $1a08		jsr clearTileNew
2818	.189a	a9 00		lda #$00		lda #kScoreIndex.Fruit
2819	.189c	20 50 1a	jsr $1a50		jsr giveScore
2820	.189f	a2 02		ldx #$02		ldx #kSFX.collect
2821	.18a1	4c e7 19	jmp $19e7		jmp playSFX
2822							;rts ; above is now jmp

2824	.18a4					flowerFunc
2825	.18a4	20 08 1a	jsr $1a08		jsr clearTileNew
2826	.18a7	a9 00		lda #$00		lda #kScoreIndex.fruit
2827	.18a9	20 50 1a	jsr $1a50		jsr giveScore
2828	.18ac	a2 00		ldx #$00		ldx #kSFX.flower
2829	.18ae	20 e7 19	jsr $19e7		jsr playSFX
2830	.18b1	ee 0e a0	inc $a00e		inc GameData.flowers
2831	.18b4	ad 0e a0	lda $a00e		lda GameData.flowers
2832	.18b7	c9 08		cmp #$08		cmp #8
2833	.18b9	d0 06		bne $18c1		bne _exit
2834	.18bb	9c 0e a0	stz $a00e			stz GameData.flowers
2835	.18be	20 80 19	jsr $1980			jsr awardLife
2836	.18c1					_exit
2837	.18c1	4c 80 1b	jmp $1b80		jmp pltFlowers

2839	.18c4					keyFunc
2840	.18c4	20 08 1a	jsr $1a08		jsr clearTileNew		; remove it
2841	.18c7	a9 02		lda #$02		lda #kScoreIndex.key
2842	.18c9	20 50 1a	jsr $1a50		jsr giveScore
2843	.18cc	ce 1e a0	dec $a01e		dec LevelData.numKeys
2844	.18cf	a5 16		lda $16			lda ActiveTile
2845	.18d1	20 f7 19	jsr $19f7		jsr countTempMapTile	; do we have any more of these keys still
2846	.18d4	d0 08		bne $18de		bne _done				; yes
2847	.18d6	a5 16		lda $16				lda ActiveTile
2848	.18d8	38		sec				sec
2849	.18d9	e9 07		sbc #$07			sbc # kKeyToWallDelta
2850	.18db	20 30 1a	jsr $1a30			jsr removeAllTilesOf
2851	.18de					_done
2852	.18de	ad 1e a0	lda $a01e		lda LevelData.numKeys
2853	.18e1	c9 00		cmp #$00		cmp #0
2854	.18e3	f0 05		beq $18ea		beq _changeDoor
2855	.18e5	a2 02		ldx #$02			ldx #kSFX.collect
2856	.18e7	4c e7 19	jmp $19e7			jmp playSFX
2857							; rts ; above is now jmp
2858	.18ea					_changeDoor
2859	.18ea	a9 01		lda #$01		lda #1
2860	.18ec	8d 1c a0	sta $a01c		sta GameData.exitOpen
2861	.18ef	aa		tax			tax ; ldx #kSFX.door ;=1
2862	.18f0	4c e7 19	jmp $19e7		jmp playSFX
2863							; rts ; above is now jmp

2865	.18f3					spikeFunc
2866	.18f3	a9 01		lda #$01		lda #1
2867	.18f5	8d 25 a0	sta $a025		sta PlayerData.dead
2868	.18f8	60		rts			rts

2870	.18f9					springFunc
2871	.18f9	20 08 1a	jsr $1a08		jsr clearTileNew
2872	.18fc	a2 05		ldx #$05		ldx #kSFX.powerup
2873	.18fe	20 e7 19	jsr $19e7		jsr playSFX
2874	.1901	a9 01		lda #$01		lda #1
2875	.1903	8d 28 a0	sta $a028		sta PlayerData.hasSpring
2876	.1906	8d 27 a0	sta $a027		sta PlayerData.canFloat
2877	.1909	60		rts			rts

2879	.190a					potionFunc
2880	.190a	20 08 1a	jsr $1a08		jsr clearTileNew
2881	.190d	a2 00		ldx #$00		ldx #0
2882	.190f	86 15		stx $15			stx ActiveTileIndex
2883	.1911					_loop
2884	.1911	bd 00 a2	lda $a200,x		lda tileMapTemp,x
2885	.1914	c9 06		cmp #$06		cmp #kTiles.spike
2886	.1916	d0 08		bne $1920		bne _next
2887	.1918	a9 08		lda #$08			lda #kTiles.fruit
2888	.191a	9d 00 a2	sta $a200,x			sta tileMapTemp,x
2889	.191d	20 1a 1a	jsr $1a1a			jsr pltSingleTileNew
2890	.1920					_next
2891	.1920	a5 15		lda $15			lda ActiveTileIndex
2892	.1922	18		clc			clc
2893	.1923	69 01		adc #$01		adc #1
2894	.1925	85 15		sta $15			sta ActiveTileIndex
2895	.1927	aa		tax			tax
2896	.1928	c9 c0		cmp #$c0		cmp #kLevelSizeMax
2897	.192a	d0 e5		bne $1911		bne _loop
2898	.192c	a2 05		ldx #$05		ldx #kSFX.powerup
2899	.192e	4c e7 19	jmp $19e7		jmp playSFX
2900							;rts ; above is now jmp

2902	.1931					shildFunction
2903	.1931	20 08 1a	jsr $1a08		jsr clearTileNew
2904	.1934	a9 01		lda #$01		lda #1
2905	.1936	8d 26 a0	sta $a026		sta PlayerData.hasShield
2906	.1939	a2 05		ldx #$05		ldx #kSFX.powerup
2907	.193b	20 e7 19	jsr $19e7		jsr playSFX
2908							.comment
2932							.endc
2933						;	lda #14
2934						;	sta mplexBuffer.sprc
2935	.193e	a9 32		lda #$32		lda #50
2936	.1940	8d 48 a0	sta $a048		sta TickDowns.shieldFlashTimerSpeedUp
2937	.1943	a9 10		lda #$10		lda #16
2938	.1945	8d 42 a0	sta $a042		sta PlayerData.baseFlashTimeDelta
2939	.1948	60		rts			rts
2940						.comment
2946						.endc

2948	.1949					clearSheildState
2949	.1949	a9 5f		lda #$5f		lda # <justRTI ; yeah this doesn't work on the CX16
2950	.194b	8d fa ff	sta $fffa		sta $FFFA
2951	.194e	a9 19		lda #$19		lda # >justRTI
2952	.1950	8d fb ff	sta $fffb		sta $FFFB
2953	.1953	a9 00		lda #$00		lda #0
2954	.1955	8d 26 a0	sta $a026		sta PlayerData.hasShield
2955	.1958	8d 0d dd	sta $dd0d		sta $DD0D
2956						;	lda #7
2957						;	sta mplexBuffer.sprc
2958	.195b	ad 0d dd	lda $dd0d		lda $DD0D
2959	.195e	60		rts			rts
2960	.195f					justRTI
2961	.195f	40		rti			rti

2963	.1960					exitFunc
2964	.1960	ad 1c a0	lda $a01c		lda GameData.exitOpen
2965	.1963	f0 10		beq $1975		beq _notOpen
2966	.1965	9c 1c a0	stz $a01c			stz GameData.exitOpen
2967	.1968	a5 15		lda $15				lda ActiveTileIndex
2968	.196a	8d 3f a0	sta $a03f			sta PlayerData.exitAtIndex
2969	.196d	a9 04		lda #$04			lda #kPlayerState.exit
2970	.196f	8d 38 a0	sta $a038			sta PlayerData.state
2971	.1972	8d 39 a0	sta $a039			sta PlayerData.minorState
2972	.1975					_notOpen
2973	.1975	60		rts			rts

2975	.1976					eggFunc
2976	.1976	20 08 1a	jsr $1a08		jsr clearTileNew
2977	.1979	ee 3e a0	inc $a03e		inc PlayerData.bulletEgg
2978	.197c	a2 05		ldx #$05		ldx #kSFX.powerup
2979	.197e	80 67		bra $19e7		gra playSFX
2980							;rts ; above is now jmp

2982	.1980					awardLife
2983	.1980	ad f1 a1	lda $a1f1		lda PasswordInfiLives
2984	.1983	f0 01		beq $1986		beq +
2985	.1985	60		rts			rts
2986	.1986	ee 0d a0	inc $a00d	+	inc GameData.lives
2987	.1989	4c 67 1b	jmp $1b67		jmp pltLives

2989	.198c					animateDoor
2990	.198c	ad 1c a0	lda $a01c		lda GameData.exitOpen
2991	.198f	f0 1c		beq $19ad		beq aDexit
2992	.1991	ad 45 a0	lda $a045		lda TickDowns.doorAnim
2993	.1994	d0 17		bne $19ad		bne aDexit
2994	.1996	a9 0a		lda #$0a		lda #kTimers.DoorAnimeRate
2995	.1998	8d 45 a0	sta $a045		sta TickDowns.doorAnim
2996	.199b	ad 21 a0	lda $a021		lda LevelData.exitIndex
2997	.199e	85 15		sta $15			sta ActiveTileIndex
2998	.19a0	20 ae 19	jsr $19ae		jsr animateInternal
2999	.19a3	ad 22 a0	lda $a022		lda LevelData.exitIndex+1
3000	.19a6	c9 ff		cmp #$ff		cmp #$ff
3001	.19a8	f0 03		beq $19ad		beq aDexit
3002	.19aa	85 15		sta $15			sta ActiveTileIndex
3003	.19ac	f0		beq			gne animateInternal
3004	.19ad					aDexit
3005	.19ad	60		rts			rts

3007	.19ae					animateInternal
3008	.19ae	ad 23 a0	lda $a023		lda LevelData.exitFrame
3009	.19b1					animateDoorCmp
3010	.19b1	c9 0e		cmp #$0e		cmp #kDoorOpen
3011	.19b3	f0 f8		beq $19ad		beq aDexit
3012	.19b5					animateDoorCLC
3013	.19b5	18		clc			clc
3014	.19b6	69 01		adc #$01		adc #1
3015	.19b8	8d 23 a0	sta $a023		sta LevelData.exitFrame
3016	.19bb	80 61		bra $1a1e		gra pltSingleTileNoLookupNew ; skips below

3018	.19bd					setAnimateDoorToOpen
3019	.19bd	a9 0a		lda #$0a		lda #kDoorClosed
3020	.19bf	8d 23 a0	sta $a023		sta LevelData.exitFrame
3021	.19c2	a9 0e		lda #$0e		lda #kDoorOpen
3022	.19c4	8d b2 19	sta $19b2		sta animateDoorCmp+1
3023	.19c7	a9 18		lda #$18		lda #$18 ; CLC
3024	.19c9	8d b5 19	sta $19b5		sta animateDoorCLC
3025	.19cc	a9 69		lda #$69		lda #$69 ; ADC #
3026	.19ce	8d b6 19	sta $19b6		sta animateDoorCLC+1
3027	.19d1	60		rts			rts

3029	.19d2					setAnimateDoorToClose
3030	.19d2	a9 0e		lda #$0e		lda #kDoorOpen
3031	.19d4	8d 23 a0	sta $a023		sta LevelData.exitFrame
3032	.19d7	a9 0a		lda #$0a		lda #kDoorClosed
3033	.19d9	8d b2 19	sta $19b2		sta animateDoorCmp+1
3034	.19dc	a9 38		lda #$38		lda #$38 ; SEC
3035	.19de	8d b5 19	sta $19b5		sta animateDoorCLC
3036	.19e1	a9 e9		lda #$e9		lda #$E9 ; SBC #
3037	.19e3	8d b6 19	sta $19b6		sta animateDoorCLC+1
3038	.19e6	60		rts			rts

3040	.19e7					playSFX
3041	.19e7	2c 1d a0	bit $a01d		bit GameData.musicMode
3042	.19ea	50 09		bvc $19f5		bvc audioExit
3043	.19ec	bd e3 2c	lda $2ce3,x		lda SNDTBL.hi,x
3044	.19ef	a8		tay			tay
3045	.19f0	bd db 2c	lda $2cdb,x		lda SNDTBL.lo,x
3046	.19f3	a2 0e		ldx #$0e		ldx #14;7;14
3047							;lda #<effect        ;Start address of sound effect data
3048						    ;ldy #>effect
3049						    ;ldx #channel        ;0, 7 or 14 for channels 1-3
3050						   ; jmp SID+6
3051	.19f5					audioExit
3052	.19f5	60		rts			rts

3054	.19f6					playMusic
3055	.19f6	60		rts			rts
3056							;bit GameData.musicMode
3057							;bpl audioExit
3058							;jmp SID

3060	.19f7					countTempMapTile
3061	.19f7	a2 bf		ldx #$bf		ldx # kLevelSizeMax-1
3062	.19f9	a0 00		ldy #$00		ldy #0
3063	.19fb					_loop
3064	.19fb	dd 00 a2	cmp $a200,x		cmp tileMapTemp,x
3065	.19fe	d0 01		bne $1a01		bne _skip
3066	.1a00	c8		iny			iny
3067	.1a01					_skip
3068	.1a01	ca		dex			dex
3069	.1a02	e0 ff		cpx #$ff		cpx #$ff
3070	.1a04	d0 f5		bne $19fb		bne _loop
3071	.1a06	98		tya			tya
3072	.1a07	60		rts			rts

3074	.1a08					clearTileNew
3075	.1a08	a4 15		ldy $15			ldy ActiveTileIndex
3076	.1a0a	a9 00		lda #$00		lda # kTiles.back
3077	.1a0c	99 00 a2	sta $a200,y		sta tileMapTemp,y
3078	.1a0f	20 4e 14	jsr $144e		jsr calcBCDEforTileY ; this sets it to be what it should be shadow wise
3079	.1a12	20 1a 1a	jsr $1a1a		jsr pltSingleTileNew
3080	.1a15	a4 15		ldy $15			ldy ActiveTileIndex
3081	.1a17	b9 00 a2	lda $a200,y		lda tileMapTemp,y
3082	.1a1a					pltSingleTileNew
3083	.1a1a	aa		tax			tax
3084	.1a1b	bd e2 14	lda $14e2,x		lda toolToTileLUT,x
3085	.1a1e					pltSingleTileNoLookupNew
3086	.1a1e	48		pha			pha
3087	.1a1f	78		sei			sei
3088	.1a20	a5 15		lda $15			lda ActiveTileIndex
3089	.1a22	20 93 1a	jsr $1a93		jsr convertIndexToScreenAndCRAM
3090	.1a25	a9 10		lda #$10		lda #`kVRAM.gameScreen | kVERA.inc_1
3091	.1a27	8d 22 9f	sta $9f22		sta kVERA.ADDR_Hi
3092	.1a2a	68		pla			pla
3093	.1a2b	20 6d 15	jsr $156d		jsr renderTile
3094	.1a2e	58		cli			cli
3095	.1a2f	60		rts			rts

3097	.1a30					removeAllTilesOf
3098	.1a30	85 13		sta $13			sta ZPTemp5
3099	.1a32	a2 00		ldx #$00		ldx #0
3100	.1a34	86 15		stx $15			stx ActiveTileIndex
3101	.1a36	86 17		stx $17			stx TestingSprX1
3102	.1a38					_loop
3103	.1a38	bd 00 a2	lda $a200,x		lda tileMapTemp,x
3104	.1a3b	c5 13		cmp $13			cmp ZPTemp5
3105	.1a3d	d0 06		bne $1a45		bne _next
3106	.1a3f	20 08 1a	jsr $1a08			jsr clearTileNew
3107	.1a42	20 32 18	jsr $1832			jsr CheckForShadowPlots
3108	.1a45					_next
3109	.1a45	e6 17		inc $17			inc TestingSprX1
3110	.1a47	a6 17		ldx $17			ldx TestingSprX1
3111	.1a49	86 15		stx $15			stx ActiveTileIndex
3112	.1a4b	e0 c0		cpx #$c0		cpx # kLevelSizeMax
3113	.1a4d	d0 e9		bne $1a38		bne _loop
3114	.1a4f	60		rts			rts

3116	.1a50					giveScore
3117	.1a50	0a		asl a			asl a
3118	.1a51	0a		asl a			asl a
3119	.1a52	0a		asl a			asl a
3120	.1a53	09 05		ora #$05		ora #5
3121	.1a55	a8		tay			tay
3122	.1a56	a2 05		ldx #$05		ldx #5
3123	.1a58	18		clc			clc
3124	.1a59					_scLoop
3125	.1a59	bd 0f a0	lda $a00f,x		lda GameData.score,x
3126	.1a5c	79 73 1a	adc $1a73,y		adc FruitScore,y
3127	.1a5f	9d 0f a0	sta $a00f,x		sta GameData.score,x
3128	.1a62	c9 0a		cmp #$0a		cmp #10
3129	.1a64	90 06		bcc $1a6c		bcc _ok
3130								;sec
3131	.1a66	e9 0a		sbc #$0a			sbc #10
3132	.1a68	9d 0f a0	sta $a00f,x			sta GameData.score,x
3133	.1a6b	38		sec				sec ; add 1 more next time
3134	.1a6c					_ok
3135	.1a6c	88		dey			dey
3136	.1a6d	ca		dex			dex
3137	.1a6e	10 e9		bpl $1a59		bpl _scLoop
3138	.1a70	4c 33 1b	jmp $1b33		jmp pltScore

3140	.1a73					kScoreIndex .block
3141	=0						fruit = 0
3142	=1						flower = 1
3143	=2						key = 2
3144	=3						boss = 3
3145						.bend

3147	>1a73	00 00 00 01 00 00 0f 0f		FruitScore	.byte 0,0,0,1,0,0,15,15
3148	>1a7b	00 00 00 05 00 00 0f 0f		FlowerScore .byte 0,0,0,5,0,0,15,15
3149	>1a83	00 00 00 02 05 00 0f 0f		KeyScore	.byte 0,0,0,2,5,0,15,15
3150	>1a8b	00 01 00 00 00 00 0f 0f		BossScore	.byte 0,1,0,0,0,0,15,15

3152	.1a93					convertIndexToScreenAndCRAM
3153							; screen is 64 wide and 2 per char so we want to time y * 128
3154							; 2 lines per tile so y*256
3155	.1a93	85 14		sta $14			sta TempX
3156	.1a95	29 f0		and #$f0		and #$F0 ; get y Part
3157	.1a97	4a		lsr a			lsr a
3158	.1a98	4a		lsr a			lsr a
3159	.1a99	4a		lsr a			lsr a
3160	.1a9a	4a		lsr a			lsr a ; >> 4 to get y into the lower half
3161							;clc
3162	.1a9b	69 10		adc #$10		adc #>kVRAM.gameScreen
3163	.1a9d	85 09		sta $09			sta Pointer2.hi ; * 256
3164	.1a9f	a5 14		lda $14			lda TempX
3165	.1aa1	29 0f		and #$0f		and #$0F ; x = x * 2 and 2 per char so *4
3166	.1aa3	0a		asl a			asl a
3167	.1aa4	0a		asl a			asl a
3168							;clc
3169	.1aa5	69 00		adc #$00		adc #<kVRAM.gameScreen
3170	.1aa7	85 08		sta $08			sta Pointer2.lo
3171	.1aa9	60		rts			rts

3173						; returns Y into ZPTemp
3174	.1aaa					convertIndexToEntSpriteXY
3175	.1aaa	85 11		sta $11			sta ZPTemp3
3176	.1aac	29 f0		and #$f0		and #$f0
3177	.1aae	9d 72 a3	sta $a372,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
3178	.1ab1	85 0f		sta $0f			sta ZPTemp
3179	.1ab3	a5 11		lda $11			lda ZPTemp3
3180	.1ab5	29 0f		and #$0f		and #$0f
3181	.1ab7	0a		asl a			asl a
3182	.1ab8	0a		asl a			asl a
3183	.1ab9	0a		asl a			asl a
3184	.1aba	0a		asl a			asl a
3185	.1abb	9e 52 a3	stz $a352,x		stz mplexBuffer.xmsb+kEntsSpriteOffset,x ; to be sure sure
3186	.1abe	9d 32 a3	sta $a332,x		sta mplexBuffer.xpos+kEntsSpriteOffset,x
3187	.1ac1	60		rts			rts

3189						; carry set = not safe, clear = safe
3190	.1ac2					checkSolidTile
3191	.1ac2	ae 1c a0	ldx $a01c		ldx GameData.exitOpen
3192	.1ac5	d0 04		bne $1acb		bne _skipDoorCheck
3193	.1ac7	c9 11		cmp #$11			cmp # kTiles.exit
3194	.1ac9	f0 14		beq $1adf			beq _notSafe
3195	.1acb					_skipDoorCheck
3196	.1acb	c9 13		cmp #$13		cmp # kTiles.pipe
3197	.1acd	f0 10		beq $1adf		beq _notSafe
3198	.1acf	c9 21		cmp #$21			cmp # kTiles.dissNoColide
3199	.1ad1	f0 0e		beq $1ae1			beq _exitSafe
3200	.1ad3	c9 14		cmp #$14			cmp # kTiles.diss
3201	.1ad5	b0 0c		bcs $1ae3				bcs _checkNotShadow
3202	.1ad7	c9 01		cmp #$01					cmp # kTiles.wall
3203	.1ad9	90 06		bcc $1ae1					bcc _exitSafe
3204	.1adb	c9 06		cmp #$06						cmp # kTiles.spike
3205	.1add	b0 02		bcs $1ae1						bcs _exitSafe
3206	.1adf					_notsafe
3207	.1adf	38		sec			sec
3208	.1ae0	60		rts			rts
3209	.1ae1					_exitSafe
3210	.1ae1	18		clc			clc
3211	.1ae2	60		rts			rts
3212	.1ae3					_checkNotShadow
3213	.1ae3	c9 21		cmp #$21		cmp #kTiles.dissNoColide
3214	.1ae5	90 f8		bcc $1adf		bcc _notsafe
3215	.1ae7	80 f8		bra $1ae1		bra _exitSafe

3217	.1ae9					plotStatusArea
3218	.1ae9	78		sei			sei
300						.if int(kVRAM.gameScreen+(32*2)|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.1aea	a2 0b		ldx #$0b		ldx #len(VeraDESTAddressLUT)
304	={1048576:10,1052672:8,1052736:11,1053204:5,1055744:9,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVRAM.gameScreen+(32*2)|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000,1055744,$100000,1052736]
							VeraDESTAddressLUT ..=[kVRAM.gameScreen+(32*2)|kVERA.inc_1]
306						.endif
307	.1aec	20 13 2b	jsr $2b13	jsr setVERAAddressPort0_X

3220	.1aef	64 0f		stz $0f			stz ZPTemp
3221	.1af1					_loop
3222	.1af1	a6 0f		ldx $0f			ldx ZPTemp
3223	.1af3	bd 30 28	lda $2830,x		lda statusLines,x
3224	.1af6	0a		asl a			asl a
3225	.1af7	0a		asl a			asl a
3226	.1af8	0a		asl a			asl a
3227	.1af9	aa		tax			tax
3228	.1afa	a0 00		ldy #$00		ldy #0
3229	.1afc					_lineLoop
3230	.1afc	bd d8 27	lda $27d8,x		lda statusLine0,x
3231	.1aff	8d 23 9f	sta $9f23		sta kVERA.DATA_0
3232	.1b02	9c 23 9f	stz $9f23		stz kVERA.DATA_0
3233	.1b05	e8		inx			inx
3234	.1b06	c8		iny			iny
3235	.1b07	c0 08		cpy #$08		cpy #8
3236	.1b09	90 f1		bcc $1afc		bcc _lineLoop
3237	.1b0b	18		clc			clc
3238	.1b0c	ad 20 9f	lda $9f20		lda kVERA.ADDR_Lo
3239	.1b0f	69 70		adc #$70		adc #128-16
3240	.1b11	8d 20 9f	sta $9f20		sta kVERA.ADDR_Lo
3241	.1b14	90 03		bcc $1b19		bcc +
3242	.1b16	ee 21 9f	inc $9f21			inc kVERA.ADDR_Mid
3243	.1b19	a5 0f		lda $0f		+	lda ZPTemp
3244	.1b1b	18		clc			clc
3245	.1b1c	69 01		adc #$01		adc #1
3246	.1b1e	c9 18		cmp #$18		cmp #24
3247	.1b20	b0 04		bcs $1b26		bcs _done
3248	.1b22	85 0f		sta $0f				sta ZPTemp
3249	.1b24	80 cb		bra $1af1			bra _loop
3250	.1b26					_done
3251	.1b26	58		cli			cli
3252	.1b27	20 33 1b	jsr $1b33		jsr pltScore
3253	.1b2a	20 4d 1b	jsr $1b4d		jsr pltHighScore
3254	.1b2d	20 67 1b	jsr $1b67		jsr pltLives
3255	.1b30	4c 80 1b	jmp $1b80		jmp pltFlowers

3257	.1b33					pltScore
3258	.1b33	78		sei			sei
300						.if int(getGameScreenCharPos(33,9)|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.1b34	a2 0c		ldx #$0c		ldx #len(VeraDESTAddressLUT)
304	={1048576:10,1052672:8,1052736:11,1053204:5,1053890:12,1055744:9,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(getGameScreenCharPos(33,9)|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000,1055744,$100000,1052736,1053890]
							VeraDESTAddressLUT ..=[getGameScreenCharPos(33,9)|kVERA.inc_1]
306						.endif
307	.1b36	20 13 2b	jsr $2b13	jsr setVERAAddressPort0_X

3260	.1b39	a2 00		ldx #$00		ldx #0
3261	.1b3b	bd 0f a0	lda $a00f,x	_l	lda GameData.score,x
3262	.1b3e	09 f0		ora #$f0		ora #240
3263	.1b40	8d 23 9f	sta $9f23		sta kVERA.DATA_0 ;kVectors.charBase + 33 + (40*9),x
3264	.1b43	9c 23 9f	stz $9f23		stz kVERA.DATA_0; $d800 + 33 + (40*9),x
3265	.1b46	e8		inx			inx
3266	.1b47	e0 06		cpx #$06		cpx #6
3267	.1b49	d0 f0		bne $1b3b		bne _l
3268	.1b4b	58		cli			cli
3269	.1b4c	60		rts			rts

3271	.1b4d					pltHighScore
3272	.1b4d	78		sei			sei
300						.if int(getGameScreenCharPos(33,13)|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.1b4e	a2 0d		ldx #$0d		ldx #len(VeraDESTAddressLUT)
304	={1048576:10,1052672:8,1052736:11,1053204:5,1053890:12,1054402:13,1055744:9,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(getGameScreenCharPos(33,13)|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000,1055744,$100000,1052736,1053890,1054402]
							VeraDESTAddressLUT ..=[getGameScreenCharPos(33,13)|kVERA.inc_1]
306						.endif
307	.1b50	20 13 2b	jsr $2b13	jsr setVERAAddressPort0_X

3274	.1b53	a2 00		ldx #$00		ldx #0
3275	.1b55	bd 15 a0	lda $a015,x	_l	lda GameData.high,x
3276	.1b58	09 f0		ora #$f0		ora #240
3277	.1b5a	8d 23 9f	sta $9f23		sta kVERA.DATA_0 ;kVectors.charBase + 33 + (40*13),x
3278	.1b5d	9c 23 9f	stz $9f23		stz kVERA.DATA_0 ;$d800 + 33 + (40*13),x
3279	.1b60	e8		inx			inx
3280	.1b61	e0 06		cpx #$06		cpx #6
3281	.1b63	d0 f0		bne $1b55		bne _l
3282	.1b65	58		cli			cli
3283	.1b66	60		rts			rts

3285	.1b67					pltLives
3286	.1b67	78		sei			sei
300						.if int(getGameScreenCharPos(37,17)|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.1b68	a2 0e		ldx #$0e		ldx #len(VeraDESTAddressLUT)
304	={1048576:10,1052672:8,1052736:11,1053204:5,1053890:12,1054402:13,1054922:14,1055744:9,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(getGameScreenCharPos(37,17)|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000,1055744,$100000,1052736,1053890,1054402,1054922]
							VeraDESTAddressLUT ..=[getGameScreenCharPos(37,17)|kVERA.inc_1]
306						.endif
307	.1b6a	20 13 2b	jsr $2b13	jsr setVERAAddressPort0_X

3288	.1b6d	ad 0d a0	lda $a00d		lda GameData.lives
3289	.1b70	09 f0		ora #$f0		ora #240
3290	.1b72	c9 fa		cmp #$fa		cmp #250
3291	.1b74	90 02		bcc $1b78		bcc _safe
3292	.1b76	a9 f9		lda #$f9			lda #249
3293	.1b78					_safe
3294	.1b78	8d 23 9f	sta $9f23		sta kVERA.DATA_0 ; kVectors.charBase + 37 + (40*17)
3295	.1b7b	9c 23 9f	stz $9f23		stz kVERA.DATA_0 ;$d800 + 37 + (40*17)
3296	.1b7e	58		cli			cli
3297	.1b7f	60		rts			rts

3299	.1b80					pltFlowers
3300	.1b80	78		sei			sei
300						.if int(getGameScreenCharPos(37,21)|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.1b81	a2 0f		ldx #$0f		ldx #len(VeraDESTAddressLUT)
304	={1048576:10,1052672:8,1052736:11,1053204:5,1053890:12,1054402:13,1054922:14,1055434:15,1055744:9,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(getGameScreenCharPos(37,21)|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000,1055744,$100000,1052736,1053890,1054402,1054922,1055434]
							VeraDESTAddressLUT ..=[getGameScreenCharPos(37,21)|kVERA.inc_1]
306						.endif
307	.1b83	20 13 2b	jsr $2b13	jsr setVERAAddressPort0_X

3302	.1b86	ad 0e a0	lda $a00e		lda GameData.flowers
3303	.1b89	09 f0		ora #$f0		ora #240
3304	.1b8b	8d 23 9f	sta $9f23		sta kVERA.DATA_0 ;kVectors.charBase + 37 + (40*21)
3305	.1b8e	9c 23 9f	stz $9f23		stz kVERA.DATA_0 ;$d800 + 37 + (40*21)
3306	.1b91	58		cli			cli
3307	.1b92	60		rts			rts

3309	.1b93					setPlayerToSpawnPoint
3310	.1b93	ad 20 a0	lda $a020		lda LevelData.playerIndex
3311	.1b96					setPlayerToIndexA
3312	.1b96	48		pha			pha
3313	.1b97	0a		asl a				asl a
3314	.1b98	0a		asl a				asl a
3315	.1b99	0a		asl a				asl a
3316	.1b9a	0a		asl a				asl a
3317	.1b9b	8d 30 a3	sta $a330			sta mplexBuffer.xpos
3318	.1b9e	9c 50 a3	stz $a350			stz mplexBuffer.xmsb
3319	.1ba1	68		pla			pla
3320	.1ba2	29 f0		and #$f0		and #$F0
3321	.1ba4	8d 70 a3	sta $a370		sta mplexBuffer.ypos
3322	.1ba7	a9 f8		lda #$f8		lda #kSprites.bulletSprite
3323	.1ba9	20 d4 11	jsr $11d4		jsr SetBulletSpriteFromFrame
3324	.1bac	a9 ff		lda #$ff		lda #255
3325	.1bae	8d 71 a3	sta $a371		sta mplexBuffer.ypos+kBulletSpriteOffset
3326	.1bb1	60		rts			rts


3329	.1bb2					resetPlayerData
3330	.1bb2	9c 25 a0	stz $a025		stz PlayerData.dead ; probably could just inline this tbf
3331	.1bb5	60		rts			rts

3333	.1bb6					updateTickdowns
3334	.1bb6	a2 0d		ldx #$0d		ldx #TICK_DOWN_END - TICK_DOWN_START-1
3335	.1bb8	bd 43 a0	lda $a043,x	_l	lda TickDowns,x
3336	.1bbb	f0 03		beq $1bc0		beq _next
3337	.1bbd	de 43 a0	dec $a043,x		dec TickDowns,x
3338	.1bc0					_next
3339	.1bc0	ca		dex			dex
3340	.1bc1	10 f5		bpl $1bb8		bpl _l
3341	.1bc3	60		rts			rts

3343						; NumEnts followed by XXXXYYYY TTTT--DD
3344						; X x tile
3345						; Y y tile
3346						; T type
3347						; D initial direction
3348						;}}}
3349						.send sSUBS
3350						; ----- @Entity Funcs@ -----
3351						.dsection sEntity
3352						.section sEntity
3353						; {{{
3354	.1bc4					unpackEntityBytes
3355	.1bc4	a0 00		ldy #$00		ldy #0
3356	.1bc6	98		tya			tya
3357	.1bc7	a2 19		ldx #$19		ldx #kEntity.maxEntities
3358	.1bc9	9d cf a0	sta $a0cf,x	-	sta EntityData.animBase,x
3359	.1bcc	9d e8 a0	sta $a0e8,x		sta EntityData.animFrame,x
3360	.1bcf	9d 1a a1	sta $a11a,x		sta EntityData.entState,x
3361	.1bd2	ca		dex			dex
3362	.1bd3	10 f4		bpl $1bc9		bpl -
3363	.1bd5	b1 00		lda ($00),y		lda (EntityDataPointer),y
3364	.1bd7	85 10		sta $10			sta ZPTemp2 ; number of entities
3365	.1bd9	8d 51 a0	sta $a051		sta EntityData.number
3366	.1bdc	f0 40		beq $1c1e		beq _e
3367	.1bde	c8		iny				iny			; next byte
3368	.1bdf	a2 00		ldx #$00			ldx #0
3369	.1be1	85 04		sta $04				sta EntNum
3370	.1be3						_l
3371	.1be3	b1 00		lda ($00),y			lda (EntityDataPointer),y
3372	.1be5	20 aa 1a	jsr $1aaa			jsr convertIndexToEntSpriteXY
3373	.1be8	c8		iny				iny			; next byte
3374	.1be9	b1 00		lda ($00),y			lda (EntityDataPointer),y
3375	.1beb	4a		lsr a				lsr a
3376	.1bec	4a		lsr a				lsr a
3377	.1bed	4a		lsr a				lsr a
3378	.1bee	4a		lsr a				lsr a
3379	.1bef	9d 52 a0	sta $a052,x			sta EntityData.type,x
3380	.1bf2	c9 08		cmp #$08			cmp #kEntity.Bear
3381	.1bf4	d0 02		bne $1bf8			bne +
3382	.1bf6	80 4e		bra $1c46				gra _BossBear
3383	.1bf8	c9 09		cmp #$09		+	cmp #kEntity.Octopuss
3384	.1bfa	d0 03		bne $1bff			bne +
3385	.1bfc	4c d4 1c	jmp $1cd4				jmp _BossOctopuss
3386	.1bff	a5 0f		lda $0f			+	lda ZPTemp
3387	.1c01	9d 01 a1	sta $a101,x			sta EntityData.originalY,x
3388	.1c04	9e 1a a1	stz $a11a,x			stz EntityData.entState,x
3389	.1c07	9e 97 a1	stz $a197,x			stz EntityData.speed,x
3390	.1c0a	b1 00		lda ($00),y			lda (EntityDataPointer),y
3391	.1c0c	29 03		and #$03			and #3
3392	.1c0e	9d 6b a0	sta $a06b,x			sta EntityData.direction,x
3393	.1c11	a9 01		lda #$01			lda #1
3394	.1c13	9d 84 a0	sta $a084,x			sta EntityData.active,x
3395	.1c16						_nextEnt
3396	.1c16	c8		iny				iny 		; next byte
3397	.1c17	e8		inx				inx
3398	.1c18	c6 10		dec $10				dec ZPTemp2
3399	.1c1a	a5 10		lda $10				lda ZPTemp2
3400	.1c1c	d0 c5		bne $1be3			bne _l
3401	.1c1e					_e
3402	.1c1e	ae 51 a0	ldx $a051		ldx EntityData.number ; keep number
3403	.1c21	8e d3 a1	stx $a1d3		stx EntityData.pipeBubbleStart
3404	.1c24	ad c9 a1	lda $a1c9		lda EntityData.numPipes
3405	.1c27	f0 1c		beq $1c45		beq _noPipes
3406							.cerror kEntity.maxNumBubblesPerMaker != 2, "need to change code so it handles new mul"
3407	.1c29	0a		asl a			asl a ; times two
3408	.1c2a	18		clc			clc ; probably not needed as num pipes must be below 128
3409	.1c2b	6d 51 a0	adc $a051		adc EntityData.number
3410	.1c2e	8d 51 a0	sta $a051		sta EntityData.number ; add the bubble ents
3411	.1c31					_setupBubbleLoop
3412	.1c31	a9 0c		lda #$0c		lda #kEntity.bubble
3413	.1c33	9d 52 a0	sta $a052,x		sta EntityData.type,x
3414	.1c36	9e 1a a1	stz $a11a,x		stz EntityData.entState,x
3415	.1c39	9e 6b a0	stz $a06b,x		stz EntityData.direction,x
3416	.1c3c	9e 84 a0	stz $a084,x		stz EntityData.active,x
3417	.1c3f	e8		inx			inx
3418	.1c40	ec 51 a0	cpx $a051		cpx EntityData.number
3419	.1c43	d0 ec		bne $1c31		bne _setupBubbleLoop
3420	.1c45					_noPipes
3421	.1c45	60		rts			rts
3422	.1c46					_BossBear
3423	.1c46	a9 08		lda #$08		lda #kEntity.bear
3424	.1c48	9d 52 a0	sta $a052,x		sta EntityData.type,x
3425	.1c4b	a9 0a		lda #$0a		lda #kEntity.bearBody
3426	.1c4d	9d 53 a0	sta $a053,x		sta EntityData.type+1,x
3427	.1c50	a9 0d		lda #$0d		lda #kEntity.bossDummy
3428	.1c52	9d 54 a0	sta $a054,x		sta EntityData.type+2,x
3429	.1c55	9d 55 a0	sta $a055,x		sta EntityData.type+3,x
3430	.1c58	a9 07		lda #$07		lda #kBoss.hitPoints
3431	.1c5a	9d 84 a0	sta $a084,x		sta EntityData.active,x
3432	.1c5d					_sharedBoss
3433	.1c5d	a9 0d		lda #$0d		lda #kEntity.bossDummy
3434	.1c5f	9d 54 a0	sta $a054,x		sta EntityData.type+2,x
3435	.1c62	9d 55 a0	sta $a055,x		sta EntityData.type+3,x
3436	.1c65	ad 51 a0	lda $a051		lda EntityData.number
3437	.1c68	18		clc			clc
3438	.1c69	69 03		adc #$03		adc #3 ; insert 3 more ents for the rest of the boss
3439	.1c6b	8d 51 a0	sta $a051		sta EntityData.number
3440	.1c6e	a9 01		lda #$01		lda #1
3441	.1c70	9d 85 a0	sta $a085,x		sta EntityData.active+1,x
3442	.1c73	9d 86 a0	sta $a086,x		sta EntityData.active+2,x
3443	.1c76	9d 87 a0	sta $a087,x		sta EntityData.active+3,x
3444	.1c79	8a		txa			txa
3445	.1c7a	9d 1b a1	sta $a11b,x		sta EntityData.entState+1,x
3446	.1c7d	9d 1c a1	sta $a11c,x		sta EntityData.entState+2,x
3447	.1c80	9d 1d a1	sta $a11d,x		sta EntityData.entState+3,x
3448	.1c83	bd 52 a3	lda $a352,x		lda mplexBuffer.xmsb+kEntsSpriteOffset,x
3449	.1c86	9d 53 a3	sta $a353,x		sta mplexBuffer.xmsb+kEntsSpriteOffset+1,x
3450	.1c89	9d 54 a3	sta $a354,x		sta mplexBuffer.xmsb+kEntsSpriteOffset+2,x
3451	.1c8c	9d 55 a3	sta $a355,x		sta mplexBuffer.xmsb+kEntsSpriteOffset+3,x
3452	.1c8f	bd 72 a3	lda $a372,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
3453	.1c92	38		sec			sec
3454	.1c93	e9 09		sbc #$09		sbc #9
3455	.1c95	9d 72 a3	sta $a372,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
3456	.1c98	9d 73 a3	sta $a373,x		sta mplexBuffer.ypos+kEntsSpriteOffset+1,x
3457	.1c9b	18		clc			clc
3458	.1c9c	69 15		adc #$15		adc #21
3459	.1c9e	9d 74 a3	sta $a374,x		sta mplexBuffer.ypos+kEntsSpriteOffset+2,x
3460	.1ca1	9d 75 a3	sta $a375,x		sta mplexBuffer.ypos+kEntsSpriteOffset+3,x
3461	.1ca4	bd 32 a3	lda $a332,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x
3462	.1ca7	38		sec			sec
3463	.1ca8	e9 08		sbc #$08		sbc #8
3464	.1caa	9d 32 a3	sta $a332,x		sta mplexBuffer.xpos+kEntsSpriteOffset,x
3465	.1cad	9d 34 a3	sta $a334,x		sta mplexBuffer.xpos+kEntsSpriteOffset+2,x
3466	.1cb0	18		clc			clc
3467	.1cb1	69 18		adc #$18		adc #24
3468	.1cb3	9d 33 a3	sta $a333,x		sta mplexBuffer.xpos+kEntsSpriteOffset+1,x
3469	.1cb6	9d 35 a3	sta $a335,x		sta mplexBuffer.xpos+kEntsSpriteOffset+3,x
3470	.1cb9	9e 1a a1	stz $a11a,x		stz EntityData.entState,x
3471	.1cbc	9e 97 a1	stz $a197,x		stz EntityData.speed,x
3472	.1cbf	b1 00		lda ($00),y		lda (EntityDataPointer),y
3473	.1cc1	29 03		and #$03		and #3
3474	.1cc3	9d 6b a0	sta $a06b,x		sta EntityData.direction,x
3475	.1cc6	a9 19		lda #$19		lda #25
3476	.1cc8	9d 9d a0	sta $a09d,x		sta EntityData.movTimer,x
3477	.1ccb	9d 9e a0	sta $a09e,x		sta EntityData.movTimer+1,x
3478	.1cce	e8		inx			inx
3479	.1ccf	e8		inx			inx
3480	.1cd0	e8		inx			inx
3481							; x is now + 3 so when nextEnt is called it will be +4
3482	.1cd1	4c 16 1c	jmp $1c16		jmp _nextEnt
3483	.1cd4					_BossOctopuss
3484	.1cd4	a9 09		lda #$09		lda #kEntity.octopuss
3485	.1cd6	9d 52 a0	sta $a052,x		sta EntityData.type,x
3486	.1cd9	a9 0b		lda #$0b		lda #kEntity.octopussBody
3487	.1cdb	9d 53 a0	sta $a053,x		sta EntityData.type+1,x
3488	.1cde	a9 09		lda #$09		lda #kBoss.hitPointsOctopuss
3489	.1ce0	9d 84 a0	sta $a084,x		sta EntityData.active,x
3490	.1ce3	4c 5d 1c	jmp $1c5d		jmp _sharedBoss

3492	.1ce6					setEntitySprites
3493	.1ce6	ae 51 a0	ldx $a051		ldx EntityData.number
3494	.1ce9	f0 1c		beq $1d07		beq _exit
3495	.1ceb					_active
3496	.1ceb	86 02		stx $02			stx CurrentEntity
3497	.1ced	bd 52 a0	lda $a052,x		lda EntityData.type,x
3498	.1cf0	c9 08		cmp #$08		cmp #kEntity.bear
3499	.1cf2	f0 26		beq $1d1a		beq _bossBear
3500	.1cf4	c9 0a		cmp #$0a			cmp #kEntity.bearBody
3501	.1cf6	f0 0c		beq $1d04			beq _nextEnt
3502	.1cf8	c9 09		cmp #$09				cmp #kEntity.octopuss
3503	.1cfa	f0 49		beq $1d45				beq _bossOctopuss
3504	.1cfc	c9 0b		cmp #$0b					cmp #kEntity.octopussBody
3505	.1cfe	f0 04		beq $1d04					beq _nextEnt
3506	.1d00	a8		tay			tay
3507						;	lda EntitySpriteColours,y
3508							;sta mplexBuffer.sprc+kEntsSpriteOffset,x
3509	.1d01	20 8d 22	jsr $228d		jsr setEntSpriteForDirection
3510	.1d04					_nextEnt
3511	.1d04	ca		dex			dex
3512	.1d05	10 e4		bpl $1ceb		bpl _active
3513	.1d07					_exit
3514	.1d07	ad c9 a1	lda $a1c9		lda EntityData.numPipes
3515	.1d0a	f0 0d		beq $1d19		beq _exit2
3516	.1d0c	ae d3 a1	ldx $a1d3			ldx EntityData.pipeBubbleStart
3517	.1d0f	a9 ff		lda #$ff			lda #$ff
3518	.1d11					_loop
3519	.1d11	9d 72 a3	sta $a372,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
3520	.1d14	e8		inx			inx
3521	.1d15	e0 19		cpx #$19		cpx #kEntity.maxEntities
3522	.1d17	d0 f8		bne $1d11		bne _loop
3523	.1d19					_exit2
3524	.1d19	60		rts			rts

3526	.1d1a					_bossBear
3527	.1d1a	20 70 1d	jsr $1d70		jsr setBossToCorrectColour
3528	.1d1d	a9 e0		lda #$e0		lda #kSprBase+96
3529	.1d1f	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
3530	.1d22	20 d0 22	jsr $22d0		jsr SetEntSpriteFromFrame
3531	.1d25	e8		inx			inx
3532	.1d26	a9 e3		lda #$e3		lda #kSprBase+99
3533	.1d28	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
3534	.1d2b	20 d0 22	jsr $22d0		jsr SetEntSpriteFromFrame
3535	.1d2e	e8		inx			inx
3536	.1d2f	a9 e6		lda #$e6		lda #kSprBase+102
3537	.1d31	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
3538	.1d34	20 d0 22	jsr $22d0		jsr SetEntSpriteFromFrame
3539	.1d37	e8		inx			inx
3540	.1d38	a9 e8		lda #$e8		lda #kSprBase+104
3541	.1d3a	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
3542	.1d3d	20 d0 22	jsr $22d0		jsr SetEntSpriteFromFrame
3543	.1d40	ca		dex			dex
3544	.1d41	ca		dex			dex
3545	.1d42	ca		dex			dex
3546	.1d43	d0 bf		bne $1d04		bne _nextEnt

3548	.1d45					_bossOctopuss
3549	.1d45	20 70 1d	jsr $1d70		jsr setBossToCorrectColour
3550	.1d48	a9 ea		lda #$ea		lda #kSprBase+106
3551	.1d4a	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
3552	.1d4d	20 d0 22	jsr $22d0		jsr SetEntSpriteFromFrame
3553	.1d50	e8		inx			inx
3554	.1d51	a9 ed		lda #$ed		lda #kSprBase+109
3555	.1d53	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
3556	.1d56	20 d0 22	jsr $22d0		jsr SetEntSpriteFromFrame
3557	.1d59	e8		inx			inx
3558	.1d5a	a9 f0		lda #$f0		lda #kSprBase+112
3559	.1d5c	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
3560	.1d5f	20 d0 22	jsr $22d0		jsr SetEntSpriteFromFrame
3561	.1d62	e8		inx			inx
3562	.1d63	a9 f2		lda #$f2		lda #kSprBase+114
3563	.1d65	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
3564	.1d68	20 d0 22	jsr $22d0		jsr SetEntSpriteFromFrame
3565	.1d6b	ca		dex			dex
3566	.1d6c	ca		dex			dex
3567	.1d6d	ca		dex			dex
3568	.1d6e	d0 94		bne $1d04		bne _nextEnt

3570	.1d70					setBossToCorrectColour
3571	.1d70	bd 52 a0	lda $a052,x		lda EntityData.type,x
3572	.1d73	a8		tay			tay
3573							;lda EntitySpriteColours,y
3574	.1d74					setBossSpriteToColour
3575							;sta mplexBuffer.sprc+kEntsSpriteOffset,x ; not worth the effort for this
3576							;sta mplexBuffer.sprc+kEntsSpriteOffset+1,x
3577							;sta mplexBuffer.sprc+kEntsSpriteOffset+2,x
3578							;sta mplexBuffer.sprc+kEntsSpriteOffset+3,x
3579	.1d74	60		rts			rts

3581	.1d75					deactivateAllEntities
3582	.1d75	a2 18		ldx #$18		ldx #kEntity.maxEntities-1
3583	.1d77	9e 84 a0	stz $a084,x	-	stz EntityData.active,x
3584	.1d7a	ca		dex			dex
3585	.1d7b	10 fa		bpl $1d77		bpl -
3586	.1d7d	60		rts			rts


3589						; build hte collision data for each ent first
3590	.1d7e					BuildEntCollisionTable
3591	.1d7e	a2 18		ldx #$18		ldx # kEntity.maxEntities-1
3592	.1d80					innerEntitiesLoopColl
3593	.1d80	bd 84 a0	lda $a084,x		lda EntityData.active,x
3594	.1d83	f0 03		beq $1d88		beq updateEntitiesLoopColl
3595	.1d85	20 0a 25	jsr $250a		jsr MakeMinMaxXYForX
3596	.1d88					updateEntitiesLoopColl
3597	.1d88	ca		dex			dex
3598	.1d89	10 f5		bpl $1d80		bpl innerEntitiesLoopColl
3599	.1d8b	60		rts			rts


3602	.1d8c					addYDeltaEnt
3603	.1d8c	a6 02		ldx $02			ldx CurrentEntity
3604	.1d8e	bd 72 a3	lda $a372,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
3605	.1d91	18		clc			clc
3606	.1d92	6d f6 a1	adc $a1f6		adc checkSpriteToCharData.yDeltaCheck
3607	.1d95	9d 72 a3	sta $a372,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
3608	.1d98	60		rts			rts

3610	.1d99					updateEntities
3611	.1d99	a2 18		ldx #$18		ldx #kEntity.maxEntities-1
3612	.1d9b					innerEntitiesLoop
3613	.1d9b	bd 84 a0	lda $a084,x		lda EntityData.active,x
3614	.1d9e	d0 1f		bne $1dbf		bne EntitiesActive
3615	.1da0	bd 1a a1	lda $a11a,x		lda EntityData.entState,x
3616	.1da3	10 16		bpl $1dbb		bpl updateEntitiesLoop
3617	.1da5	de 9d a0	dec $a09d,x		dec EntityData.movTimer,x
3618	.1da8	bd 9d a0	lda $a09d,x		lda EntityData.movTimer,x
3619	.1dab	d0 0e		bne $1dbb		bne updateEntitiesLoop
3620	.1dad	bd 01 a1	lda $a101,x		lda EntityData.originalY,x
3621	.1db0	9d 72 a3	sta $a372,x		sta mplexBuffer.yPos+kEntsSpriteOffset,x
3622	.1db3	9e 1a a1	stz $a11a,x		stz EntityData.entState,x
3623	.1db6	a9 01		lda #$01		lda #1
3624	.1db8	9d 84 a0	sta $a084,x		sta EntityData.active,x
3625	.1dbb					updateEntitiesLoop
3626	.1dbb	ca		dex			dex
3627	.1dbc	10 dd		bpl $1d9b		bpl innerEntitiesLoop
3628	.1dbe	60		rts			rts
3629	.1dbf					EntitiesActive
3630	.1dbf	86 02		stx $02			stx CurrentEntity
3631	.1dc1	bd 52 a0	lda $a052,x		lda EntityData.type,x
3632	.1dc4	a8		tay			tay
14	.1dc5	b9 dc 1d	lda $1ddc,y		lda EntUpdateFuncLUT.hi,y
15	.1dc8	48		pha			pha
16	.1dc9	b9 ce 1d	lda $1dce,y		lda EntUpdateFuncLUT.lo,y
17	.1dcc	48		pha			pha
18	.1dcd	60		rts			rts
3634	.1dce					EntUpdateFuncLUT
26	>1dce	e9 34 e9 fe 4f f1 9a c3		lo .byte <(entNormalMovement,springEntFunc,EntNormalMovement,entBat,entGhostFunc,entSpiderFunc,entFishFunc,circlerFunc,entBoss,entBoss,nextEnt,nextEnt,entBubble,nextEnt)-1
	>1dd6	46 46 64 64 69 64
27	>1ddc	1d 20 1d 21 21 1e 1e 1f		hi .byte >(entNormalMovement,springEntFunc,EntNormalMovement,entBat,entGhostFunc,entSpiderFunc,entFishFunc,circlerFunc,entBoss,entBoss,nextEnt,nextEnt,entBubble,nextEnt)-1
	>1de4	23 23 22 22 22 22

3636	.1dea					entNormalMovement
3637	.1dea	20 aa 22	jsr $22aa	+	jsr updateEntAnimAndSetSprite
3638	.1ded	b9 43 27	lda $2743,y		lda CollFrameForEnt,y
3639	.1df0	85 1e		sta $1e			sta CollideSpriteBoxIndex
435	.1df2	e8		inx			inx
436	.1df3	e8		inx			inx
3641	.1df4	86 1d		stx $1d			stx CollideSpriteToCheck
3642	.1df6	a9 21		lda #$21		lda #<handleEntCollisionResult
3643	.1df8	85 06		sta $06			sta Pointer1
3644	.1dfa	a9 22		lda #$22		lda #>handleEntCollisionResult
3645	.1dfc	85 07		sta $07			sta Pointer1+1
3646	.1dfe	a6 02		ldx $02			ldx CurrentEntity
3647	.1e00	bd 97 a1	lda $a197,x		lda EntityData.speed,x
3648	.1e03	a8		tay			tay
3649	.1e04	bd 6b a0	lda $a06b,x		lda EntityData.direction,x
3650	.1e07	aa		tax			tax
3651	.1e08	64 05		stz $05			stz CollisionResult
14	.1e0a	bd 17 1e	lda $1e17,x		lda ENTDirectionCheckFuncLUT.hi,x
15	.1e0d	48		pha			pha
16	.1e0e	bd 13 1e	lda $1e13,x		lda ENTDirectionCheckFuncLUT.lo,x
17	.1e11	48		pha			pha
18	.1e12	60		rts			rts
3653	.1e13					ENTDirectionCheckFuncLUT
26	>1e13	22 41 5e 7d			lo .byte <(entRight,entUp,entLeft,entDown)-1
27	>1e17	1e 1e 1e 1e			hi .byte >(entRight,entUp,entLeft,entDown)-1

3655	>1e1b	02 04				entPositiveTBL   .byte 002,004
3656	>1e1d	01 02				entPositiveTBLUD .byte 001,002
3657	>1e1f	fe fc				entNegativeTBL   .byte 254,252
3658	>1e21	ff fe				entNegativeTBLUD .byte 255,254

3660	.1e23					entRight
3661	.1e23	b9 1b 1e	lda $1e1b,y		lda entPositiveTBL,y
3662	.1e26	8d f5 a1	sta $a1f5		sta checkSpriteToCharData.xDeltaCheck
3663	.1e29	a9 00		lda #$00		lda #0
3664	.1e2b	8d f6 a1	sta $a1f6		sta checkSpriteToCharData.yDeltaCheck
3665	.1e2e					entRightNoDelta
3666	.1e2e	20 53 16	jsr $1653		jsr newCollision
3667	.1e31	a5 22		lda $22			lda CollideCharTRC
3668	.1e33	20 c2 1a	jsr $1ac2		jsr checkSolidTile
3669	.1e36	26 05		rol $05			rol CollisionResult
3670	.1e38	a5 26		lda $26			lda CollideCharBRC
3671	.1e3a	20 c2 1a	jsr $1ac2		jsr checkSolidTile
3672	.1e3d	26 05		rol $05			rol CollisionResult
3673	.1e3f	6c 06 00	jmp ($0006)		jmp (Pointer1)

3675	.1e42					entUp
3676	.1e42	9c f5 a1	stz $a1f5		stz checkSpriteToCharData.xDeltaCheck
3677	.1e45	b9 21 1e	lda $1e21,y		lda entNegativeTBLUD,y
3678	.1e48	8d f6 a1	sta $a1f6		sta checkSpriteToCharData.yDeltaCheck
3679	.1e4b					entUpNoDelta
3680	.1e4b	20 53 16	jsr $1653		jsr newCollision
3681	.1e4e	a5 20		lda $20			lda CollideCharTLC
3682	.1e50	20 c2 1a	jsr $1ac2		jsr checkSolidTile
3683	.1e53	26 05		rol $05			rol CollisionResult
3684	.1e55	a5 22		lda $22			lda CollideCharTRC
3685	.1e57	20 c2 1a	jsr $1ac2		jsr checkSolidTile
3686	.1e5a	26 05		rol $05			rol CollisionResult
3687	.1e5c	6c 06 00	jmp ($0006)		jmp (Pointer1)

3689	.1e5f					entLeft
3690	.1e5f	b9 1f 1e	lda $1e1f,y		lda entNegativeTBL,y
3691	.1e62	8d f5 a1	sta $a1f5		sta checkSpriteToCharData.xDeltaCheck
3692	.1e65	a9 00		lda #$00		lda #0
3693	.1e67	8d f6 a1	sta $a1f6		sta checkSpriteToCharData.yDeltaCheck
3694	.1e6a					entLeftNoDelta
3695	.1e6a	20 53 16	jsr $1653		jsr newCollision
3696	.1e6d	a5 20		lda $20			lda CollideCharTLC
3697	.1e6f	20 c2 1a	jsr $1ac2		jsr checkSolidTile
3698	.1e72	26 05		rol $05			rol CollisionResult
3699	.1e74	a5 24		lda $24			lda CollideCharBLC
3700	.1e76	20 c2 1a	jsr $1ac2		jsr checkSolidTile
3701	.1e79	26 05		rol $05			rol CollisionResult
3702	.1e7b	6c 06 00	jmp ($0006)		jmp (Pointer1)

3704	.1e7e					entDown
3705	.1e7e	9c f5 a1	stz $a1f5		stz checkSpriteToCharData.xDeltaCheck
3706	.1e81	b9 1d 1e	lda $1e1d,y		lda entPositiveTBLUD,y
3707	.1e84	8d f6 a1	sta $a1f6		sta checkSpriteToCharData.yDeltaCheck
3708	.1e87					entDownNoDelta
3709	.1e87	20 53 16	jsr $1653		jsr newCollision
3710	.1e8a	a5 24		lda $24			lda CollideCharBLC
3711	.1e8c	20 c2 1a	jsr $1ac2		jsr checkSolidTile
3712	.1e8f	26 05		rol $05			rol CollisionResult
3713	.1e91	a5 26		lda $26			lda CollideCharBRC
3714	.1e93	20 c2 1a	jsr $1ac2		jsr checkSolidTile
3715	.1e96	26 05		rol $05			rol CollisionResult
3716	.1e98	6c 06 00	jmp ($0006)		jmp (Pointer1)

3718	.1e9b					entFishFunc
3719	.1e9b	de 9d a0	dec $a09d,x		dec EntityData.movTimer,x
3720	.1e9e	bd 9d a0	lda $a09d,x		lda EntityData.movTimer,x
3721	.1ea1	30 0e		bmi $1eb1		bmi _next
3722	.1ea3	29 01		and #$01			and #1
3723	.1ea5	d0 07		bne $1eae			bne _exit
3724	.1ea7	bd 1a a1	lda $a11a,x			lda EntityData.entState,x
3725	.1eaa	f0 02		beq $1eae			beq _exit
3726	.1eac	80 17		bra $1ec5				bra _keepGoing
3727	.1eae					_exit
3728	.1eae	4c 65 22	jmp $2265		jmp NextEnt
3729	.1eb1					_next
3730	.1eb1	a9 04		lda #$04		lda #4
3731	.1eb3	9d 9d a0	sta $a09d,x		sta EntityData.movTimer,x
3732	.1eb6					_moveFish
3733	.1eb6	bd 1a a1	lda $a11a,x		lda EntityData.entState,x
3734	.1eb9	18		clc			clc
3735	.1eba	69 01		adc #$01		adc #1
3736	.1ebc	c9 22		cmp #$22		cmp #kSinJumpMax
3737	.1ebe	d0 02		bne $1ec2		bne _storeDirect
3738	.1ec0	a9 21		lda #$21			lda #kSinJumpMax-1
3739	.1ec2					_storeDirect
3740	.1ec2	9d 1a a1	sta $a11a,x		sta EntityData.entState,x
3741	.1ec5					_keepGoing
3742	.1ec5	a8		tay			tay
3743	.1ec6	bd 72 a3	lda $a372,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
3744	.1ec9	18		clc			clc
3745	.1eca	79 67 27	adc $2767,y		adc SinJumpTable,y
3746	.1ecd	c9 c5		cmp #$c5		cmp #kFishLimits.maxY
3747	.1ecf	90 0a		bcc $1edb		bcc _store
3748	.1ed1	9e 1a a1	stz $a11a,x			stz EntityData.entState,x
3749	.1ed4	a9 20		lda #$20			lda #32
3750	.1ed6	9d 9d a0	sta $a09d,x			sta EntityData.movTimer,x
3751	.1ed9	a9 c5		lda #$c5			lda #kFishLimits.maxY
3752	.1edb					_store
3753	.1edb	9d 72 a3	sta $a372,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
3754	.1ede	bd 1a a1	lda $a11a,x		lda EntityData.entState,x
3755	.1ee1	4a		lsr a			lsr a
3756	.1ee2	4a		lsr a			lsr a ; div 4
3757	.1ee3	c9 08		cmp #$08		cmp #8
3758	.1ee5	90 02		bcc $1ee9		bcc _safe
3759	.1ee7	a9 07		lda #$07			lda #7
3760	.1ee9					_safe
3761	.1ee9	18		clc			clc
3762	.1eea	69 d0		adc #$d0		adc #kSprites.fish
3763	.1eec	20 d0 22	jsr $22d0		jsr SetEntSpriteFromFrame
3764	.1eef	4c 65 22	jmp $2265		jmp nextEnt

3766	.1ef2					entSpiderFunc
3767	.1ef2	bd 1a a1	lda $a11a,x		lda EntityData.entState,x
3768	.1ef5	a8		tay			tay
14	.1ef6	b9 02 1f	lda $1f02,y		lda SpiderEntFuncLUT.hi,y
15	.1ef9	48		pha			pha
16	.1efa	b9 ff 1e	lda $1eff,y		lda SpiderEntFuncLUT.lo,y
17	.1efd	48		pha			pha
18	.1efe	60		rts			rts
3770	.1eff					SpiderEntFuncLUT
26	>1eff	04 64 a2			lo .byte <(spiderLookPlayer,spiderFall,spiderRise)-1
27	>1f02	1f 1f 1f			hi .byte >(spiderLookPlayer,spiderFall,spiderRise)-1

3772	.1f05					spiderLookPlayer
3773	.1f05	a2 00		ldx #$00		ldx #0
3774	.1f07	86 10		stx $10			stx ZPTemp2
3775	.1f09	20 4f 16	jsr $164f		jsr convertXSingleByteEntX
3776	.1f0c	85 0f		sta $0f			sta ZPTemp
3777	.1f0e	a6 02		ldx $02			ldx CurrentEntity
435	.1f10	e8		inx			inx
436	.1f11	e8		inx			inx
3779	.1f12	20 4f 16	jsr $164f		jsr convertXSingleByteEntX
3780	.1f15	e5 0f		sbc $0f			sbc ZPTemp
3781	.1f17	85 0f		sta $0f			sta ZPTemp
3782	.1f19	b0 31		bcs $1f4c		bcs _left
3783	.1f1b	c9 d1		cmp #$d1		cmp #kSpiderValues.rightStartWiggle
3784	.1f1d	90 11		bcc $1f30		bcc +
3785	.1f1f	a9 01		lda #$01		lda #1
3786	.1f21	85 10		sta $10			sta ZPTemp2
3787	.1f23	a5 0f		lda $0f			lda ZPTemp
3788	.1f25	c9 e1		cmp #$e1		cmp #kSpiderValues.rightStartFall
3789	.1f27	90 07		bcc $1f30		bcc +
3790	.1f29	a9 01		lda #$01		lda #1
3791	.1f2b	a6 02		ldx $02			ldx CurrentEntity
3792	.1f2d	9d 1a a1	sta $a11a,x		sta EntityData.entState,x
3793	.1f30	a9 ca		lda #$ca	+	lda #kSprites.spiderRight
3794	.1f32					_storeSprite
3795	.1f32	a6 02		ldx $02			ldx CurrentEntity
3796	.1f34	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
3797	.1f37	a5 10		lda $10			lda ZPTemp2
3798	.1f39	f0 06		beq $1f41		beq _noAnim
3799	.1f3b	20 aa 22	jsr $22aa		jsr updateEntAnimAndSetSprite
3800	.1f3e	4c 65 22	jmp $2265		jmp nextEnt
3801	.1f41					_noAnim
3802	.1f41	a6 02		ldx $02			ldx CurrentEntity
3803	.1f43	bd cf a0	lda $a0cf,x		lda EntityData.animBase,x
3804	.1f46	20 d0 22	jsr $22d0		jsr SetEntSpriteFromFrame
3805	.1f49	4c 65 22	jmp $2265		jmp nextEnt
3806	.1f4c					_left
3807	.1f4c	c9 2e		cmp #$2e		cmp #kSpiderValues.leftStartWiggle
3808	.1f4e	b0 11		bcs $1f61		bcs +
3809	.1f50	a9 01		lda #$01			lda #1
3810	.1f52	85 10		sta $10				sta ZPTemp2
3811	.1f54	a5 0f		lda $0f				lda ZPTemp
3812	.1f56	c9 1e		cmp #$1e			cmp #kSpiderValues.leftStartFall
3813	.1f58	b0 07		bcs $1f61			bcs +
3814	.1f5a	a9 01		lda #$01			lda #1
3815	.1f5c	a6 02		ldx $02				ldx CurrentEntity
3816	.1f5e	9d 1a a1	sta $a11a,x			sta EntityData.entState,x
3817	.1f61	a9 c8		lda #$c8	+	lda #kSprites.spiderLeft
3818	.1f63	80 cd		bra $1f32		bra _storeSprite

3820	.1f65					spiderFall
3821	.1f65	20 aa 22	jsr $22aa		jsr updateEntAnimAndSetSprite
3822							;ldy #kEntity.spider
3823	.1f68	ad 48 27	lda $2748		lda CollFrameForEnt+kEntity.spider ;,y
3824	.1f6b	85 1e		sta $1e			sta CollideSpriteBoxIndex
3825	.1f6d	a6 02		ldx $02			ldx CurrentEntity
435	.1f6f	e8		inx			inx
436	.1f70	e8		inx			inx
3827	.1f71	86 1d		stx $1d			stx CollideSpriteToCheck
3828	.1f73	9c f5 a1	stz $a1f5		stz checkSpriteToCharData.xDeltaCheck
3829	.1f76	a9 02		lda #$02		lda #kSpiderValues.yFallDelta
3830	.1f78	8d f6 a1	sta $a1f6		sta checkSpriteToCharData.yDeltaCheck
3831	.1f7b	20 53 16	jsr $1653		jsr newCollision
3832	.1f7e	a5 24		lda $24			lda CollideCharBLC
3833	.1f80	20 c2 1a	jsr $1ac2		jsr checkSolidTile
3834	.1f83	90 0f		bcc $1f94		bcc _noColide
3835	.1f85						_collide
3836	.1f85	a9 02		lda #$02			lda #2
3837	.1f87	a6 02		ldx $02				ldx CurrentEntity
3838	.1f89	9d 1a a1	sta $a11a,x			sta EntityData.entState,x
3839	.1f8c	a9 20		lda #$20			lda #kSpiderValues.pauseEndFallFrames
3840	.1f8e	9d 9d a0	sta $a09d,x			sta EntityData.movTimer,x
3841	.1f91	4c 65 22	jmp $2265			jmp nextEnt
3842	.1f94					_noColide
3843	.1f94	a6 02		ldx $02			ldx CurrentEntity
3844	.1f96	bd 72 a3	lda $a372,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
3845	.1f99	c9 ab		cmp #$ab		cmp #kBounds.screenMaxY-21
3846	.1f9b	b0 e8		bcs $1f85		bcs _collide
3847	.1f9d	20 8c 1d	jsr $1d8c			jsr addYDeltaEnt
3848	.1fa0	4c 65 22	jmp $2265			jmp nextEnt

3850	.1fa3					spiderRise
3851	.1fa3	de 9d a0	dec $a09d,x		dec EntityData.movTimer,x
3852	.1fa6	bd 9d a0	lda $a09d,x		lda EntityData.movTimer,x
3853	.1fa9	10 16		bpl $1fc1		bpl +
3854	.1fab	a9 03		lda #$03		lda #kSpiderValues.riseDelayTime
3855	.1fad	9d 9d a0	sta $a09d,x		sta EntityData.movTimer,x
3856	.1fb0	bd 72 a3	lda $a372,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
3857	.1fb3	38		sec			sec
3858	.1fb4	e9 01		sbc #$01		sbc #1
3859	.1fb6	9d 72 a3	sta $a372,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
3860	.1fb9	dd 01 a1	cmp $a101,x		cmp EntityData.originalY,x
3861	.1fbc	d0 03		bne $1fc1		bne +
3862	.1fbe	9e 1a a1	stz $a11a,x			stz EntityData.entState,x
3863	.1fc1	4c 65 22	jmp $2265	+	jmp nextEnt

3865	.1fc4					circlerFunc
3866	.1fc4	bd 9d a0	lda $a09d,x		lda EntityData.movTimer,x
3867	.1fc7	38		sec			sec
3868	.1fc8	e9 01		sbc #$01		sbc #1
3869	.1fca	30 06		bmi $1fd2		bmi _cirActive
3870	.1fcc	9d 9d a0	sta $a09d,x		sta EntityData.movTimer,x
3871	.1fcf	4c 65 22	jmp $2265		jmp nextEnt
3872	.1fd2					_cirActive
3873	.1fd2	a9 04		lda #$04		lda #4
3874	.1fd4	9d 9d a0	sta $a09d,x		sta EntityData.movTimer,x
3875	.1fd7	bd 1a a1	lda $a11a,x		lda EntityData.entState,x
3876	.1fda	a4 02		ldy $02			ldy CurrentEntity
3877	.1fdc	aa		tax			tax
3878	.1fdd	bd 9b 27	lda $279b,x		lda CircleJumpTableStart,x
3879	.1fe0	8d f5 a1	sta $a1f5		sta checkSpriteToCharData.xDeltaCheck
3880							; add X with MSB offset
3881	.1fe3	b9 32 a3	lda $a332,y		lda mplexBuffer.xpos+kEntsSpriteOffset,y
3882	.1fe6	18		clc			clc
3883	.1fe7	6d f5 a1	adc $a1f5		adc checkSpriteToCharData.xDeltaCheck
3884	.1fea	85 0f		sta $0f			sta ZPTemp
3885							; xdelta +ve if this is +ve but original was -ve we have gone over
3886	.1fec	ad f5 a1	lda $a1f5		lda checkSpriteToCharData.xDeltaCheck
3887	.1fef	30 10		bmi $2001		bmi _subbedX
3888	.1ff1	b9 32 a3	lda $a332,y			lda mplexBuffer.xpos+kEntsSpriteOffset,y
3889	.1ff4	10 19		bpl $200f			bpl _loadX
3890									; so last pos in negative >80
3891	.1ff6	a5 0f		lda $0f					lda ZPTemp
3892	.1ff8	30 15		bmi $200f				bmi _storeX
3893									; new pos is positive 0-80
3894	.1ffa	a9 01		lda #$01					lda #1			; enable MSB
3895	.1ffc	99 52 a3	sta $a352,y					sta mplexBuffer.xmsb+kEntsSpriteOffset,y
3896	.1fff	80 0e		bra $200f					bra _storeX
3897	.2001					_subbedX
3898							; xdelta -ve if this is -ve but original was +ve we have gone over
3899	.2001	b9 32 a3	lda $a332,y		lda mplexBuffer.xpos+kEntsSpriteOffset,y
3900	.2004	30 09		bmi $200f		bmi _loadX
3901								; last post is positive >80
3902	.2006	a5 0f		lda $0f				lda ZPTemp
3903	.2008	10 05		bpl $200f			bpl _storeX
3904	.200a	a9 00		lda #$00				lda #0
3905	.200c	99 52 a3	sta $a352,y				sta mplexBuffer.xmsb+kEntsSpriteOffset,y ; clear msb
3906	.200f					_loadX
3907	.200f					_storeX
3908	.200f	a5 0f		lda $0f			lda ZPTemp
3909	.2011	99 32 a3	sta $a332,y		sta mplexBuffer.xpos+kEntsSpriteOffset,y

3911	.2014	b9 72 a3	lda $a372,y		lda mplexBuffer.ypos+kEntsSpriteOffset,y
3912	.2017	18		clc			clc
3913	.2018	7d a8 27	adc $27a8,x		adc CircleJumpTableStart + ( CircleJumpTableCount / 4) + 1,x
3914	.201b	99 72 a3	sta $a372,y		sta mplexBuffer.ypos+kEntsSpriteOffset,y
3915	.201e	a6 02		ldx $02			ldx CurrentEntity
3916	.2020	bd 1a a1	lda $a11a,x		lda EntityData.entState,x
3917	.2023	18		clc			clc
3918	.2024	69 01		adc #$01		adc #1
3919	.2026	c9 30		cmp #$30		cmp # CircleJumpTableCount
3920	.2028	d0 02		bne $202c		bne _cirStore
3921	.202a	a9 00		lda #$00		lda #0
3922	.202c					_cirStore
3923	.202c	9d 1a a1	sta $a11a,x		sta EntityData.entState,x
3924	.202f	20 aa 22	jsr $22aa		jsr updateEntAnimAndSetSprite
3925	.2032	4c 65 22	jmp $2265		jmp nextEnt

3927	.2035					springEntFunc
3928	.2035	bd 9d a0	lda $a09d,x		lda EntityData.movTimer,x
3929	.2038	38		sec			sec
3930	.2039	e9 01		sbc #$01		sbc #1
3931	.203b	30 06		bmi $2043		bmi _move
3932	.203d	9d 9d a0	sta $a09d,x		sta EntityData.movTimer,x
3933	.2040	4c 65 22	jmp $2265		jmp nextEnt
3934	.2043					_move
3935	.2043	a9 03		lda #$03		lda #3
3936	.2045	9d 9d a0	sta $a09d,x		sta EntityData.movTimer,x
3937							; update Y component
3938	.2048	bd 1a a1	lda $a11a,x		lda EntityData.entState,x
3939	.204b	85 0f		sta $0f			sta ZPTemp
3940	.204d	a8		tay			tay
3941	.204e	b9 67 27	lda $2767,y		lda SinJumpTable,y
3942	.2051	8d f6 a1	sta $a1f6		sta checkSpriteToCharData.yDeltaCheck
3943	.2054	9c f5 a1	stz $a1f5		stz checkSpriteToCharData.xDeltaCheck
3944	.2057	64 05		stz $05			stz CollisionResult
3945	.2059	a9 02		lda #$02		lda #2 ; this might change per frame
3946	.205b	85 1e		sta $1e			sta CollideSpriteBoxIndex
435	.205d	e8		inx			inx
436	.205e	e8		inx			inx
3948	.205f	86 1d		stx $1d			stx CollideSpriteToCheck
3949	.2061	a9 7b		lda #$7b		lda #<springEntYCollideEnd
3950	.2063	85 06		sta $06			sta Pointer1
3951	.2065	a9 20		lda #$20		lda #>springEntYCollideEnd
3952	.2067	85 07		sta $07			sta Pointer1+1
3953	.2069	a5 0f		lda $0f			lda ZPTemp
3954	.206b	c9 11		cmp #$11		cmp #kSinJumpFall
3955	.206d	b0 07		bcs $2076		bcs _falling
3956							; rising
3957	.206f	a9 11		lda #$11		lda #kSinJumpFall ; start falling
3958	.2071	85 10		sta $10			sta ZPTemp2
3959	.2073	4c 4b 1e	jmp $1e4b		jmp entUpNoDelta
3960	.2076					_falling
3961	.2076	64 10		stz $10			stz ZPTemp2
3962	.2078	4c 87 1e	jmp $1e87		jmp entDownNoDelta
3963	.207b					springEntYCollideEnd
3964	.207b	a5 05		lda $05			lda CollisionResult
3965	.207d	d0 21		bne $20a0		bne _hit
3966	.207f	20 97 24	jsr $2497			jsr collideEntAgainstRest
3967	.2082	b0 1c		bcs $20a0			bcs _hit
3968									; didn't hit so carry on
3969	.2084	a6 02		ldx $02					ldx CurrentEntity
3970	.2086	bd 72 a3	lda $a372,x				lda mplexBuffer.ypos+kEntsSpriteOffset,x
3971									;clc
3972	.2089	6d f6 a1	adc $a1f6				adc checkSpriteToCharData.yDeltaCheck
3973	.208c	9d 72 a3	sta $a372,x				sta mplexBuffer.ypos+kEntsSpriteOffset,x
3974	.208f	bd 1a a1	lda $a11a,x				lda EntityData.entState,x
3975	.2092	18		clc					clc
3976	.2093	69 01		adc #$01				adc #1
3977	.2095	c9 22		cmp #$22				cmp #kSinJumpMax
3978	.2097	90 02		bcc $209b				bcc _store
3979	.2099	a9 21		lda #$21					lda #kSinJumpMax-1
3980	.209b					_store
3981	.209b	9d 1a a1	sta $a11a,x		sta EntityData.entState,x
3982	.209e	80 07		bra $20a7		gra springEntHandleX
3983	.20a0					_hit
3984	.20a0	a6 02		ldx $02			ldx CurrentEntity
3985	.20a2	a5 10		lda $10			lda ZPTemp2
3986	.20a4	9d 1a a1	sta $a11a,x		sta EntityData.entState,x
3987	.20a7					springEntHandleX
3988	.20a7	9c f6 a1	stz $a1f6		stz checkSpriteToCharData.yDeltaCheck
3989	.20aa	64 05		stz $05			stz CollisionResult
3990	.20ac	a9 cb		lda #$cb		lda #<springEntXCollideEnd
3991	.20ae	85 06		sta $06			sta Pointer1
3992	.20b0	a9 20		lda #$20		lda #>springEntXCollideEnd
3993	.20b2	85 07		sta $07			sta Pointer1+1
3994	.20b4	bd 6b a0	lda $a06b,x		lda EntityData.direction,x
3995	.20b7	85 0f		sta $0f			sta ZPTemp
3996	.20b9	18		clc			clc
3997	.20ba	69 04		adc #$04		adc #4
3998	.20bc	a8		tay			tay
3999	.20bd	b9 5f 27	lda $275f,y		lda SpringDirectionToDeltaLUT,y
4000	.20c0	8d f5 a1	sta $a1f5		sta checkSpriteToCharData.xDeltaCheck
4001	.20c3	30 03		bmi $20c8		bmi _left
4002	.20c5	4c 2e 1e	jmp $1e2e		jmp entRightNoDelta
4003	.20c8					_left
4004	.20c8	4c 6a 1e	jmp $1e6a		jmp entLeftNoDelta
4005	.20cb					springEntXCollideEnd
4006	.20cb	a6 02		ldx $02			ldx CurrentEntity
4007	.20cd	a5 0f		lda $0f			lda ZPTemp
4008	.20cf	30 30		bmi $2101		bmi springEntXLeft
4009	.20d1	a5 05		lda $05			lda CollisionResult
4010	.20d3	f0 09		beq $20de		beq _noCollideRight
4011	.20d5					_hit
4012	.20d5	a9 ff		lda #$ff		lda #256-1
4013	.20d7	a6 02		ldx $02			ldx CurrentEntity
4014	.20d9	9d 6b a0	sta $a06b,x		sta EntityData.direction,x
4015	.20dc	80 54		bra $2132		bra springEndAnimate
4016	.20de					_noCollideRight
4017	.20de	20 97 24	jsr $2497		jsr collideEntAgainstRest
4018	.20e1	b0 f2		bcs $20d5		bcs _hit
4019	.20e3	a6 02		ldx $02			ldx CurrentEntity
435	.20e5	e8		inx			inx
436	.20e6	e8		inx			inx
4021	.20e7	20 8a 0e	jsr $0e8a		jsr addXWithMSBAndClip
440	.20ea	ca		dex			dex
441	.20eb	ca		dex			dex
4023	.20ec	a5 2f		lda $2f			lda DidClipX
4024	.20ee	f0 04		beq $20f4		beq _noclip
4025	.20f0	a9 ff		lda #$ff			lda #256-1
4026	.20f2	30 08		bmi $20fc			bmi _store
4027	.20f4					_noclip
4028	.20f4	bd 6b a0	lda $a06b,x		lda EntityData.direction,x
4029	.20f7	18		clc			clc
4030	.20f8	69 01		adc #$01		adc #1
4031	.20fa	29 03		and #$03		and #3
4032	.20fc					_store
4033	.20fc	9d 6b a0	sta $a06b,x		sta EntityData.direction,x
4034	.20ff	80 31		bra $2132		gra springEndAnimate
4035	.2101					springEntXLeft
4036	.2101	a5 05		lda $05			lda CollisionResult
4037	.2103	f0 09		beq $210e		beq _noCollideLeft
4038	.2105					_hit
4039	.2105	a9 01		lda #$01		lda #1
4040	.2107	a6 02		ldx $02			ldx CurrentEntity
4041	.2109	9d 6b a0	sta $a06b,x		sta EntityData.direction,x
4042	.210c	80 24		bra $2132		gra springEndAnimate
4043	.210e					_noCollideLeft
4044	.210e	20 97 24	jsr $2497		jsr collideEntAgainstRest
4045	.2111	b0 f2		bcs $2105		bcs _hit
4046	.2113	a6 02		ldx $02			ldx CurrentEntity
435	.2115	e8		inx			inx
436	.2116	e8		inx			inx
4048	.2117	20 8a 0e	jsr $0e8a		jsr addXWithMSBAndClip
440	.211a	ca		dex			dex
441	.211b	ca		dex			dex
4050	.211c	a5 2f		lda $2f			lda DidClipX
4051	.211e	f0 04		beq $2124		beq _noclip2
4052	.2120	a9 01		lda #$01			lda #1
4053	.2122	80 0b		bra $212f			bra _store2
4054	.2124					_noClip2
4055	.2124	bd 6b a0	lda $a06b,x		lda EntityData.direction,x
4056	.2127	38		sec			sec
4057	.2128	e9 01		sbc #$01		sbc #1
4058	.212a	c9 fb		cmp #$fb		cmp #256-5
4059	.212c	d0 01		bne $212f		bne _store2
4060	.212e	1a		inc a				inc a  ;256-4
4061	.212f					_store2
4062	.212f	9d 6b a0	sta $a06b,x		sta EntityData.direction,x
4063	.2132					springEndAnimate
4064	.2132	a6 02		ldx $02			ldx CurrentEntity
4065	.2134	bd 1a a1	lda $a11a,x		lda EntityData.entState,x
4066	.2137	a8		tay			tay
4067	.2138	c9 11		cmp #$11		cmp #kSinJumpFall
4068	.213a	b0 09		bcs $2145		bcs _fall
4069	.213c	b9 8a 27	lda $278a,y			lda SpringFrameFrameTable,y
4070	.213f	20 d0 22	jsr $22d0			jsr SetEntSpriteFromFrame
4071	.2142	4c 65 22	jmp $2265			jmp nextEnt
4072	.2145					_fall
4073	.2145	a9 ac		lda #$ac		lda #kSprites.springFall
4074	.2147	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
4075	.214a	20 aa 22	jsr $22aa		jsr updateEntAnimAndSetSprite
4076	.214d	4c 65 22	jmp $2265		jmp nextEnt

4078	.2150					entGhostFunc
4079	.2150	a9 78		lda #$78		lda #<entGhostXResults
4080	.2152	85 06		sta $06			sta Pointer1
4081	.2154	a9 21		lda #$21		lda #>entGhostXResults
4082	.2156	85 07		sta $07			sta Pointer1+1
435	.2158	e8		inx			inx
436	.2159	e8		inx			inx
4084	.215a	86 1d		stx $1d			stx CollideSpriteToCheck
4085	.215c	a6 02		ldx $02			ldx CurrentEntity
4086	.215e	bd 97 a1	lda $a197,x		lda EntityData.speed,x
4087	.2161	a8		tay			tay
4088	.2162	bd 6b a0	lda $a06b,x		lda EntityData.direction,x
4089	.2165	c9 04		cmp #$04		cmp #4
4090	.2167	90 05		bcc $216e		bcc +
4091	.2169	a9 00		lda #$00		lda #0
4092	.216b	9d 6b a0	sta $a06b,x		sta EntityData.direction,x
4093							; 0 00= UpRight
4094							; 1 01= UpLeft
4095	.216e	29 01		and #$01	+	and #1
4096	.2170	f0 03		beq $2175		beq ghostLeft
4097						; ghostRight
4098	.2172	4c 23 1e	jmp $1e23		jmp entRight
4099	.2175					ghostLeft
4100	.2175	4c 5f 1e	jmp $1e5f		jmp entLeft
4101	.2178					entGhostXResults
4102	.2178	a6 02		ldx $02			ldx CurrentEntity
4103	.217a	a5 05		lda $05			lda CollisionResult
4104	.217c	f0 1b		beq $2199		beq _addXDelta
4105	.217e					_toggleX
4106	.217e	a6 02		ldx $02			ldx CurrentEntity
4107	.2180	bd b0 a1	lda $a1b0,x		lda EntityData.ignoreColl,x
4108	.2183	d0 23		bne $21a8		bne _ignoreCollision
4109	.2185	09 01		ora #$01			ora #1
4110	.2187	9d b0 a1	sta $a1b0,x			sta EntityData.ignoreColl,x
4111	.218a					_toggleXForce
4112	.218a	a6 02		ldx $02			ldx CurrentEntity
4113	.218c	bd 6b a0	lda $a06b,x		lda EntityData.direction,x
4114	.218f	49 01		eor #$01		eor #1
4115	.2191	9d 6b a0	sta $a06b,x		sta EntityData.direction,x
4116	.2194	20 8d 22	jsr $228d		jsr setEntSpriteForDirection
4117	.2197	80 18		bra $21b1		gra entGhostCheckY
4118	.2199					_addXDelta
4119	.2199	20 97 24	jsr $2497		jsr collideEntAgainstRest
4120	.219c	b0 e0		bcs $217e		bcs _togglex
4121	.219e	a6 02		ldx $02				ldx CurrentEntity
4122	.21a0	bd b0 a1	lda $a1b0,x			lda EntityData.ignoreColl,x
4123	.21a3	29 fe		and #$fe			and #$fe ; clear bit 0
4124	.21a5	9d b0 a1	sta $a1b0,x			sta EntityData.ignoreColl,x
4125	.21a8					_ignoreCollision
435	.21a8	e8		inx			inx
436	.21a9	e8		inx			inx
4127	.21aa	20 8a 0e	jsr $0e8a		jsr addXWithMSBAndClip
4128	.21ad	a5 2f		lda $2f			lda DidClipX
4129	.21af	d0 d9		bne $218a		bne _toggleXForce
4130	.21b1					entGhostCheckY
4131	.21b1	a9 cc		lda #$cc		lda #<entGhostYResults
4132	.21b3	85 06		sta $06			sta Pointer1
4133	.21b5	a9 21		lda #$21		lda #>entGhostYResults
4134	.21b7	85 07		sta $07			sta Pointer1+1
4135	.21b9	a6 02		ldx $02			ldx CurrentEntity
4136	.21bb	bd 97 a1	lda $a197,x		lda EntityData.speed,x
4137	.21be	a8		tay			tay
4138	.21bf	bd 6b a0	lda $a06b,x		lda EntityData.direction,x
4139	.21c2	29 02		and #$02		and #2
4140						; 2 10= DownRight
4141						; 3 11= DownLeft
4142	.21c4	d0 03		bne $21c9		bne _down
4143							; up
4144	.21c6	4c 42 1e	jmp $1e42		gra entUp
4145	.21c9					_down
4146	.21c9	4c 7e 1e	jmp $1e7e		gra entDown
4147	.21cc					entGhostYResults
4148	.21cc	a6 02		ldx $02			ldx CurrentEntity
4149	.21ce	a5 05		lda $05			lda CollisionResult
4150	.21d0	f0 16		beq $21e8		beq _entGhostCheckSprites
4151	.21d2					_toggleY
4152	.21d2	a6 02		ldx $02			ldx CurrentEntity
4153	.21d4	bd b0 a1	lda $a1b0,x		lda EntityData.ignoreColl,x
4154	.21d7	d0 1e		bne $21f7		bne _ignoreCollision
4155	.21d9	09 02		ora #$02			ora #2
4156	.21db	9d b0 a1	sta $a1b0,x			sta EntityData.ignoreColl,x
4157	.21de	bd 6b a0	lda $a06b,x			lda EntityData.direction,x
4158	.21e1	49 02		eor #$02			eor #2
4159	.21e3	9d 6b a0	sta $a06b,x			sta EntityData.direction,x
4160	.21e6					_entHitAndGoNext
4161	.21e6	80 7d		bra $2265		gra nextEnt
4162	.21e8					_entGhostCheckSprites
4163	.21e8	20 97 24	jsr $2497		jsr collideEntAgainstRest
4164	.21eb	b0 e5		bcs $21d2		bcs _toggleY
4165	.21ed	a6 02		ldx $02				ldx CurrentEntity
4166	.21ef	bd b0 a1	lda $a1b0,x			lda EntityData.ignoreColl,x
4167	.21f2	29 fd		and #$fd			and #%11111101
4168	.21f4	9d b0 a1	sta $a1b0,x			sta EntityData.ignoreColl,x
4169	.21f7					_ignoreCollision
4170	.21f7	20 8c 1d	jsr $1d8c		jsr addYDeltaEnt
4171	.21fa	20 aa 22	jsr $22aa		jsr updateEntAnimAndSetSprite
4172	.21fd	80 66		bra $2265		gra nextEnt

4174	.21ff					entBat
4175							; we check to see if we can fall down
4176	.21ff	ad 46 27	lda $2746		lda CollFrameForEnt+kEntity.bat ; this might change per frame
4177	.2202	85 1e		sta $1e			sta CollideSpriteBoxIndex
435	.2204	e8		inx			inx
436	.2205	e8		inx			inx
4179	.2206	86 1d		stx $1d			stx CollideSpriteToCheck
4180	.2208	a9 15		lda #$15		lda #<entBatYResults
4181	.220a	85 06		sta $06			sta Pointer1
4182	.220c	a9 22		lda #$22		lda #>entBatYResults
4183	.220e	85 07		sta $07			sta Pointer1+1
4184	.2210	a0 01		ldy #$01		ldy #1 ; fall fast
4185	.2212	4c 7e 1e	jmp $1e7e		gra entDown
4186	.2215					entBatYResults
4187	.2215	a6 02		ldx $02			ldx CurrentEntity
4188	.2217	a5 05		lda $05			lda CollisionResult
4189	.2219	d0 03		bne $221e		bne _dontFall
4190							; yes update Y
4191	.221b	20 8c 1d	jsr $1d8c		jsr addYDeltaEnt
4192	.221e					_dontFall
4193							; jump to normal left right update
4194	.221e	4c ea 1d	jmp $1dea		jmp entNormalMovement

4196	.2221					handleEntCollisionResult
4197	.2221	a6 02		ldx $02			ldx CurrentEntity
4198	.2223	a5 05		lda $05			lda CollisionResult
4199	.2225	f0 13		beq $223a		beq _addDeltas
4200	.2227	80 0c		bra $2235			bra _skipIgnore

4202	.2229					_entHitAndGoNext
4203	.2229	a6 02		ldx $02			ldx CurrentEntity
4204	.222b	bd b0 a1	lda $a1b0,x		lda EntityData.ignoreColl,x
4205	.222e	d0 1c		bne $224c	 	bne _ignoreCollision
4206	.2230	a9 04		lda #$04			lda #4
4207	.2232	9d b0 a1	sta $a1b0,x			sta EntityData.ignoreColl,x
4208	.2235					_skipIgnore
4209	.2235	20 7f 22	jsr $227f		jsr setNextEntDir
4210	.2238	80 2b		bra $2265		gra nextEnt
4211	.223a					_addDeltas
4212	.223a	20 97 24	jsr $2497		jsr collideEntAgainstRest
4213	.223d	b0 ea		bcs $2229		bcs _entHitAndGoNext
4214	.223f	a6 02		ldx $02				ldx CurrentEntity
4215	.2241	bd b0 a1	lda $a1b0,x			lda EntityData.ignoreColl,x
4216	.2244	f0 06		beq $224c			beq _ignoreCollision
4217	.2246	38		sec					sec			; hasn't collided so clear flag
4218	.2247	e9 01		sbc #$01				sbc #1
4219	.2249	9d b0 a1	sta $a1b0,x				sta EntityData.ignoreColl,x
4220	.224c					_ignoreCollision
4221	.224c	20 8c 1d	jsr $1d8c		jsr addYDeltaEnt ; will set X to current Ent
435	.224f	e8		inx			inx
436	.2250	e8		inx			inx
4223	.2251	20 8a 0e	jsr $0e8a		jsr addXWithMSBAndClip
4224	.2254	a5 2f		lda $2f			lda DidClipX
4225	.2256	f0 0d		beq $2265		beq _skipFlipDueToX
4226	.2258	bd 30 a3	lda $a330,x			lda mplexBuffer.xpos,x	; x was increased above
4227	.225b	38		sec				sec
4228	.225c	ed f5 a1	sbc $a1f5			sbc checkSpriteToCharData.xDeltaCheck ; undo the move
4229	.225f	9d 30 a3	sta $a330,x			sta mplexBuffer.xpos,x
4230	.2262	20 7f 22	jsr $227f			jsr setNextEntDir
4231	.2265					_skipFlipDueToX
4232	.2265					nextEnt
4233	.2265	a6 02		ldx $02			ldx CurrentEntity
4234	.2267	4c bb 1d	jmp $1dbb		jmp updateEntitiesLoop

4236	.226a					entBubble
4237	.226a	bd 72 a3	lda $a372,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
4238	.226d	38		sec			sec
4239	.226e	e9 01		sbc #$01		sbc #1
4240	.2270	d0 05		bne $2277		bne _safe
4241	.2272	9e 84 a0	stz $a084,x			stz EntityData.active,x
4242	.2275	a9 ff		lda #$ff			lda #$FF ; disable sprite
4243	.2277					_safe
4244	.2277	9d 72 a3	sta $a372,x		sta mplexBuffer.ypos+kEntsSpriteOffset,x
4245	.227a	20 aa 22	jsr $22aa		jsr updateEntAnimAndSetSprite
4246	.227d	80 e6		bra $2265		gra nextEnt ; for now

4248	.227f					setNextEntDir
4249	.227f	20 9c 22	jsr $229c		jsr getEntTableIndex
4250	.2282	b9 e1 26	lda $26e1,y		lda NextDirectionLUT,y
4251	.2285	9d 6b a0	sta $a06b,x		sta EntityData.direction,x
4252	.2288	05 0f		ora $0f			ora ZPTemp ; add the ent type offset to it
4253	.228a	a8		tay			tay
4254	.228b	80 03		bra $2290		gra setEntFrameForDir

4256	.228d					setEntSpriteForDirection
4257	.228d	20 9c 22	jsr $229c		jsr getEntTableIndex
4258							;jmp setEntFrameForDir
4259	.2290					setEntFrameForDir
4260	.2290	b9 01 27	lda $2701,y		lda BaseAnimeFrameForDir,y
4261	.2293	9d cf a0	sta $a0cf,x		sta EntityData.animBase,x
4262	.2296	18		clc			clc
4263	.2297	7d e8 a0	adc $a0e8,x		adc EntityData.animFrame,x
4264	.229a	80 34		bra $22d0		gra SetEntSpriteFromFrame
4265							;rts

4267	.229c					getEntTableIndex
4268	.229c	a6 02		ldx $02			ldx CurrentEntity
4269	.229e	bd 52 a0	lda $a052,x		lda EntityData.type,x
4270	.22a1	0a		asl a			asl a
4271	.22a2	0a		asl a			asl a
4272	.22a3	85 0f		sta $0f			sta ZPTemp
4273	.22a5	1d 6b a0	ora $a06b,x		ora EntityData.direction,x
4274	.22a8	a8		tay			tay
4275	.22a9	60		rts			rts

4277	.22aa					updateEntAnimAndSetSprite
4278	.22aa	bd 52 a0	lda $a052,x		lda EntityData.type,x
4279	.22ad	a8		tay			tay
4280	.22ae	fe b6 a0	inc $a0b6,x		inc EntityData.animTimer,x
4281	.22b1	bd b6 a0	lda $a0b6,x		lda EntityData.animTimer,x
4282	.22b4	d9 51 27	cmp $2751,y		cmp AnimFrameTimerForEnt,y
4283	.22b7	d0 3d		bne $22f6		bne SetEntSpriteFromFrame._notAnimUpdate ; rts
4284	.22b9	9e b6 a0	stz $a0b6,x			stz EntityData.animTimer,x
4285	.22bc	fe e8 a0	inc $a0e8,x			inc EntityData.animFrame,x
4286	.22bf	bd e8 a0	lda $a0e8,x			lda EntityData.animFrame,x
4287	.22c2	d9 35 27	cmp $2735,y			cmp FrameCountForEnt,y
4288	.22c5	d0 05		bne $22cc			bne _dontResetFrames
4289	.22c7	a9 00		lda #$00				lda #0
4290	.22c9	9d e8 a0	sta $a0e8,x				sta EntityData.animFrame,x
4291	.22cc						_dontResetFrames
4292	.22cc	18		clc				clc
4293	.22cd	7d cf a0	adc $a0cf,x			adc EntityData.animBase,x
4294	.22d0					SetEntSpriteFromFrame
4295	.22d0	9d f2 a2	sta $a2f2,x		sta mplexBuffer.sprp+kEntsSpriteOffset,x ; this needs to be x16 | $800
4296	.22d3	9e 12 a3	stz $a312,x		stz mplexBuffer.sprph+kEntsSpriteOffset,x
4297	.22d6	1e f2 a2	asl $a2f2,x		asl mplexBuffer.sprp+kEntsSpriteOffset,x ; x2
4298	.22d9	3e 12 a3	rol $a312,x		rol mplexBuffer.sprph+kEntsSpriteOffset,x
4299	.22dc	1e f2 a2	asl $a2f2,x		asl mplexBuffer.sprp+kEntsSpriteOffset,x ; x4
4300	.22df	3e 12 a3	rol $a312,x		rol mplexBuffer.sprph+kEntsSpriteOffset,x
4301	.22e2	1e f2 a2	asl $a2f2,x		asl mplexBuffer.sprp+kEntsSpriteOffset,x ; x8
4302	.22e5	3e 12 a3	rol $a312,x		rol mplexBuffer.sprph+kEntsSpriteOffset,x
4303	.22e8	1e f2 a2	asl $a2f2,x		asl mplexBuffer.sprp+kEntsSpriteOffset,x ; x16
4304	.22eb	3e 12 a3	rol $a312,x		rol mplexBuffer.sprph+kEntsSpriteOffset,x
4305	.22ee	bd 12 a3	lda $a312,x		lda mplexBuffer.sprph+kEntsSpriteOffset,x
4306	.22f1	09 08		ora #$08		ora #$08
4307	.22f3	9d 12 a3	sta $a312,x		sta mplexBuffer.sprph+kEntsSpriteOffset,x
4308	.22f6					_notAnimUpdate
4309	.22f6	60		rts			rts


4312	.22f7					updateBubbles
4313	.22f7	ae c9 a1	ldx $a1c9		ldx EntityData.numPipes
4314	.22fa	f0 4a		beq $2346		beq _exit
4315	.22fc	ad 49 a0	lda $a049			lda TickDowns.bubbleTimer
4316	.22ff	d0 45		bne $2346			bne _exit
4317	.2301	ae d3 a1	ldx $a1d3				ldx EntityData.pipeBubbleStart
4318	.2304					_findFreeEnt
4319	.2304	bd 84 a0	lda $a084,x		lda EntityData.active,x
4320	.2307	f0 08		beq $2311		beq _foundOne
4321	.2309	e8		inx				inx
4322	.230a	ec 51 a0	cpx $a051			cpx EntityData.number
4323	.230d	d0 f5		bne $2304			bne _findFreeEnt
4324	.230f	80 35		bra $2346				bra _exit
4325	.2311					_foundOne
4326	.2311	86 10		stx $10			stx ZPTemp2 ; bubble ent number
4327	.2313	a9 01		lda #$01		lda #1
4328	.2315	9d 84 a0	sta $a084,x		sta EntityData.active,x
4329	.2318	ac d2 a1	ldy $a1d2		ldy EntityData.lastPipeUsed
4330	.231b	b9 ca a1	lda $a1ca,y		lda EntityData.pipeIndex,y
4331	.231e	20 aa 1a	jsr $1aaa		jsr convertIndexToEntSpriteXY
4332	.2321	bd 32 a3	lda $a332,x		lda mplexBuffer.xpos+kEntsSpriteOffset,x
4333	.2324	38		sec			sec
4334	.2325	e9 04		sbc #$04		sbc #4
4335	.2327	9d 32 a3	sta $a332,x		sta mplexBuffer.xpos+kEntsSpriteOffset,x
4336	.232a	b0 05		bcs $2331		bcs +
4337	.232c	a9 03		lda #$03			lda #3
4338	.232e	9d 52 a3	sta $a352,x			sta mplexBuffer.xmsb+kEntsSpriteOffset,x
4339	.2331	a9 1e		lda #$1e	+	lda #kTimers.spawnBubble
4340	.2333	8d 49 a0	sta $a049		sta TickDowns.bubbleTimer
4341	.2336	ad d2 a1	lda $a1d2		lda EntityData.lastPipeUsed
4342	.2339	18		clc			clc
4343	.233a	69 01		adc #$01		adc #1
4344	.233c	cd c9 a1	cmp $a1c9		cmp EntityData.numPipes
4345	.233f	d0 02		bne $2343		bne _store
4346	.2341	a9 00		lda #$00			lda #0
4347	.2343					_store
4348	.2343	8d d2 a1	sta $a1d2		sta EntityData.lastPipeUsed
4349	.2346					_exit
4350	.2346	60		rts			rts

4352	.2347					entBoss
4353	.2347	bd 1a a1	lda $a11a,x		lda EntityData.entState,x
4354	.234a	a8		tay			tay
14	.234b	b9 56 23	lda $2356,y		lda BossLUT.hi,y
15	.234e	48		pha			pha
16	.234f	b9 54 23	lda $2354,y		lda BossLUT.lo,y
17	.2352	48		pha			pha
18	.2353	60		rts			rts
4356	.2354					BossLut
26	>2354	57 bd				lo .byte <(BossNormal,BossDeath)-1
27	>2356	23 23				hi .byte >(BossNormal,BossDeath)-1

4358	.2358					BossNormal
4359	.2358	bd 9e a0	lda $a09e,x		lda EntityData.movTimer+1,x
4360	.235b	f0 08		beq $2365		beq _notFlash
4361	.235d	de 9e a0	dec $a09e,x			dec EntityData.movTimer+1,x
4362	.2360	d0 03		bne $2365			bne _notFlash
4363	.2362	20 70 1d	jsr $1d70				jsr setBossToCorrectColour
4364	.2365					_notFlash
4365	.2365	20 29 24	jsr $2429		jsr AnimateUpperHalfBoss
4366	.2368	de 9d a0	dec $a09d,x		dec EntityData.movTimer,x
4367	.236b	f0 3f		beq $23ac		beq _doneMove
4368	.236d	bd 9d a0	lda $a09d,x			lda EntityData.movTimer,x
4369	.2370	c9 10		cmp #$10			cmp #16
4370	.2372	b0 45		bcs $23b9			bcs _noMove
4371	.2374	20 f8 23	jsr $23f8				jsr AnimateLowerHalfBoss
4372	.2377	bd 6b a0	lda $a06b,x				lda EntityData.direction,x
4373	.237a	d0 1b		bne $2397				bne _left
4374	.237c	de 32 a3	dec $a332,x					dec mplexBuffer.xpos+kEntsSpriteOffset,x
4375	.237f	de 34 a3	dec $a334,x					dec mplexBuffer.xpos+kEntsSpriteOffset+2,x
4376	.2382	de 33 a3	dec $a333,x					dec mplexBuffer.xpos+kEntsSpriteOffset+1,x
4377	.2385	de 35 a3	dec $a335,x					dec mplexBuffer.xpos+kEntsSpriteOffset+3,x
4378	.2388	bd 32 a3	lda $a332,x					lda mplexBuffer.xpos+kEntsSpriteOffset,x
4379										; cmp #kBounds.screenMinX this is now 0
4380										.cerror kBounds.screenMinX != 0, "put cmp back"
4381	.238b	d0 2c		bne $23b9					bne _noMove
4382	.238d									_toggleDir
4383	.238d	bd 6b a0	lda $a06b,x						lda EntityData.direction,x
4384	.2390	49 02		eor #$02						eor #2 ; switch from 0 & 2
4385	.2392	9d 6b a0	sta $a06b,x						sta EntityData.direction,x
4386	.2395	80 22		bra $23b9						bra _noMove
4387	.2397						_left
4388	.2397	fe 32 a3	inc $a332,x			inc mplexBuffer.xpos+kEntsSpriteOffset,x
4389	.239a	fe 34 a3	inc $a334,x			inc mplexBuffer.xpos+kEntsSpriteOffset+2,x
4390	.239d	fe 33 a3	inc $a333,x			inc mplexBuffer.xpos+kEntsSpriteOffset+1,x
4391	.23a0	fe 35 a3	inc $a335,x			inc mplexBuffer.xpos+kEntsSpriteOffset+3,x
4392	.23a3	bd 33 a3	lda $a333,x			lda mplexBuffer.xpos+kEntsSpriteOffset+1,x
4393	.23a6	c9 e7		cmp #$e7			cmp #$ff-24
4394	.23a8	f0 e3		beq $238d			beq _toggleDir
4395	.23aa	80 0d		bra $23b9				bra _noMove
4396	.23ac					_doneMove
4397	.23ac	bd 52 a0	lda $a052,x		lda EntityData.type,x
4398	.23af	38		sec			sec
4399	.23b0	e9 08		sbc #$08		sbc #kEntity.bear
4400	.23b2	a8		tay			tay
4401	.23b3	b9 bc 23	lda $23bc,y		lda BossMoveTimerLut,y
4402	.23b6	9d 9d a0	sta $a09d,x		sta EntityData.movTimer,x
4403	.23b9					_noMove
4404	.23b9	4c 65 22	jmp $2265		jmp nextEnt

4406	>23bc	20 18				BossMoveTimerLut .byte 32,24

4408	.23be					BossDeath
4409	.23be	de 72 a3	dec $a372,x		dec mplexBuffer.ypos+kEntsSpriteOffset,x
4410	.23c1	de 73 a3	dec $a373,x		dec mplexBuffer.ypos+kEntsSpriteOffset+1,x
4411	.23c4	fe 74 a3	inc $a374,x		inc mplexBuffer.ypos+kEntsSpriteOffset+2,x
4412	.23c7	fe 75 a3	inc $a375,x		inc mplexBuffer.ypos+kEntsSpriteOffset+3,x
4413	.23ca	de 32 a3	dec $a332,x		dec mplexBuffer.xpos+kEntsSpriteOffset,x
4414	.23cd	de 34 a3	dec $a334,x		dec mplexBuffer.xpos+kEntsSpriteOffset+2,x
4415	.23d0	fe 33 a3	inc $a333,x		inc mplexBuffer.xpos+kEntsSpriteOffset+1,x
4416	.23d3	fe 35 a3	inc $a335,x		inc mplexBuffer.xpos+kEntsSpriteOffset+3,x
4417	.23d6	de 9d a0	dec $a09d,x		dec EntityData.movTimer,x
4418	.23d9	d0 1a		bne $23f5		bne _exit
4419	.23db	9e 84 a0	stz $a084,x			stz EntityData.active,x
4420	.23de	9e 85 a0	stz $a085,x			stz EntityData.active+1,x
4421	.23e1	9e 86 a0	stz $a086,x			stz EntityData.active+2,x
4422	.23e4	9e 87 a0	stz $a087,x			stz EntityData.active+3,x
4423	.23e7	a9 ff		lda #$ff			lda #$ff
4424	.23e9	9d 72 a3	sta $a372,x			sta mplexBuffer.ypos+kEntsSpriteOffset,x
4425	.23ec	9d 73 a3	sta $a373,x			sta mplexBuffer.ypos+kEntsSpriteOffset+1,x
4426	.23ef	9d 74 a3	sta $a374,x			sta mplexBuffer.ypos+kEntsSpriteOffset+2,x
4427	.23f2	9d 75 a3	sta $a375,x			sta mplexBuffer.ypos+kEntsSpriteOffset+3,x
4428	.23f5					_exit
4429	.23f5	4c 65 22	jmp $2265		jmp nextEnt

4431	.23f8					AnimateLowerHalfBoss
4432	.23f8	bd b6 a0	lda $a0b6,x		lda EntityData.animTimer,x
4433	.23fb	f0 04		beq $2401		beq _anim
4434	.23fd	de b6 a0	dec $a0b6,x			dec EntityData.animTimer,x
4435	.2400	60		rts				rts
4436	.2401					_anim
4437	.2401	bd ea a0	lda $a0ea,x		lda EntityData.animFrame+2,x
4438	.2404	49 01		eor #$01		eor #1
4439	.2406	9d ea a0	sta $a0ea,x		sta EntityData.animFrame+2,x
4440	.2409	85 0f		sta $0f			sta ZPTemp
4441	.240b	bd d1 a0	lda $a0d1,x		lda EntityData.animBase+2,x
4442	.240e	18		clc			clc
4443	.240f	65 0f		adc $0f			adc ZPTemp
4444	.2411	e8		inx			inx
4445	.2412	e8		inx			inx
4446	.2413	20 d0 22	jsr $22d0		jsr SetEntSpriteFromFrame
4447	.2416	bd d0 a0	lda $a0d0,x		lda EntityData.animBase+1,x ; x has been increased by 2
4448	.2419	18		clc			clc
4449	.241a	65 0f		adc $0f			adc ZPTemp
4450	.241c	e8		inx			inx
4451	.241d	20 d0 22	jsr $22d0		jsr SetEntSpriteFromFrame
4452	.2420	ca		dex			dex
4453	.2421	ca		dex			dex
4454	.2422	ca		dex			dex
4455	.2423	a9 04		lda #$04		lda #4
4456	.2425	9d b6 a0	sta $a0b6,x		sta EntityData.animTimer,x
4457	.2428	60		rts			rts

4459						;<<<<<32--0--32>>>>>
4460	.2429					AnimateUpperHalfBoss
4461	.2429	86 0f		stx $0f			stx ZPTemp
435	.242b	e8		inx			inx
436	.242c	e8		inx			inx
4463	.242d	20 4f 16	jsr $164f		jsr convertXSingleByteEntX
4464	.2430	85 10		sta $10			sta ZPTemp2
4465	.2432	a2 00		ldx #$00		ldx #0 ; player
4466	.2434	20 4f 16	jsr $164f		jsr convertXSingleByteEntX
4467	.2437	85 11		sta $11			sta ZPTemp3
4468	.2439	c5 10		cmp $10			cmp ZPTemp2
4469	.243b	90 0c		bcc $2449		bcc _playerLeft
4470	.243d	e5 10		sbc $10				sbc ZPTemp2 ; carry is already set
4471	.243f	c9 20		cmp #$20			cmp #32
4472	.2441	90 03		bcc $2446			bcc _under
4473	.2443	a9 02		lda #$02				lda #2
4474	>2445	2c							.byte $2c ; bit XXXX
4475	.2446						_under
4476	.2446	a9 01		lda #$01			lda #1
4477	>2448	2c						.byte $2c
4478	.2449					_playerLeft
4479	.2449	a9 00		lda #$00		lda #0
4480	.244b	85 12		sta $12			sta ZPTemp4
4481	.244d	a6 0f		ldx $0f			ldx ZPTemp
4482	.244f	9d e8 a0	sta $a0e8,x		sta EntityData.animFrame,x
4483	.2452	18		clc			clc
4484	.2453	7d cf a0	adc $a0cf,x		adc EntityData.animBase,x
4485	.2456	20 d0 22	jsr $22d0		jsr SetEntSpriteFromFrame
4486	.2459	a5 12		lda $12			lda ZPTemp4
4487	.245b	18		clc			clc
4488	.245c	7d d0 a0	adc $a0d0,x		adc EntityData.animBase+1,x
4489	.245f	e8		inx			inx
4490	.2460	20 d0 22	jsr $22d0		jsr SetEntSpriteFromFrame
4491	.2463	ca		dex			dex
4492	.2464	60		rts			rts

4494						; }}}
4495						.send sEntity
4496						; ----- @Collision@ -----
4497						.dsection sCollision
4498						.section sCollision
4499						; {{{
4500	.2465					collideBulletAgainstRest
4501	.2465	a0 03		ldy #$03		ldy #3
4502	.2467	a2 01		ldx #$01		ldx #1
4503	.2469	80 04		bra $246f		bra collideAgainstRestEntry
4504	.246b					collidePlayerAgainstRest
4505	.246b	a2 00		ldx #$00		ldx #0
4506	.246d	a0 00		ldy #$00		ldy #0
4507	.246f					collideAgainstRestEntry
4508	.246f	bd 70 a3	lda $a370,x		lda mplexBuffer.ypos,x
4509	.2472	18		clc			clc
4510	.2473	79 3f 16	adc $163f,y		adc CollisionBoxesY,y
4511	.2476	85 0a		sta $0a			sta Pointer3
4512	.2478	85 19		sta $19			sta TestingSprY1
4513	.247a	18		clc			clc
4514	.247b	79 47 16	adc $1647,y		adc CollisionBoxesH,y
4515	.247e	85 0b		sta $0b			sta Pointer3+1
4516	.2480	85 1a		sta $1a			sta TestingSprY2
4517	.2482	20 4f 16	jsr $164f		jsr convertXSingleByteEntX
4518	.2485	18		clc			clc
4519	.2486	79 2f 16	adc $162f,y		adc CollisionBoxesX,y
4520	.2489	85 17		sta $17			sta TestingSprX1
4521	.248b	18		clc			clc
4522	.248c	79 37 16	adc $1637,y		adc CollisionBoxesW,y
4523	.248f	85 18		sta $18			sta TestingSprX2
4524	.2491	a9 ff		lda #$ff		lda #$FF
4525	.2493	85 02		sta $02			sta CurrentEntity ; so we don't skip any
4526	.2495	80 28		bra $24bf		bra collideAgainstEntPlayerEntry
4527	.2497					collideEntAgainstRest
4528							; start at the mplex y + 1 and check to see if the Y is in Range
4529							; to do this we need to know which collsiion box the ent we are is using
4530							; and the one that the other is using
4531							; a hit is if my x1 <= y2 && y1 <= x2
4532							; where x1 = my Ent Y, x2 = my Ent Y+Height
4533							; y1 = Other Ent Y, y2 = other Ent Y+Height
4534							;dec $d020
4535	.2497	a6 02		ldx $02			ldx CurrentEntity
4536	.2499	a0 00		ldy #$00		ldy #0
4537	.249b	bd 33 a1	lda $a133,x		lda EntityData.collisionX1,x
4538	.249e	18		clc			clc
4539	.249f	6d f5 a1	adc $a1f5		adc checkSpriteToCharData.xDeltaCheck
4540	.24a2	85 17		sta $17			sta TestingSprX1 ; cache X
4541	.24a4	bd 4c a1	lda $a14c,x		lda EntityData.collisionX2,x
4542	.24a7	18		clc			clc
4543	.24a8	6d f5 a1	adc $a1f5		adc checkSpriteToCharData.xDeltaCheck
4544	.24ab	85 18		sta $18			sta TestingSprX2
4545	.24ad	bd 65 a1	lda $a165,x		lda EntityData.collisionY1,x
4546	.24b0	18		clc			clc
4547	.24b1	6d f6 a1	adc $a1f6		adc checkSpriteToCharData.yDeltaCheck
4548	.24b4	85 19		sta $19			sta TestingSprY1
4549	.24b6	bd 7e a1	lda $a17e,x		lda EntityData.collisionY2,x
4550	.24b9	18		clc			clc
4551	.24ba	6d f6 a1	adc $a1f6		adc checkSpriteToCharData.yDeltaCheck
4552	.24bd	85 1a		sta $1a			sta TestingSprY2
4553							;inc $d020
4554	.24bf					collideAgainstEntPlayerEntry
4555							;dec $d020
4556	.24bf	a0 02		ldy #$02		ldy #2 ; other slot
4557	.24c1	a2 00		ldx #$00		ldx #0
4558	.24c3	e4 02		cpx $02		-	cpx CurrentEntity
4559	.24c5	f0 1f		beq $24e6		beq Ent_Ent_Coll_skipSelf
4560	.24c7	bd 84 a0	lda $a084,x		lda EntityData.active,x
4561	.24ca	f0 1a		beq $24e6		beq Ent_Ent_Coll_skipSelf
4562	.24cc	30 18		bmi $24e6		bmi Ent_Ent_Coll_skipSelf ; if there active is 0 or - don't collide
4563	.24ce	64 0f		stz $0f			stz ZPTemp
4564	.24d0	a5 19		lda $19			lda TestingSprY1
4565	.24d2	dd 7e a1	cmp $a17e,x		cmp EntityData.collisionY2,x
4566	.24d5	20 39 25	jsr $2539		jsr doMinMaxBitTest
4567	.24d8	bd 65 a1	lda $a165,x		lda EntityData.collisionY1,x
4568	.24db	c5 1a		cmp $1a			cmp TestingSprY2
4569	.24dd	20 39 25	jsr $2539		jsr doMinMaxBitTest
4570	.24e0	a5 0f		lda $0f			lda ZPTemp
4571	.24e2	29 03		and #$03		and #3
4572	.24e4	f0 08		beq $24ee		beq hitY
4573	.24e6					Ent_Ent_Coll_skipSelf
4574	.24e6	e8		inx			inx
4575	.24e7	ec 51 a0	cpx $a051		cpx EntityData.number
4576	.24ea	d0 d7		bne $24c3		bne -
4577							;inc $d020
4578	.24ec	18		clc			clc
4579	.24ed	60		rts			rts

4581	.24ee					hitY ; now we need to do the same thing but for the X
4582	.24ee	64 0f		stz $0f			stz ZPTemp
4583	.24f0	a5 17		lda $17			lda TestingSprX1
4584	.24f2	dd 4c a1	cmp $a14c,x		cmp EntityData.collisionX2,x
4585	.24f5	20 39 25	jsr $2539		jsr doMinMaxBitTest
4586	.24f8	bd 33 a1	lda $a133,x		lda EntityData.collisionX1,x
4587	.24fb	c5 18		cmp $18			cmp TestingSprX2
4588	.24fd	20 39 25	jsr $2539		jsr doMinMaxBitTest
4589	.2500	a5 0f		lda $0f			lda ZPTemp
4590	.2502	29 03		and #$03		and #3
4591	.2504	f0 02		beq $2508		beq hitX
4592	.2506	80 de		bra $24e6			bra Ent_Ent_Coll_skipSelf
4593	.2508					hitX
4594	.2508	38		sec			sec
4595	.2509	60		rts			rts

4597	.250a					MakeMinMaxXYForX
4598	.250a	bd 52 a0	lda $a052,x		lda EntityData.type,x
4599	.250d	a8		tay			tay
4600	.250e	b9 43 27	lda $2743,y		lda CollFrameForEnt,y
4601	.2511	a8		tay			tay
435	.2512	e8		inx			inx
436	.2513	e8		inx			inx
4603	.2514	20 4f 16	jsr $164f		jsr convertXSingleByteEntX
440	.2517	ca		dex			dex
441	.2518	ca		dex			dex
4605	.2519	18		clc			clc
4606	.251a	79 2f 16	adc $162f,y		adc CollisionBoxesX,y
4607	.251d	9d 33 a1	sta $a133,x		sta EntityData.collisionX1,x
4608	.2520	18		clc			clc
4609	.2521	79 37 16	adc $1637,y		adc CollisionBoxesW,y
4610	.2524	9d 4c a1	sta $a14c,x		sta EntityData.collisionX2,x
4611	.2527	bd 72 a3	lda $a372,x		lda mplexBuffer.ypos+kEntsSpriteOffset,x
4612	.252a	18		clc			clc
4613	.252b	79 3f 16	adc $163f,y		adc CollisionBoxesY,y
4614	.252e	9d 65 a1	sta $a165,x		sta EntityData.collisionY1,x
4615	.2531	18		clc			clc
4616	.2532	79 47 16	adc $1647,y		adc CollisionBoxesH,y
4617	.2535	9d 7e a1	sta $a17e,x		sta EntityData.collisionY2,x
4618	.2538	60		rts			rts

4620	.2539					doMinMaxBitTest
4621	.2539	f0 04		beq $253f		beq _secPass
4622	.253b	90 02		bcc $253f		bcc _secPass
4623	.253d	b0 01		bcs $2540			bcs _secFail
4624	.253f					_secPass
4625	.253f	18		clc			clc
4626	.2540					_secFail
4627	.2540	26 0f		rol $0f			rol ZPTemp
4628	.2542	60		rts			rts
4629						.send sCollision
4630						; }}}

4632	.2543					plotStringAAtIndexXGameScreen
4633	.2543	9c 7b 25	stz $257b		stz psaaixCommon._cram+1
4634	.2546	80 05		bra $254d		bra psaaixCommon
4635	.2548					plotStringAAtIndexX
4636	.2548	a0 01		ldy #$01		ldy #1
4637	.254a	8c 7b 25	sty $257b		sty psaaixCommon._cram+1
4638	.254d					psaaixCommon
4639	.254d	9c 25 9f	stz $9f25		stz kVERA.CTRL
4640	.2550	bd 4f 2b	lda $2b4f,x		lda TitleScreenData.stringPos.lo,x
4641	.2553	8d 20 9f	sta $9f20		sta kVERA.ADDR_Lo
4642	.2556	bd 61 2b	lda $2b61,x		lda TitleScreenData.stringPos.hi,x
4643	.2559	8d 21 9f	sta $9f21		sta kVERA.ADDR_Mid
4644	.255c	bd 73 2b	lda $2b73,x		lda TitleScreenData.stringPos.bank,x
4645	.255f	8d 22 9f	sta $9f22		sta kVERA.ADDR_Hi
4646	.2562	bc 3d 2b	ldy $2b3d,x		ldy TitleScreenData.string,x
4647	.2565	b9 91 2b	lda $2b91,y		lda StringTableLUTLo,y
4648	.2568	85 06		sta $06			sta Pointer1.lo
4649	.256a	b9 a1 2b	lda $2ba1,y		lda StringTableLUTHi,y
4650	.256d	85 07		sta $07			sta Pointer1.hi
4651	.256f	a0 00		ldy #$00		ldy #0
4652	.2571	b1 06		lda ($06),y	_l	lda (Pointer1),y
4653	.2573	c9 ff		cmp #$ff		cmp #$ff
4654	.2575	f0 0b		beq $2582		beq _done
4655	.2577	8d 23 9f	sta $9f23			sta kVERA.DATA_0
4656	.257a						_cram
4657	.257a	a9 01		lda #$01			lda #$01	; this needs to changed depending on the screen mode
4658	.257c	8d 23 9f	sta $9f23			sta kVERA.DATA_0
4659	.257f	c8		iny				iny
4660	.2580	d0 ef		bne $2571			bne _l
4661	.2582					_done
4662	.2582	60		rts			rts



4666						; ----- @multiplexor@ -----
4667						.dsection multiplexer
4668						.section multiplexer
4669						; {{{
4670	.2583					setirq
4671	.2583	78		sei			sei			 ;set interrupt disable
4672	.2584	a9 01		lda #$01		lda #1
4673	.2586	8d 26 9f	sta $9f26		sta kVERA.IEN ; enable vsync pulse
4674	.2589	a9 95		lda #$95		lda #<IRQ
4675	.258b	8d 14 03	sta $0314		sta $0314
4676	.258e	a9 25		lda #$25		lda #>IRQ
4677	.2590	8d 15 03	sta $0315		sta $0315
4678	.2593	58		cli			cli
4679	.2594	60		rts			rts

4681	.2595					IRQ
4682	.2595	ee f9 a1	inc $a1f9		inc mplexZP.lsbtod
4683	.2598	ad 27 9f	lda $9f27		lda kVERA.ISR
4684	.259b	8d 27 9f	sta $9f27		sta kVERA.ISR

4686	.259e	20 06 ff	jsr $ff06		jsr GETJOY
4687							; blast the Sprite data into VRAM
4688	.25a1	9c 25 9f	stz $9f25		stz kVERA.CTRL
4689	.25a4	a9 08		lda #$08		lda #<kVERA.SpriteAttributes+8 ; skip first due to cursor
4690	.25a6	8d 20 9f	sta $9f20		sta kVERA.ADDR_Lo
4691	.25a9	a9 50		lda #$50		lda #>kVERA.SpriteAttributes
4692	.25ab	8d 21 9f	sta $9f21		sta kVERA.ADDR_Mid
4693	.25ae	a9 1f		lda #$1f		lda #`kVERA.SpriteAttributes|kVERA.inc_1
4694	.25b0	8d 22 9f	sta $9f22		sta kVERA.ADDR_Hi

4696	.25b3	a2 00		ldx #$00		ldx #0
4697	.25b5	bd f0 a2	lda $a2f0,x	-	lda mplexBuffer.sprp,x
4698	.25b8	8d 23 9f	sta $9f23		sta kVERA.DATA_0
4699	.25bb	bd 10 a3	lda $a310,x		lda mplexBuffer.sprph,x
4700	.25be	8d 23 9f	sta $9f23		sta kVERA.DATA_0
4701	.25c1	bd 30 a3	lda $a330,x		lda mplexBuffer.xpos,x
4702	.25c4	8d 23 9f	sta $9f23		sta kVERA.DATA_0
4703	.25c7	bd 50 a3	lda $a350,x		lda mplexBuffer.xmsb,x
4704	.25ca	8d 23 9f	sta $9f23		sta kVERA.DATA_0
4705	.25cd	bd 70 a3	lda $a370,x		lda mplexBuffer.ypos,x
4706	.25d0	8d 23 9f	sta $9f23		sta kVERA.DATA_0
4707	.25d3	9c 23 9f	stz $9f23		stz kVERA.DATA_0 ; for y high to be 0, it just as fast as a load
4708	.25d6	ad 23 9f	lda $9f23		lda kVERA.DATA_0
4709	.25d9	ad 23 9f	lda $9f23		lda kVERA.DATA_0 ; skip next two bytes
4710	.25dc	e8		inx			inx
4711	.25dd	e0 1e		cpx #$1e		cpx #mplex.kMaxSpr-1
4712	.25df	d0 d4		bne $25b5		bne -
4713	.25e1	7a		ply			ply
4714	.25e2	fa		plx			plx
4715	.25e3	68		pla			pla
4716	.25e4	40		rti			rti

4718						; }}}
4719						.send multiplexer
4720						; ----- @Sprite and Char@ -----
4721						.dsection sSprChar
4722						.section sSprChar
4723						; {{{
4724	.25e5					setupBackDisolveFruitChars
4725	.25e5	ae 24 a0	ldx $a024			ldx LevelData.levelGraphicsSet
4726	.25e8	bd d9 26	lda $26d9,x			lda BackCharsLUT.lo,x
4727	.25eb	85 06		sta $06				sta Pointer1.lo
4728	.25ed	bd dd 26	lda $26dd,x			lda BackCharsLUT.hi,x
4729	.25f0	85 07		sta $07				sta Pointer1.hi
4730								; set up VERA DEST
4731	.25f2	78		sei				sei
300						.if int(kVRAM.gameChars|kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.25f3	a2 10		ldx #$10		ldx #len(VeraDESTAddressLUT)
304	={1048576:10,1052672:8,1052736:11,1053204:5,1053890:12,1054402:13,1054922:14,1055434:15,1055744:9,1058304:16,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVRAM.gameChars|kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000,1055744,$100000,1052736,1053890,1054402,1054922,1055434,$102600]
							VeraDESTAddressLUT ..=[kVRAM.gameChars|kVERA.inc_1]
306						.endif
307	.25f5	20 13 2b	jsr $2b13	jsr setVERAAddressPort0_X

4733									; copy $680 bytes to VRAM
4734	.25f8	a2 05		ldx #$05				ldx #5
4735	.25fa	a0 00		ldy #$00				ldy #0
4736	.25fc	b1 06		lda ($06),y			-	lda (Pointer1),y
4737	.25fe	8d 23 9f	sta $9f23				sta kVERA.DATA_0
4738	.2601	c8		iny					iny
4739	.2602	d0 f8		bne $25fc				bne -
4740	.2604	e6 07		inc $07					inc Pointer1.hi
4741	.2606	ca		dex					dex
4742	.2607	10 f3		bpl $25fc				bpl -
4743	.2609	b1 06		lda ($06),y			-	lda (Pointer1),y
4744	.260b	8d 23 9f	sta $9f23				sta kVERA.DATA_0
4745	.260e	c8		iny					iny
4746	.260f	c0 80		cpy #$80				cpy #$80
4747	.2611	d0 f6		bne $2609				bne -
4748	.2613	58		cli				cli
4749	.2614	60		rts				rts


4752	.2615					copyStuff
4753	.2615	a2 03		ldx #$03		ldx #len(CopyDataFields.values)-1
4754	.2617	86 0f		stx $0f			stx ZPTemp
4755							; use x to index and set up VRAM ports
4756	.2619	9c 25 9f	stz $9f25		stz kVERA.CTRL ; port 0
4757	.261c					_loopSet
4758	.261c	a6 0f		ldx $0f			ldx ZPTemp
4759	.261e	bd 5e 5e	lda $5e5e,x		lda CopyDataFields.dest.lo,x
4760	.2621	8d 20 9f	sta $9f20		sta kVERA.ADDR_Lo
4761	.2624	bd 62 5e	lda $5e62,x		lda CopyDataFields.dest.hi,x
4762	.2627	8d 21 9f	sta $9f21		sta kVERA.ADDR_Mid
4763	.262a	bd 66 5e	lda $5e66,x		lda CopyDataFields.dest.bank,x
4764	.262d	8d 22 9f	sta $9f22		sta kVERA.ADDR_Hi
4765	.2630	bd 56 5e	lda $5e56,x		lda CopyDataFields.src.lo,x
4766	.2633	85 06		sta $06			sta Pointer1.lo
4767	.2635	bd 5a 5e	lda $5e5a,x		lda CopyDataFields.src.hi,x
4768	.2638	85 07		sta $07			sta Pointer1.hi
4769	.263a	bd 6a 5e	lda $5e6a,x		lda CopyDataFields.pages,x
4770	.263d	aa		tax			tax
4771	.263e	a0 00		ldy #$00		ldy #0
4772	.2640					_loopPage
4773	.2640	b1 06		lda ($06),y		lda (Pointer1),y
4774	.2642	8d 23 9f	sta $9f23		sta kVERA.DATA_0
4775	.2645	c8		iny			iny
4776	.2646	d0 f8		bne $2640		bne _loopPage
4777	.2648	e6 07		inc $07			inc Pointer1.hi
4778	.264a	ca		dex			dex
4779	.264b	d0 f3		bne $2640		bne _loopPage
4780	.264d	c6 0f		dec $0f			dec ZPTemp
4781	.264f	10 cb		bpl $261c		bpl _loopSet
4782	.2651	60		rts			rts
4783						.cerror size(CopyDataFields.pages)-1	> 127, "need to change branch"



4787	.2652					PlotTransitionScreenAndMakeNextChars
4788	.2652	20 b4 26	jsr $26b4			jsr ClearMapScreenToSolidBlack
4789								; we need to copy in the current wall char
4790	.2655	78		sei				sei
300						.if int(kVRAM.gameChars+(124*4*8) | kVERA.inc_1) in VeraDESTAddressLUTLookup
302						.else
303	.2656	a2 11		ldx #$11		ldx #len(VeraDESTAddressLUT)
304	={1048576:10,1052672:8,1052736:11,1053204:5,1053890:12,1054402:13,1054922:14,1055434:15,1055744:9,1058304:16,1062272:17,2031617:0,2039808:6,2043904:7,2048000:4,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVRAM.gameChars+(124*4*8) | kVERA.inc_1):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000,1055744,$100000,1052736,1053890,1054402,1054922,1055434,$102600,1062272]
							VeraDESTAddressLUT ..=[kVRAM.gameChars+(124*4*8) | kVERA.inc_1]
306						.endif
307	.2658	20 13 2b	jsr $2b13	jsr setVERAAddressPort0_X

4792	.265b	ae 24 a0	ldx $a024				ldx LevelData.levelGraphicsSet
4793	.265e	bd eb 46	lda $46eb,x				lda WallCharLUT.lo,x
4794	.2661	85 06		sta $06					sta Pointer1.lo
4795	.2663	bd ef 46	lda $46ef,x				lda WallCharLUT.hi,x
4796	.2666	85 07		sta $07					sta Pointer1.hi
4797	.2668	a0 00		ldy #$00				ldy #0
4798	.266a	b1 06		lda ($06),y			-	lda (Pointer1),y
4799	.266c	8d 23 9f	sta $9f23				sta kVERA.DATA_0
4800	.266f	c8		iny					iny
4801	.2670	c0 80		cpy #$80				cpy #(4*8*4) ; copy 4 chars
4802	.2672	d0 f6		bne $266a				bne -
4803	.2674	58		cli				cli

4805	.2675	a9 50		lda #$50			lda #kIntermission.firstExit
4806	.2677	85 15		sta $15				sta ActiveTileIndex
4807	.2679	8d 20 a0	sta $a020			sta LevelData.playerIndex
4808	.267c	8d 21 a0	sta $a021			sta LevelData.exitIndex
4809	.267f	a9 0e		lda #$0e			lda #kDoorOpen
4810	.2681	20 1e 1a	jsr $1a1e			jsr pltSingleTileNoLookupNew
4811	.2684	a9 5f		lda #$5f			lda #kIntermission.secondExit
4812	.2686	85 15		sta $15				sta ActiveTileIndex
4813	.2688	a9 0a		lda #$0a			lda #kDoorClosed
4814	.268a	20 1e 1a	jsr $1a1e			jsr pltSingleTileNoLookupNew
4815	.268d	a2 07		ldx #$07			ldx #(kTileXCount/2)-1
4816	.268f					_firstLoop
4817	.268f	8a		txa				txa
4818	.2690	48		pha				pha
4819	.2691	e6 15		inc $15				inc ActiveTileIndex
4820	.2693	a9 25		lda #$25			lda #kTiles.intermissionOldWall
4821	.2695	20 1e 1a	jsr $1a1e			jsr pltSingleTileNoLookupNew
4822	.2698	68		pla				pla
4823	.2699	aa		tax				tax
4824	.269a	ca		dex				dex
4825	.269b	10 f2		bpl $268f			bpl _firstLoop

4827	.269d	20 14 0a	jsr $0a14			jsr incLevelGraphicSet
4828	.26a0	20 e5 25	jsr $25e5			jsr setupBackDisolveFruitChars

4830	.26a3	a2 07		ldx #$07			ldx #(kTileXCount/2)-1
4831	.26a5					_secondLoop
4832	.26a5	8a		txa				txa
4833	.26a6	48		pha				pha
4834	.26a7	e6 15		inc $15				inc ActiveTileIndex
4835	.26a9	a9 01		lda #$01			lda #kTiles.wall
4836	.26ab	20 1a 1a	jsr $1a1a			jsr pltSingleTileNew
4837	.26ae	68		pla				pla
4838	.26af	aa		tax				tax
4839	.26b0	ca		dex				dex
4840	.26b1	10 f2		bpl $26a5			bpl _secondLoop
4841	.26b3	60		rts				rts

4843	.26b4					ClearMapScreenToSolidBlack
4844	.26b4	78		sei			sei
300						.if int(kVRAM.gameScreen | kVERA.inc_2) in VeraDESTAddressLUTLookup
302						.else
303	.26b5	a2 12		ldx #$12		ldx #len(VeraDESTAddressLUT)
304	={1048576:10,1052672:8,1052736:11,1053204:5,1053890:12,1054402:13,1054922:14,1055434:15,1055744:9,1058304:16,1062272:17,2031617:0,2039808:6,2043904:7,2048000:4,2101248:18,5197827:3,5197830:1,5197831:2}
							VeraDESTAddressLUTLookup := {*VeraDESTAddressLUTLookup, int(kVRAM.gameScreen | kVERA.inc_2):len(VeraDESTAddressLUT)}
305	=[$1f0001,5197830,5197831,5197827,$1f4000,1053204,$1f2000,$1f3000,$101000,1055744,$100000,1052736,1053890,1054402,1054922,1055434,$102600,1062272,$201000]
							VeraDESTAddressLUT ..=[kVRAM.gameScreen | kVERA.inc_2]
306						.endif
307	.26b7	20 13 2b	jsr $2b13	jsr setVERAAddressPort0_X

4846	.26ba	a2 17		ldx #$17			ldx #kTileYCount*2-1
4847	.26bc					_yloop
4848	.26bc	a0 1f		ldy #$1f			ldy #(kTileXCount*2)-1
4849	.26be	a9 2f		lda #$2f			lda #47
4850	.26c0					_xloop
4851	.26c0	8d 23 9f	sta $9f23			sta kVERA.DATA_0
4852	.26c3	88		dey				dey
4853	.26c4	10 fa		bpl $26c0			bpl _xloop
4854	.26c6	ad 20 9f	lda $9f20			lda kVERA.ADDR_Lo
4855	.26c9	18		clc				clc
4856	.26ca	69 40		adc #$40			adc #128-64
4857	.26cc	8d 20 9f	sta $9f20			sta kVERA.ADDR_Lo
4858	.26cf	90 03		bcc $26d4			bcc +
4859	.26d1	ee 21 9f	inc $9f21				inc kVERA.ADDR_Mid
4860	.26d4	ca		dex			+	dex
4861	.26d5	10 e5		bpl $26bc			bpl _yloop
4862	.26d7	58		cli			cli
4863	.26d8	60		rts			rts

4865	.26d9					BackCharsLUT .block
4866	=($2ceb,$336b,$39eb,$406b)			positions = (BackChars1,BackChars2,BackChars3,BackChars4)
4867	>26d9	eb 6b eb 6b				lo .byte <(positions)
4868	>26dd	2c 33 39 40				hi .byte >(positions)
4869						.bend

4871						; 0 = right, 1 = up, 2 = left, 3 = down
4872						;DirectionXLUT	.byte 6,	24-12,	25,		24-12
4873						;DirectionXLUT	.byte 8,	12,		24,	 	12
4874						;DirectionYLUT	.byte 50-8,	50,		50-8,	50-16 ; raw sprite Y offsets
4875	.26e1					NextDirectionLUT
4876	>26e1	03 03 01 01			.byte 3,3,1,1 ; heli
4877	>26e5	00 00 00 00			.byte 0,0,0,0 ; spring
4878	>26e9	02 02 00 00			.byte 2,2,0,0 ; worm
4879	>26ed	02 02 00 00			.byte 2,2,0,0 ; bat
4880	>26f1	03 00 01 02			.byte 3,0,1,2 ; ghost
4881	>26f5	03 03 01 01			.byte 3,3,1,1 ; spider
4882	>26f9	00 00 00 00			.byte 0,0,0,0 ; fish - not used
4883	>26fd	00 00 00 00			.byte 0,0,0,0 ; flying thing - not used
4884	.2701					BaseAnimeFrameForDir
4885	>2701	a0 a0 a0 a0			.byte kSprBase+32,kSprBase+32,kSprBase+32,kSprBase+32 ; heli
4886	>2705	a8 a8 a8 a8			.byte kSprBase+40,kSprBase+40,kSprBase+40,kSprBase+40 ; spring
4887	>2709	b4 b4 b0 b0			.byte kSprBase+52,kSprBase+52,kSprBase+48,kSprBase+48 ; worm
4888	>270d	bc bc b8 b8			.byte kSprBase+60,kSprBase+60,kSprBase+56,kSprBase+56 ; bat
4889	>2711	c0 c4 c0 c4			.byte kSprBase+64,kSprBase+68,kSprBase+64,kSprBase+68 ; ghost
4890	>2715	c8 c8 c8 c8			.byte kSprBase+72,kSprBase+72,kSprBase+72,kSprBase+72 ; spider
4891	>2719	d0 d0 d4 d4			.byte kSprBase+80,kSprBase+80,kSprBase+84,kSprBase+84 ; fish
4892	>271d	dc dc d8 d8			.byte kSprBase+92,kSprBase+92,kSprBase+88,kSprBase+88 ; flying thing
4893	>2721	00 00 00 00			.byte 0,0,0,0 ; bear
4894	>2725	00 00 00 00			.byte 0,0,0,0 ; other bear
4895	>2729	00 00 00 00			.byte 0,0,0,0 ; octopus
4896	>272d	00 00 00 00			.byte 0,0,0,0 ; other octopus
4897	>2731	fc fc fc fc			.byte kSprBase+124,kSprBase+124,kSprBase+124,kSprBase+124 ; bubble
4898	.2735					FrameCountForEnt
4899	>2735	08 04 04 04 04 02 04 04		.byte 008,004,004,004,004,002,004,004,002,002,002,002,003,000
	>273d	02 02 02 02 03 00
4900	.2743					CollFrameForEnt
4901	>2743	00 00 00 00 00 00 00 00		.byte 000,000,000,000,000,000,000,000,004,004,005,005,007,006
	>274b	04 04 05 05 07 06
4902						;CollisionResultEORForEnt
4903						;.byte 000,000,000,001,000,000,000,000,000,000,000,000,000,000
4904	.2751					AnimFrameTimerForEnt
4905	>2751	08 02 08 08 08 08 01 02		.byte 008,002,008,008,008,008,001,002,004,004,004,004,012,004
	>2759	04 04 04 04 0c 04
4906	.275f					SpringDirectionToDeltaLUT
4907	>275f	fe ff ff ff 01 01 01 02		.char -2,-1,-1,-1,01,01,01,02
4908	.2767					SinJumpTable
4909	>2767	fb fb fc fc fb fd		.char -5, -5, -4, -4, -5, -3
4910	>276d	fc fd fe fd ff fe ff 00		.char -4, -3, -2, -3, -1, -2, -1, 0, -1, -1, 0
	>2775	ff ff 00
4911	=17					kSinJumpFall = * - SinJumpTable
4912	>2778	01 02 01 03 02 03 04		.char  1,  2,  1,  3,  2,  3,  4
4913	>277f	03 05 04 05 06 05 06 06		.char  3,  5,  4,  5,  6,  5, 6,  6,  7, 8, 8
	>2787	07 08 08
4914	=34					kSinJumpMax = * - SinJumpTable - 1
4915	.278a					SpringFrameFrameTable
4916	>278a	a9 a9 a9			.byte kSprites.springCompress,kSprites.springCompress,kSprites.springCompress
4917	>278d	a8 a8 a8			.byte kSprites.springNormal,kSprites.springNormal,kSprites.springNormal
4918	>2790	aa aa aa			.byte kSprites.springExpand,kSprites.springExpand,kSprites.springExpand
4919	>2793	ab ab ab			.byte kSprites.springFull,kSprites.springFull,kSprites.springFull
4920	>2796	ab aa aa a8 a8			.byte kSprites.springFull,kSprites.springExpand,kSprites.springExpand,kSprites.springNormal,kSprites.springNormal

4922	.279b					CircleJumpTableStart
4923	>279b	05 05 05 05 04 04 04 03		.char  5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 1, 1, 0,-1,-1,-2,-2,-3,-4,-4,-4,-5,-5,-5,-5
	>27a3	02 02 01 01 00 ff ff fe fe fd fc fc fc fb fb fb
	>27b3	fb
4924	>27b4	fb fb fb fc fc fc fd fd		.char -5,-5,-5,-4,-4,-4,-3,-3,-2,-1,-1, 0, 1, 1, 2, 3, 3, 4, 4, 4, 5, 5, 5
	>27bc	fe ff ff 00 01 01 02 03 03 04 04 04 05 05 05
4925	=48					CircleJumpTableCount = * - CircleJumpTableStart
4926	>27cb	05 05 05 05 04 04 04 03		.char  5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 1, 1, 0
	>27d3	02 02 01 01 00

4928	>27d8	ce cf cf cf cf cf cf d1		statusLine0 .byte kSBC.TL,kSBC.T,kSBC.T,kSBC.T,kSBC.T,kSBC.T,kSBC.T,kSBC.TR
4929	>27e0	d0 cd cd cd cd cd cd d2		statusLine1 .byte kSBC.L ,kSBC.M,kSBC.M,kSBC.M,kSBC.M,kSBC.M,kSBC.M,kSBC.R
4930	>27e8	fa fb fb fb fb fb fb fc		statusLine2 .byte kSBC.BL,kSBC.B,kSBC.B,kSBC.B,kSBC.B,kSBC.B,kSBC.B,kSBC.BR
4931	>27f0	d0 d3 d4 d5 d6 d7 d8 d2		statusLine3 .byte kSBC.L ,kSBC.QWAKT,kSBC.QWAKT+1,kSBC.QWAKT+2,kSBC.QWAKT+3,kSBC.QWAKT+4,kSBC.QWAKT+5,kSBC.R
4932	>27f8	d0 d9 da db dc dd de d2		statusLine4 .byte kSBC.L ,kSBC.QWAKB,kSBC.QWAKB+1,kSBC.QWAKB+2,kSBC.QWAKB+3,kSBC.QWAKB+4,kSBC.QWAKB+5,kSBC.R
4933	>2800	d0 df e0 e1 e2 e3 e4 d2		statusLine5 .byte kSBC.L ,kSBC.Score,kSBC.Score+1,kSBC.Score+2,kSBC.Score+3,kSBC.Score+4,kSBC.Score+5,kSBC.R
4934	>2808	d0 cd e5 e6 e7 e5 cd d2		statusLine6 .byte kSBC.L ,kSBC.M,kSBC.High,kSBC.High+1,kSBC.High+2,kSBC.High,kSBC.M,kSBC.R
4935	>2810	d0 cd e8 e9 cd cd cd d2		statusLine7 .byte kSBC.L ,kSBC.M,kSBC.QwakP,kSBC.QwakP+1,kSBC.M,kSBC.M,kSBC.M,kSBC.R
4936	>2818	d0 cd ea eb cc cd cd d2		statusLine8 .byte kSBC.L ,kSBC.M,kSBC.QwakP+2,kSBC.QwakP+3,kSBC.X,kSBC.M,kSBC.M,kSBC.R
4937	>2820	d0 cd ec ed cd cd cd d2		statusLine9 .byte kSBC.L ,kSBC.M,kSBC.Flower,kSBC.Flower+1,kSBC.M,kSBC.M,kSBC.M,kSBC.R
4938	>2828	d0 cd ee ef cc cd cd d2		statusLine10 .byte kSBC.L ,kSBC.M,kSBC.Flower+2,kSBC.Flower+3,kSBC.X,kSBC.M,kSBC.M,kSBC.R
4939						.comment
4951						.endc
4952	>2830	00 01 03 04 01 02 00 01		statusLines .byte 0,1,3,4,1,2,0,1,5,1,1,1,6,1,1,1,7,8,1,1,9,10,1,2
	>2838	05 01 01 01 06 01 01 01 07 08 01 01 09 0a 01 02

4954						; }}}
4955						.send sSprChar

4957						.dsection sPassword
4958						.section sPassword
4959						; ----- @password functions@ -----
4960	.2848					loadPasswordTemp
4961	.2848	a2 0f		ldx #$0f		ldx #15
4962	.284a	bd 0d a0	lda $a00d,x	-	lda GameData,x
4963	.284d	9d d4 a1	sta $a1d4,x		sta PasswordTemp,x
4964	.2850	ca		dex			dex
4965	.2851	10 f7		bpl $284a		bpl -
4966	.2853	ad 24 a0	lda $a024		lda LevelData.levelGraphicsSet
4967	.2856	0a		asl a			asl a
4968	.2857	0a		asl a			asl a
4969	.2858	8d db a1	sta $a1db		sta PasswordTemp.score+5
4970	.285b	60		rts			rts

4972	.285c					unloadPasswordTemp
4973	.285c	a2 0f		ldx #$0f		ldx #15
4974	.285e	bd d4 a1	lda $a1d4,x	-	lda PasswordTemp,x
4975	.2861	9d 0d a0	sta $a00d,x		sta GameData,x
4976	.2864	ca		dex			dex
4977	.2865	10 f7		bpl $285e		bpl -
4978	.2867	ad db a1	lda $a1db		lda PasswordTemp.score+5
4979	.286a	4a		lsr a			lsr a
4980	.286b	4a		lsr a			lsr a
4981	.286c	29 03		and #$03		and #3
4982	.286e	8d 24 a0	sta $a024		sta LevelData.levelGraphicsSet
4983	.2871	60		rts			rts

4985						; carry set = fail
4986	.2872					validateExtractedPassword
4987	.2872	a2 05		ldx #$05		ldx #5
4988	.2874	bd dc a1	lda $a1dc,x	-	lda PasswordTemp.high,x
4989	.2877	c9 0a		cmp #$0a		cmp #10
4990	.2879	b0 0f		bcs $288a		bcs _fail
4991	.287b	bd d6 a1	lda $a1d6,x		lda PasswordTemp.score,x
4992	.287e	c9 0a		cmp #$0a		cmp #10
4993	.2880	b0 08		bcs $288a		bcs _fail
4994	.2882	ca		dex			dex
4995	.2883	10 ef		bpl $2874		bpl -
4996	.2885	ad d4 a1	lda $a1d4		lda PasswordTemp.lives
4997	.2888	c9 0a		cmp #$0a		cmp #10
4998	.288a					_fail
4999	.288a	60		rts			rts

5001	.288b					makePassword
5002	.288b	a2 0b		ldx #$0b		ldx #11
5003	.288d	a9 00		lda #$00		lda #0
5004	.288f	9d e3 a1	sta $a1e3,x	-	sta ActivePassword,x
5005	.2892	ca		dex			dex
5006	.2893	10 fa		bpl $288f		bpl -
5007	.2895	aa		tax			tax
5008	.2896	64 0f		stz $0f			stz ZPTemp ; score index
5009	.2898	64 10		stz $10			stz ZPTemp2 ; password index
5010	.289a	64 11		stz $11			stz ZPTemp3 ; password counter
5011	.289c	64 12		stz $12			stz ZPTemp4 ; score counter
5012							;1st 5 bits SHVSH
5013	.289e	20 c7 29	jsr $29c7		jsr pushOutScoreHiscorePair ; SH
5014	.28a1	4e e2 a1	lsr $a1e2		lsr PasswordTemp.currLevel
5015	.28a4	2e e3 a1	rol $a1e3		rol ActivePassword				; V
5016	.28a7	e6 11		inc $11			inc ZPTemp3					; count V
5017	.28a9	20 c7 29	jsr $29c7		jsr pushOutScoreHiscorePair ; SH
5018							;2nd 5 bits VSHVS
5019	.28ac	4e e2 a1	lsr $a1e2		lsr PasswordTemp.currLevel
5020	.28af	2e e4 a1	rol $a1e4		rol ActivePassword+1				; V
5021	.28b2	e6 11		inc $11			inc ZPTemp3
5022	.28b4	20 c7 29	jsr $29c7		jsr pushOutScoreHiscorePair ; SH
5023	.28b7	4e e2 a1	lsr $a1e2		lsr PasswordTemp.currLevel
5024	.28ba	2e e4 a1	rol $a1e4		rol ActivePassword+1				; V
5025	.28bd	e6 11		inc $11			inc ZPTemp3
5026	.28bf	20 c7 29	jsr $29c7		jsr pushOutScoreHiscorePair ; S
5027							; 3rd 5 bits HVSHV
5028														; H
5029	.28c2	4e e2 a1	lsr $a1e2		lsr PasswordTemp.currLevel
5030	.28c5	2e e5 a1	rol $a1e5		rol ActivePassword+2				; V
5031	.28c8	e6 11		inc $11			inc ZPTemp3
5032	.28ca	20 c7 29	jsr $29c7		jsr pushOutScoreHiscorePair ; SH
5033	.28cd	4e e2 a1	lsr $a1e2		lsr PasswordTemp.currLevel
5034	.28d0	2e e5 a1	rol $a1e5		rol ActivePassword+2				; V
5035	.28d3	20 e3 29	jsr $29e3		jsr nextPassword
5036							; 4th 5 bits SHLSH
5037	.28d6	20 c7 29	jsr $29c7		jsr pushOutScoreHiscorePair ; SH
5038	.28d9	4e d4 a1	lsr $a1d4		lsr PasswordTemp.lives
5039	.28dc	2e e6 a1	rol $a1e6		rol ActivePassword+3				; L
5040	.28df	e6 11		inc $11			inc ZPTemp3
5041	.28e1	20 c7 29	jsr $29c7		jsr pushOutScoreHiscorePair ; SH
5042							; 5th 5 bits LSHLS
5043	.28e4	4e d4 a1	lsr $a1d4		lsr PasswordTemp.lives
5044	.28e7	2e e7 a1	rol $a1e7		rol ActivePassword+4				; L
5045	.28ea	e6 11		inc $11			inc ZPTemp3
5046	.28ec	20 c7 29	jsr $29c7		jsr pushOutScoreHiscorePair ; SH
5047	.28ef	4e d4 a1	lsr $a1d4		lsr PasswordTemp.lives
5048	.28f2	2e e7 a1	rol $a1e7		rol ActivePassword+4				; L
5049	.28f5	e6 11		inc $11			inc ZPTemp3
5050	.28f7	20 c7 29	jsr $29c7		jsr pushOutScoreHiscorePair ; S
5051							; 6th 5 bits HLSHF
5052														; H
5053	.28fa	4e d4 a1	lsr $a1d4		lsr PasswordTemp.lives
5054	.28fd	2e e8 a1	rol $a1e8		rol ActivePassword+5				; L
5055	.2900	e6 11		inc $11			inc ZPTemp3
5056	.2902	20 c7 29	jsr $29c7		jsr pushOutScoreHiscorePair ; SH
5057	.2905	4e d5 a1	lsr $a1d5		lsr PasswordTemp.Flowers
5058	.2908	2e e8 a1	rol $a1e8		rol ActivePassword+5				; F
5059	.290b	20 e3 29	jsr $29e3		jsr nextPassword
5060							; 7th 5 bits SHFSH
5061	.290e	20 c7 29	jsr $29c7		jsr pushOutScoreHiscorePair ; SH
5062	.2911	4e d5 a1	lsr $a1d5		lsr PasswordTemp.Flowers
5063	.2914	2e e9 a1	rol $a1e9		rol ActivePassword+6				; F
5064	.2917	e6 11		inc $11			inc ZPTemp3
5065	.2919	20 c7 29	jsr $29c7		jsr pushOutScoreHiscorePair ; SH
5066							; 8th 5 bits FSHSH
5067	.291c	4e d5 a1	lsr $a1d5		lsr PasswordTemp.Flowers
5068	.291f	2e ea a1	rol $a1ea		rol ActivePassword+7				; F
5069	.2922	e6 11		inc $11			inc ZPTemp3
5070	.2924	a0 0b		ldy #$0b		ldy #11
5071	.2926	20 c7 29	jsr $29c7	-	jsr pushOutScoreHiscorePair ; SH
5072	.2929	88		dey			dey
5073	.292a	10 fa		bpl $2926		bpl -
5074	.292c	60		rts			rts

5076	.292d					extractPassword
5077	.292d	a2 03		ldx #$03		ldx #3
5078	.292f	86 12		stx $12			stx ZPTemp4 ; score counter
5079	.2931	e8		inx			inx
5080	.2932	86 11		stx $11			stx ZPTemp3 ; password counter
5081	.2934	e8		inx			inx
5082	.2935	86 0f		stx $0f			stx ZPTemp ; score index
5083	.2937	a0 0b		ldy #$0b		ldy #11
5084	.2939	84 10		sty $10			sty ZPTemp2 ; password index
5085	.293b	20 fd 29	jsr $29fd	-	jsr pullOutHiScoreScorePair ; SH
5086	.293e	88		dey			dey
5087	.293f	10 fa		bpl $293b		bpl -
5088	.2941	4e ea a1	lsr $a1ea		lsr ActivePassword+7				; F
5089	.2944	2e d5 a1	rol $a1d5		rol PasswordTemp.Flowers
5090	.2947	20 19 2a	jsr $2a19		jsr prevPassword
5091							;
5092	.294a	20 fd 29	jsr $29fd		jsr pullOutHiScoreScorePair ; SH
5093	.294d	4e e9 a1	lsr $a1e9		lsr ActivePassword+6				; F
5094	.2950	2e d5 a1	rol $a1d5		rol PasswordTemp.Flowers
5095	.2953	c6 11		dec $11			dec ZPTemp3
5096	.2955	20 fd 29	jsr $29fd		jsr pullOutHiScoreScorePair ; sh
5097							;
5098	.2958	4e e8 a1	lsr $a1e8		lsr ActivePassword+5				; F
5099	.295b	2e d5 a1	rol $a1d5		rol PasswordTemp.Flowers
5100	.295e	c6 11		dec $11			dec ZPTemp3
5101	.2960	20 fd 29	jsr $29fd		jsr pullOutHiScoreScorePair ; sh
5102	.2963	4e e8 a1	lsr $a1e8		lsr ActivePassword+5
5103	.2966	2e d4 a1	rol $a1d4		rol PasswordTemp.Lives					; l
5104	.2969	c6 11		dec $11			dec ZPTemp3
5105	.296b	20 fd 29	jsr $29fd		jsr pullOutHiScoreScorePair ; s
5106							;
5107														; h
5108	.296e	4e e7 a1	lsr $a1e7		lsr ActivePassword+4
5109	.2971	2e d4 a1	rol $a1d4		rol PasswordTemp.Lives					; l
5110	.2974	c6 11		dec $11			dec ZPTemp3
5111	.2976	20 fd 29	jsr $29fd		jsr pullOutHiScoreScorePair ; sh
5112	.2979	4e e7 a1	lsr $a1e7		lsr ActivePassword+4
5113	.297c	2e d4 a1	rol $a1d4		rol PasswordTemp.Lives					; l
5114	.297f	20 19 2a	jsr $2a19		jsr prevPassword
5115							;
5116	.2982	20 fd 29	jsr $29fd		jsr pullOutHiScoreScorePair ; sh
5117	.2985	4e e6 a1	lsr $a1e6		lsr ActivePassword+3
5118	.2988	2e d4 a1	rol $a1d4		rol PasswordTemp.Lives					; l
5119	.298b	c6 11		dec $11			dec ZPTemp3
5120	.298d	20 fd 29	jsr $29fd		jsr pullOutHiScoreScorePair ; sh
5121							;
5122	.2990	4e e5 a1	lsr $a1e5		lsr ActivePassword+2				; V
5123	.2993	2e e2 a1	rol $a1e2		rol PasswordTemp.currLevel
5124	.2996	c6 11		dec $11			dec ZPTemp3
5125	.2998	20 fd 29	jsr $29fd		jsr pullOutHiScoreScorePair ; sh
5126	.299b	4e e5 a1	lsr $a1e5		lsr ActivePassword+2				; V
5127	.299e	2e e2 a1	rol $a1e2		rol PasswordTemp.currLevel
5128	.29a1	c6 11		dec $11			dec ZPTemp3
5129	.29a3	20 fd 29	jsr $29fd		jsr pullOutHiScoreScorePair ; s
5130							;
5131														; h
5132	.29a6	4e e4 a1	lsr $a1e4		lsr ActivePassword+1				; V
5133	.29a9	2e e2 a1	rol $a1e2		rol PasswordTemp.currLevel
5134	.29ac	c6 11		dec $11			dec ZPTemp3
5135	.29ae	20 fd 29	jsr $29fd		jsr pullOutHiScoreScorePair ;sh
5136	.29b1	4e e4 a1	lsr $a1e4		lsr ActivePassword+1				; V
5137	.29b4	2e e2 a1	rol $a1e2		rol PasswordTemp.currLevel
5138	.29b7	20 19 2a	jsr $2a19		jsr prevPassword
5139							;
5140	.29ba	20 fd 29	jsr $29fd		jsr pullOutHiScoreScorePair ;sh
5141	.29bd	4e e3 a1	lsr $a1e3		lsr ActivePassword				; V
5142	.29c0	2e e2 a1	rol $a1e2		rol PasswordTemp.currLevel
5143	.29c3	c6 11		dec $11			dec ZPTemp3
5144	.29c5	80 36		bra $29fd		gra pullOutHiScoreScorePair ;sh
5145							;rts

5147	.29c7					pushOutScoreHiscorePair
5148	.29c7	a6 0f		ldx $0f			ldx ZPTemp
5149	.29c9	5e d6 a1	lsr $a1d6,x		lsr PasswordTemp.Score,x
5150	.29cc	a6 10		ldx $10			ldx ZPTemp2
5151	.29ce	3e e3 a1	rol $a1e3,x		rol ActivePassword,x
5152	.29d1	20 e3 29	jsr $29e3		jsr nextPassword
5153	.29d4	a6 0f		ldx $0f			ldx ZPTemp
5154	.29d6	5e dc a1	lsr $a1dc,x		lsr PasswordTemp.high,x
5155	.29d9	a6 10		ldx $10			ldx ZPTemp2
5156	.29db	3e e3 a1	rol $a1e3,x		rol ActivePassword,x
5157	.29de	20 e3 29	jsr $29e3		jsr nextpassword
5158	.29e1	80 0d		bra $29f0		bra nextScore

5160	.29e3					nextPassword
5161	.29e3	e6 11		inc $11			inc ZPTemp3
5162	.29e5	a5 11		lda $11			lda ZPTemp3
5163	.29e7	c9 05		cmp #$05		cmp #5
5164	.29e9	d0 04		bne $29ef		bne +
5165	.29eb	64 11		stz $11				stz ZPTemp3
5166	.29ed	e6 10		inc $10				inc ZPTemp2
5167	.29ef	60		rts		+	rts

5169	.29f0					nextScore
5170	.29f0	e6 12		inc $12			inc ZPTemp4
5171	.29f2	a5 12		lda $12			lda ZPTemp4
5172	.29f4	c9 04		cmp #$04		cmp #4
5173	.29f6	d0 04		bne $29fc		bne +
5174	.29f8	64 12		stz $12				stz ZPTemp4
5175	.29fa	e6 0f		inc $0f				inc ZPTemp
5176	.29fc	60		rts		+	rts

5178	.29fd					pullOutHiScoreScorePair
5179	.29fd	a6 10		ldx $10			ldx ZPTemp2
5180	.29ff	5e e3 a1	lsr $a1e3,x		lsr ActivePassword,x
5181	.2a02	a6 0f		ldx $0f			ldx ZPTemp
5182	.2a04	3e dc a1	rol $a1dc,x		rol PasswordTemp.high,x
5183	.2a07	20 19 2a	jsr $2a19		jsr prevPassword
5184	.2a0a	a6 10		ldx $10			ldx ZPTemp2
5185	.2a0c	5e e3 a1	lsr $a1e3,x		lsr ActivePassword,x
5186	.2a0f	a6 0f		ldx $0f			ldx ZPTemp
5187	.2a11	3e d6 a1	rol $a1d6,x		rol PasswordTemp.Score,x
5188	.2a14	20 19 2a	jsr $2a19		jsr prevPassword
5189	.2a17	80 0b		bra $2a24		bra prevScore

5191	.2a19					prevPassword
5192	.2a19	c6 11		dec $11			dec ZPTemp3
5193	.2a1b	10 06		bpl $2a23		bpl +
5194	.2a1d	a9 04		lda #$04		lda #4
5195	.2a1f	85 11		sta $11			sta ZPTemp3
5196	.2a21	c6 10		dec $10			dec ZPTemp2
5197	.2a23	60		rts		+	rts

5199	.2a24					prevScore
5200	.2a24	c6 12		dec $12			dec ZPTemp4
5201	.2a26	10 06		bpl $2a2e		bpl +
5202	.2a28	a9 03		lda #$03		lda #3
5203	.2a2a	85 12		sta $12			sta ZPTemp4
5204	.2a2c	c6 0f		dec $0f			dec ZPTemp
5205	.2a2e	60		rts		+	rts

5207	.2a2f					convertToPasswordLetter
5208	.2a2f	f0 32		beq $2a63		beq _at
5209	.2a31	c9 16		cmp #$16		cmp #22
5210	.2a33	f0 31		beq $2a66		beq _zero
5211	.2a35	18		clc			clc
5212	.2a36	69 80		adc #$80		adc #128
5213	.2a38	c9 80		cmp #$80		cmp #0+128
5214	.2a3a	f0 26		beq $2a62		beq _exit
5215	.2a3c	18		clc			clc
5216	.2a3d	69 01		adc #$01		adc #1 ; 1 = B
5217	.2a3f	c9 82		cmp #$82		cmp #2+128
5218	.2a41	f0 1f		beq $2a62		beq _exit
5219	.2a43	18		clc			clc
5220	.2a44	69 01		adc #$01		adc #1 ; 2 = D
5221	.2a46	c9 8b		cmp #$8b		cmp #11+128
5222	.2a48	90 18		bcc $2a62		bcc _exit
5223	.2a4a	18		clc			clc
5224	.2a4b	69 01		adc #$01		adc #1 ; 9 = L
5225	.2a4d	c9 91		cmp #$91		cmp #17+128
5226	.2a4f	90 11		bcc $2a62		bcc _exit
5227	.2a51	18		clc			clc
5228	.2a52	69 01		adc #$01		adc #1 ; 14 = R
5229	.2a54	c9 97		cmp #$97		cmp #23+128
5230	.2a56	90 0a		bcc $2a62		bcc _exit
5231	.2a58	18		clc			clc
5232	.2a59	69 01		adc #$01		adc #1 ; 19 = X
5233	.2a5b	c9 9b		cmp #$9b		cmp #27+128
5234	.2a5d	90 03		bcc $2a62		bcc _exit
5235	.2a5f	18		clc			clc
5236	.2a60	69 15		adc #$15		adc #21 ; 22 = 0
5237	.2a62					_exit
5238	.2a62	60		rts			rts
5239	.2a63					_at
5240	.2a63	a9 bd		lda #$bd		lda #61+128
5241	.2a65	60		rts			rts
5242	.2a66					_zero
5243	.2a66	a9 ab		lda #$ab		lda #43+128
5244	.2a68	60		rts			rts

5246	.2a69					convertLetterToNumber
5247	.2a69	38		sec			sec
5248	.2a6a	e9 80		sbc #$80		sbc #128
5249	.2a6c	f0 0e		beq $2a7c		beq _exit ; @ case
5250	.2a6e	c9 2b		cmp #$2b			cmp #43 ; +
5251	.2a70	f0 0b		beq $2a7d			beq _fake0
5252	.2a72	c9 3d		cmp #$3d				cmp #61
5253	.2a74	f0 0a		beq $2a80				beq _fakeAt ; = case
5254	.2a76	c9 30		cmp #$30					cmp #48
5255	.2a78	90 09		bcc $2a83					bcc _notANum
5256											;sec branch make sec
5257	.2a7a	e9 1a		sbc #$1a						sbc #26 ; 0-9 convertion
5258	.2a7c					_exit
5259	.2a7c	60		rts			rts

5261	.2a7d					_fake0
5262	.2a7d	a9 16		lda #$16		lda #22
5263	.2a7f	60		rts			rts

5265	.2a80					_fakeAt
5266	.2a80	a9 00		lda #$00		lda #0
5267	.2a82	60		rts			rts

5269	.2a83					_notANum
5270	.2a83	38		sec			sec
5271	.2a84	e9 01		sbc #$01		sbc #1 ; B
5272	.2a86	c9 03		cmp #$03		cmp #3
5273	.2a88	90 f2		bcc $2a7c		bcc _exit
5274								;sec
5275	.2a8a	e9 01		sbc #$01			sbc #1 ; D
5276	.2a8c	c9 09		cmp #$09			cmp #9
5277	.2a8e	90 ec		bcc $2a7c			bcc _exit
5278									;sec
5279	.2a90	e9 01		sbc #$01				sbc #1
5280	.2a92	c9 0e		cmp #$0e				cmp #14
5281	.2a94	90 e6		bcc $2a7c				bcc _exit
5282										;sec
5283	.2a96	e9 01		sbc #$01					sbc #1
5284	.2a98	c9 13		cmp #$13					cmp #19
5285	.2a9a	90 e0		bcc $2a7c					bcc _exit
5286											;sec branch makes sec
5287	.2a9c	e9 01		sbc #$01						sbc #1
5288	.2a9e	60		rts							rts

5290	.2a9f					convertASCIIToQwakChar
5291	.2a9f	c9 2b		cmp #$2b		cmp #43 ; +
5292	.2aa1	f0 0b		beq $2aae		beq _number ; add 128
5293	.2aa3	c9 3d		cmp #$3d		cmp #61
5294	.2aa5	f0 07		beq $2aae		beq _number ; add 128
5295	.2aa7	c9 40		cmp #$40		cmp #64
5296	.2aa9	90 03		bcc $2aae		bcc _number
5297	.2aab	69 3f		adc #$3f		adc #63
5298	.2aad	60		rts			rts
5299	.2aae					_number
5300	.2aae	18		clc			clc
5301	.2aaf	69 80		adc #$80		adc #128
5302	.2ab1	60		rts			rts

5304	.2ab2					isValidLetter
5305	.2ab2	c9 ab		cmp #$ab		cmp #43+128 ; +
5306	.2ab4	f0 0c		beq $2ac2		beq _yes
5307	.2ab6	c9 bd		cmp #$bd		cmp #61+128 ; =
5308	.2ab8	f0 08		beq $2ac2		beq _yes
5309	.2aba	c9 b1		cmp #$b1		cmp #49+128
5310	.2abc	90 06		bcc $2ac4		bcc _checkAZ
5311	.2abe	c9 ba		cmp #$ba		cmp #58+128
5312	.2ac0	b0 16		bcs $2ad8		bcs _no
5313	.2ac2					_yes
5314	.2ac2	38		sec			sec
5315	.2ac3	60		rts			rts
5316	.2ac4					_checkAZ
5317	.2ac4	c9 9b		cmp #$9b		cmp #91+64	; {
5318	.2ac6	b0 10		bcs $2ad8		bcs _no
5319	.2ac8	c9 82		cmp #$82		cmp #66+64	; <A
5320	.2aca	90 0c		bcc $2ad8		bcc _no
5321	.2acc	c9 8b		cmp #$8b		cmp #75+64	; K
5322	.2ace	f0 08		beq $2ad8		beq _no
5323	.2ad0	c9 91		cmp #$91		cmp #81+64	; Q
5324	.2ad2	f0 04		beq $2ad8		beq _no
5325	.2ad4	c9 97		cmp #$97		cmp #87+64	; W
5326	.2ad6	d0 ea		bne $2ac2		bne _yes
5327	.2ad8					_no
5328	.2ad8	18		clc			clc
5329	.2ad9	60		rts			rts


5332						.send sPassword

5334	.2ada					VERADestStructLUT .block
5335	>2ada	01 06 07 03 00 14 00 00			lo .byte <(VeraDESTAddressLUT)
	>2ae2	00 00 00 40 c2 c2 ca ca 00 80 00
5336	>2aed	00 50 50 50 40 12 20 30			hi .byte >(VeraDESTAddressLUT)
	>2af5	10 1c 00 10 14 16 18 1a 26 35 10
5337	>2b00	1f 4f 4f 4f 1f 10 1f 1f			bank .byte `(VeraDESTAddressLUT)
	>2b08	10 10 10 10 10 10 10 10 10 10 20
5338						.bend

5340	.2b13					setVERAAddressPort0_X
5341	.2b13	9c 25 9f	stz $9f25		stz kVERA.CTRL
5342	.2b16	bd da 2a	lda $2ada,x		lda VERADestStructLUT.lo,x
5343	.2b19	8d 20 9f	sta $9f20		sta kVERA.ADDR_Lo
5344	.2b1c	bd ed 2a	lda $2aed,x		lda VERADestStructLUT.hi,x
5345	.2b1f	8d 21 9f	sta $9f21		sta kVERA.ADDR_Mid
5346	.2b22	bd 00 2b	lda $2b00,x		lda VERADestStructLUT.bank,x
5347	.2b25	8d 22 9f	sta $9f22		sta kVERA.ADDR_Hi
5348	.2b28	60		rts			rts


5351						; ----- @TitleScreen Data@ -----
5352						; {{{
5353						.dsection sTitleScreenData
5354						.section sTitleScreenData
5355	.2b29					TitleScreenData .block

5357	.2b29					SpriteStruct .block
5358							sprites = [(getVeraSpriteAddress32x32(kSprites.Q), 99,10),
5359											(getVeraSpriteAddress32x32(kSprites.W),136,10),
5360											(getVeraSpriteAddress32x32(kSprites.A),171,10),
5361											(getVeraSpriteAddress32x32(kSprites.K),206,10)
5362	=[(3904,99,10),(3920,136,10),(3936,171,10),(3952,206,10)]
										  ]
5363	.2b29						ptr .block
5364	>2b29	40 50 60 70					lo .byte <(sprites[:,0])
5365	>2b2d	0f 0f 0f 0f					hi .byte >(sprites[:,0])
5366							.bend
5367	.2b31						x .block
5368	>2b31	63 88 ab ce					lo .byte <(sprites[:,1])
5369	>2b35	00 00 00 00					hi .byte >(sprites[:,1])
5370							.bend
5371	>2b39	0a 0a 0a 0a				y .byte (sprites[:,2])
5372						.bend

5374	=(13,12,4)				Version = (kStrings.version,12,4)
5375	=(1,3,6)				Original = (kStrings.original,3,6)
5376	=(2,5,8)				Ported = (kStrings.cx16port,5,8)
5377	=(3,11,10)				Code = (kStrings.program,11,10)
5378	=(4,11,11)				Art = (kStrings.art,11,11)
5379	=(5,11,12)				Music = (kStrings.music,11,12)
5380	=(6,12,14)				Special = (kStrings.specialThanks,12,14)
5381	=(7,12,16)				Soci = (kStrings.soci,12,16)
5382	=(8,15,17)				Didi = (kStrings.martinPiper,15,17)
5383	=(9,17,11)				Saul1 = (kStrings.saul,17,11)
5384	=(9,17,12)				Saul2 = (kStrings.saul,17,12)
5385	=(12,7,22)				Both = (kStrings.both,7,22)
5386	=(5,15,22)				Music2 = (kStrings.music,15,22)
5387	=(10,24,22)				SFX = (kStrings.sfx,24,22)
5388	=(11,30,22)				None = (kStrings.none,30,22)
5389	=(14,5,19)				Password = (kStrings.password,5,19)
5390	=(15,14,20)				PasswordBlank = (kStrings.passwordBlank,14,20)

5392	=((13,12,4),(1,3,6),(2,5,8),(3,11,10))	G1 = (Version,Original,Ported,Code)
5393	=((4,11,11),(5,11,12),(6,12,14),(7,12,16))
						G2 = (Art,Music,Special,Soci)
5394	=((8,15,17),(9,17,11),(9,17,12),(12,7,22))
						G3 = (Didi,Saul1,Saul2,Both)
5395	=((5,15,22),(10,24,22),(11,30,22),(14,5,19))
						G4 = (Music2,SFX,None,Password)
5396	=((15,14,20),)				G5 = (PasswordBlank,) ;this use to have game over in it as well
5397	=((13,12,4),(1,3,6),(2,5,8),(3,11,10),(4,11,11),(5,11,12),(6,12,14),(7,12,16),(8,15,17),(9,17,11),(9,17,12),(12,7,22),(5,15,22),(10,24,22),(11,30,22),(14,5,19),(15,14,20))
						AllStrings = G1 .. G2 .. G3 .. G4 .. G5

5399	>2b3d	0d 01 02 03 04 05 06 07		string .byte AllStrings[:,0]..(kStrings.gameOver,)
	>2b45	08 09 09 0c 05 0a 0b 0e 0f 00
5400	=(536,774,1034,1302,1430,1558,1816,2072,2206,1442,1570,2830,2846,2864,2876,2442,2588,5142)
						allPos = (kVRAM.titleScreen+(AllStrings[:,2]*128)+(AllStrings[:,1]*2)).. (kVRAM.gameScreen+8*128+11*2,)
5401	.2b4f					stringPos .block
5402	>2b4f	18 06 0a 16 96 16 18 18			lo .byte <(allPos)
	>2b57	9e a2 22 0e 1e 30 3c 8a 1c 16
5403	>2b61	02 03 04 05 05 06 07 08			hi .byte >(allPos)
	>2b69	08 05 06 0b 0b 0b 0b 09 0a 14
5404	>2b73	10 10 10 10 10 10 10 10			bank .byte `(allPos|kVERA.inc_1)
	>2b7b	10 10 10 10 10 10 10 10 10 10
5405						.bend



5409	>2b85	07 0d 0e 0a			spriteCol	.byte 7,13,14,10

5411	>2b89	3c 2e 1e 0e			menuOffsetsStart	.byte (30,23,15,7)*2
5412	>2b8d	4a 3c 2c 1c			menuOffsetsEnd		.byte (37,30,22,14)*2

5414						.bend ; titlescreendata

5416	.2b91					kStrings .block
5417	=0					gameOver = 0
5418	=1					original = 1
5419	=2					cx16port = 2
5420	=3					program = 3
5421	=4					art = 4
5422	=5					music = 5
5423	=6					specialThanks = 6
5424	=7					soci = 7
5425	=8					martinPiper = 8
5426	=9					saul = 9
5427	=10					sfx = 10
5428	=11					none = 11
5429	=12					both = 12
5430	=13					version = 13
5431	=14					password = 14
5432	=15					passwordBlank = 15
5433						.bend

5435	>2b91	b1 bb de fd 10 21 35 47		StringTableLUTLo .byte <GAMEOVER,<ORIGINAL,<CX16PORT,<PROGRAM,<ART,<MUSIC,<SPECIALTHANKS,<SOCI,<MARTINPIPER,<SAUL,<SFX,<NONE,<BOTH,<VERSION,<PASSWORD,<PASSWORDBLANK
	>2b99	5a 14 27 2b 30 67 79 98
5436	>2ba1	2b 2b 2b 2b 2c 2c 2c 2c		StringTableLUTHi .byte >GAMEOVER,>ORIGINAL,>CX16PORT,>PROGRAM,>ART,>MUSIC,>SPECIALTHANKS,>SOCI,>MARTINPIPER,>SAUL,>SFX,>NONE,>BOTH,>VERSION,>PASSWORD,>PASSWORDBLANK
	>2ba9	2c 2c 2c 2c 2c 2c 2c 2c

5438	>2bb1	87 81 8d 85 a0 8f 96 85		GAMEOVER 		.text "GAME OVER"
	>2bb9	92
5439	>2bba	ff						 			.byte $FF
5440	>2bbb	8f 92 89 87 89 8e 81 8c		ORIGINAL 		.text "ORIGINAL CONCEPT : JAMIE WOODHOUSE"
	>2bc3	a0 83 8f 8e 83 85 90 94 a0 ba a0 8a 81 8d 89 85
	>2bd3	a0 97 8f 8f 84 88 8f 95 93 85
5441	>2bdd	ff									.byte $FF
5442	>2bde	90 8f 92 94 85 84 a0 94		CX16PORT  		.text "PORTED TO THE COMMANDER X16 BY"
	>2be6	8f a0 94 88 85 a0 83 8f 8d 8d 81 8e 84 85 92 a0
	>2bf6	98 b1 b6 a0 82 99
5443	>2bfc	ff									.byte $FF
5444	>2bfd	83 8f 84 85 a0 a0 ba a0		PROGRAM	 		.text "CODE  : OZIPHANTOM"
	>2c05	8f 9a 89 90 88 81 8e 94 8f 8d
5445	>2c0f	ff									.byte $FF
5446	>2c10	81 92 94			ART		 		.text "ART"
5447	>2c13	ff									.byte $FF
5448	>2c14	ba a0 93 81 95 8c a0 83		SAUL				.text ": SAUL CROSS"
	>2c1c	92 8f 93 93
5449	>2c20	ff									.byte $FF
5450	>2c21	8d 95 93 89 83			MUSIC 	 		.text "MUSIC"
5451	>2c26	ff									.byte $FF
5452	>2c27	93 86 98			SFX				.text "SFX"
5453	>2c2a	ff									.byte $FF
5454	>2c2b	8e 8f 8e 85			NONE				.text "NONE"
5455	>2c2f	ff									.byte $FF
5456	>2c30	82 8f 94 88			BOTH				.text "BOTH"
5457	>2c34	ff									.byte $FF
5458	>2c35	93 90 85 83 89 81 8c a0		SPECIALTHANKS 	.text "SPECIAL THANKS TO"
	>2c3d	94 88 81 8e 8b 93 a0 94 8f
5459	>2c46	ff									.byte $FF
5460	>2c47	93 8f 83 89 ac a0 8d 81		SOCI		  		.text "SOCI, MARTIN PIPER"
	>2c4f	92 94 89 8e a0 90 89 90 85 92
5461	>2c59	ff									.byte $FF
5462	>2c5a	84 89 84 89 ac a0 94 88		MARTINPIPER	  	.text "DIDI, THERYK"
	>2c62	85 92 99 8b
5463	>2c66	ff									.byte $FF
5464	>2c67	83 98 a0 b1 b6 a0 85 84		VERSION			.text "CX 16 EDITION 1.3",$FF
	>2c6f	89 94 89 8f 8e a0 b1 ae b3 ff
5465	>2c79	94 99 90 85 a0 90 81 93		PASSWORD			.text "TYPE PASSWORD : SPACE TO CLEAR",$FF
	>2c81	93 97 8f 92 84 a0 ba a0 93 90 81 83 85 a0 94 8f
	>2c91	a0 83 8c 85 81 92 ff
5466	>2c98	ad ad ad ad ad ad ad ad		PASSWORDBLANK	.text "------------",$FF
	>2ca0	ad ad ad ad ff

5468	>2ca5	88 8f 94 8f 90 81 81 83		PASSWORD_LIVES 	.byte $88,$8f,$94,$8f,$90,$81,$81,$83,$92,$8f,$93,$93 ; hotopaacross
	>2cad	92 8f 93 93
5469	>2cb1	89 93 88 8f 8f 94 92 85		PASSWORD_RED 		.byte $89,$93,$88,$8f,$8f,$94,$92,$85,$84,$81,$8c,$8c ; ishootredall
	>2cb9	84 81 8c 8c
5470	>2cbd	8d 81 99 84 81 99 8d 81		PASSWORD_SPRING	.byte $8d,$81,$99,$84,$81,$99,$8d,$81,$99,$84,$81,$99 ; maydaymayday
	>2cc5	99 84 81 99
5471	>2cc9	93 94 85 90 90 85 84 8f		PASSWORD_LEVEL  	.byte $93,$94,$85,$90,$90,$85,$84,$8f,$96,$85,$92,$81 ; steppedovera
	>2cd1	96 85 92 81
5472						; }}}


5475	>2cd5	04 09 0e 13 18 1d		BossLevels 		.byte 4,4+5,4+10,4+15,4+20,4+25

5477	.2cdb					kSFX .block
5478	=0					flower = 0
5479	=1					door =1
5480	=2					collect = 2
5481	=3					bubble = 3
5482	=4					ebubble = 4
5483	=5					powerup = 5
5484	=6					jump = 6
5485	=7					hurt = 7
5486						.bend
5487	.2cdb					SNDTBL
35	>2cdb	00 00 00 00 00 00 00 00		lo .byte <(SND_FLOWER,SND_DOOR,SND_COLLECT,SND_BUBBLE,SND_EBUBBLE,SND_POWER_UP,SND_JUMP,SND_HURT)
36	>2ce3	a0 a0 a0 a0 a0 a0 a0 a0		hi .byte >(SND_FLOWER,SND_DOOR,SND_COLLECT,SND_BUBBLE,SND_EBUBBLE,SND_POWER_UP,SND_JUMP,SND_HURT)
5488						.send sTitleScreenData

5490						.dsection sCharSprData
5491						.section sCharSprData
5492						.union
5493	>2ceb	90 99 00 00 09 09 00 99			.binary "back_shadow.ver"
	>2cf3	00 09 09 99 99 90 09 90 00 00 90 99 99 99 00 00
	>2d03	99 09 90 09 90 90 90 99 99 90 09 90 99 99 09 00
	>2d13	99 00 90 99 90 90 90 00 00 09 09 99 99 90 99 99
	>2d23	00 00 99 99 90 90 99 99 09 00 90 99 90 00 90 00
	>2d33	00 09 09 99 99 90 99 99 00 09 99 09 99 09 09 90
	>2d43	90 90 90 00 99 90 09 99 00 00 09 09 99 99 90 90
	>2d53	99 99 09 09 90 90 09 00 09 00 90 00 00 09 09 99
	>2d63	99 90 99 99 00 00 99 99 00 09 00 00 00 00 00 00
	>2d73	00 09 00 00 90 90 00 00 00 00 00 09 90 90 00 00
	>2d83	09 09 00 09 90 90 90 90 00 00 00 00 00 00 00 00
	>2d93	00 00 00 00 00 00 00 00 00 09 09 09 90 90 90 90
	>2da3	00 00 09 09 90 90 90 90 00 00 00 00 00 00 00 00
	>2db3	00 00 00 00 00 00 00 00 00 00 00 09 00 00 00 00
	>2dc3	00 00 00 09 00 00 90 90 00 00 00 00 00 00 00 00
	>2dd3	00 00 00 00 00 00 00 00 00 00 00 09 90 90 00 00
	>2de3	09 09 00 09 90 90 90 90 00 00 00 00 00 00 00 90
	>2df3	00 00 09 09 00 00 00 90 00 00 00 09 90 90 00 00
	>2e03	09 09 00 09 90 90 90 90 99 09 00 09 90 00 00 99
	>2e13	00 09 09 99 90 90 09 90 00 00 00 99 00 00 00 00
	>2e23	00 00 00 09 00 00 90 90 00 00 00 09 00 00 90 00
	>2e33	00 00 09 09 00 00 90 90 00 00 09 09 00 00 00 90
	>2e43	00 00 00 00 00 00 00 90 00 00 00 00 00 00 00 90
	>2e53	00 00 09 09 00 00 00 90 00 00 00 09 00 00 00 00
	>2e63	00 00 00 09 00 00 90 90 00 00 00 00 09 09 09 09
	>2e73	00 00 00 00 09 00 00 00 00 00 00 09 09 00 00 90
	>2e83	00 00 00 00 09 00 00 90 00 00 00 00 09 09 09 00
	>2e93	00 00 00 90 00 00 00 00 90 00 00 90 09 00 00 00
	>2ea3	00 00 00 90 09 00 00 00 00 00 90 00 09 00 09 00
	>2eb3	00 00 00 90 09 00 00 09 00 00 00 00 09 00 00 00
	>2ec3	00 90 90 90 00 00 00 00 00 09 00 90 00 90 00 00
	>2ed3	09 00 00 90 90 00 00 00 00 00 00 90 00 00 00 00
	>2ee3	90 90 90 90 00 00 00 00 99 33 11 11 33 11 11 33
	>2ef3	11 11 33 11 11 33 33 33 33 11 33 33 11 33 33 33
	>2f03	33 33 33 33 11 33 33 33 11 11 33 99 11 33 11 33
	>2f13	33 33 33 33 33 33 33 33 33 33 33 99 33 33 33 33
	>2f23	33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33
	>2f33	33 33 33 33 11 33 33 33 33 33 33 33 33 33 33 33
	>2f43	33 99 33 99 00 33 99 33 33 33 33 99 33 33 33 33
	>2f53	33 33 33 99 33 33 99 33 33 33 33 99 99 33 99 99
	>2f63	33 99 33 99 99 99 99 00 99 33 11 11 33 11 11 33
	>2f73	11 11 33 11 11 33 33 33 33 11 33 33 11 33 33 33
	>2f83	33 33 33 33 11 33 33 33 11 11 33 99 11 33 11 33
	>2f93	33 33 33 33 33 33 33 33 33 33 33 99 33 33 33 33
	>2fa3	33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33
	>2fb3	33 33 33 33 11 33 33 33 33 33 33 33 33 33 33 33
	>2fc3	33 99 33 99 00 33 99 33 33 33 33 99 33 33 33 33
	>2fd3	33 33 33 99 33 33 99 33 33 33 33 99 99 33 99 99
	>2fe3	33 99 33 99 99 99 99 00 33 33 33 33 33 33 33 33
	>2ff3	33 33 33 33 11 33 33 33 33 33 33 33 99 33 99 33
	>3003	33 99 33 99 99 99 99 99 33 33 33 99 33 33 33 33
	>3013	33 33 33 99 33 33 99 33 33 33 33 99 99 33 99 99
	>3023	33 99 33 99 99 99 99 99 33 33 33 33 33 33 33 33
	>3033	33 33 33 33 99 33 99 33 33 99 33 99 99 99 99 99
	>3043	00 99 00 99 99 00 99 00 33 33 33 99 33 33 33 33
	>3053	33 33 33 99 99 33 99 33 33 99 33 99 99 99 99 99
	>3063	00 99 00 99 99 00 99 00 33 33 33 33 99 33 99 33
	>3073	33 99 33 99 99 99 99 99 00 99 00 99 99 00 99 00
	>3083	00 00 00 00 00 00 00 00 33 33 33 99 99 33 99 33
	>3093	33 99 33 99 99 99 99 99 00 99 00 99 99 00 99 00
	>30a3	00 00 00 00 00 00 00 00 33 99 33 99 99 99 99 99
	>30b3	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>30c3	00 00 00 00 00 00 00 00 33 99 33 99 99 99 99 99
	>30d3	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>30e3	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>30f3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3103	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3113	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3123	00 00 00 00 00 00 00 00 99 33 11 11 33 11 11 33
	>3133	11 11 33 11 11 33 33 33 33 11 33 33 11 33 33 33
	>3143	33 33 33 33 99 33 99 33 11 11 33 99 11 33 11 33
	>3153	33 33 33 33 33 33 33 33 33 33 33 99 33 33 33 33
	>3163	33 33 33 33 99 33 99 33 99 33 11 11 33 11 11 33
	>3173	11 11 33 11 11 33 33 33 33 11 33 33 99 33 99 33
	>3183	33 99 33 99 99 99 99 99 11 11 33 99 11 33 11 33
	>3193	33 33 33 33 33 33 33 33 33 33 33 99 99 33 99 33
	>31a3	33 99 33 99 99 99 99 99 99 33 11 11 33 11 11 33
	>31b3	11 11 33 11 99 33 99 33 33 99 33 99 99 99 99 99
	>31c3	00 99 00 99 99 00 99 00 11 11 33 99 11 33 11 33
	>31d3	33 33 33 33 99 33 99 33 33 99 33 99 99 99 99 99
	>31e3	00 99 00 99 99 00 99 00 99 33 11 11 99 11 99 33
	>31f3	11 99 33 99 99 99 99 99 00 99 00 99 99 00 99 00
	>3203	00 00 00 00 00 00 00 00 11 11 33 99 99 33 99 33
	>3213	33 99 33 99 99 99 99 99 00 99 00 99 99 00 99 00
	>3223	00 00 00 00 00 00 00 00 99 99 11 99 99 99 99 99
	>3233	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>3243	00 00 00 00 00 00 00 00 11 99 33 99 99 99 99 99
	>3253	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>3263	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3273	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3283	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3293	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>32a3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>32b3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>32c3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>32d3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>32e3	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>32f3	00 99 00 55 99 00 00 99 00 99 00 00 99 00 55 99
	>3303	00 55 55 55 00 55 11 55 00 00 00 99 55 55 55 00
	>3313	99 55 99 00 55 99 00 00 99 00 00 99 00 99 00 00
	>3323	55 55 99 00 55 55 55 00 00 55 11 55 00 55 55 55
	>3333	00 55 55 55 00 99 55 55 00 00 99 55 99 00 55 99
	>3343	00 99 00 99 99 00 99 00 55 55 99 00 55 99 99 00
	>3353	55 55 99 00 55 99 99 00 99 99 00 99 55 99 00 00
	>3363	99 00 00 99 00 00 99 00 00 00 00 00 90 99 99 99
	>3373	00 99 99 99 00 90 00 00 00 00 00 00 99 99 90 09
	>3383	99 09 00 99 00 00 00 90 00 00 00 00 90 99 99 99
	>3393	00 99 99 09 00 90 00 00 00 00 00 00 99 99 90 99
	>33a3	99 99 00 99 00 00 00 90 00 00 00 00 90 09 99 99
	>33b3	00 99 99 99 00 90 00 00 00 00 00 00 99 09 90 99
	>33c3	99 99 00 99 00 00 00 90 00 00 00 00 90 99 99 09
	>33d3	00 99 99 99 00 90 00 00 00 00 00 00 99 99 90 09
	>33e3	99 99 00 99 00 00 00 90 00 00 00 00 00 09 00 00
	>33f3	00 90 00 00 00 00 00 00 00 00 00 00 09 09 00 09
	>3403	99 90 00 90 00 00 00 00 00 00 00 00 00 00 00 00
	>3413	00 00 00 00 00 00 00 00 00 00 00 00 09 09 00 09
	>3423	90 90 00 90 00 00 00 00 00 00 00 00 00 00 00 00
	>3433	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 09
	>3443	00 00 00 90 00 00 00 00 00 00 00 00 00 00 00 00
	>3453	00 00 00 00 00 00 00 00 00 00 00 00 09 09 00 09
	>3463	90 90 00 90 00 00 00 00 00 00 00 00 00 00 09 09
	>3473	00 00 90 90 00 00 00 00 00 00 00 00 09 09 00 09
	>3483	90 90 00 90 00 00 00 00 00 00 00 00 90 09 09 99
	>3493	00 90 90 99 00 00 00 00 00 00 00 00 00 00 00 09
	>34a3	00 00 00 90 00 00 00 00 00 00 00 00 00 00 09 09
	>34b3	00 00 90 90 00 00 00 00 00 00 00 00 00 00 00 09
	>34c3	00 00 00 90 00 00 00 00 00 00 00 00 00 00 09 09
	>34d3	00 00 90 90 00 00 00 00 00 00 00 00 00 00 00 09
	>34e3	00 00 00 90 00 00 00 00 00 00 00 00 09 09 09 09
	>34f3	00 00 00 00 09 00 00 00 00 00 00 09 09 00 00 90
	>3503	00 00 00 00 09 00 00 90 00 00 00 00 09 09 09 00
	>3513	00 00 00 90 00 00 00 00 90 00 00 90 09 00 00 00
	>3523	00 00 00 90 09 00 00 00 00 00 90 00 09 00 09 00
	>3533	00 00 00 90 09 00 00 09 00 00 00 00 09 00 00 00
	>3543	00 90 90 90 00 00 00 00 00 09 00 90 00 90 00 00
	>3553	09 00 00 90 90 00 00 00 00 00 00 90 00 00 00 00
	>3563	90 90 90 90 00 00 00 00 00 00 99 99 00 44 44 44
	>3573	99 44 11 44 44 11 11 44 44 11 11 44 44 11 44 44
	>3583	44 44 44 44 44 44 44 44 99 99 00 00 44 44 99 00
	>3593	44 44 44 99 44 44 44 44 44 44 44 99 44 44 44 44
	>35a3	44 44 44 99 44 44 99 44 44 44 44 44 44 44 44 44
	>35b3	44 44 44 44 99 44 44 44 44 44 44 99 99 44 99 44
	>35c3	00 99 00 99 00 00 99 99 44 44 44 99 44 44 99 99
	>35d3	44 99 00 99 44 44 99 99 44 99 00 99 99 00 00 99
	>35e3	00 00 99 00 99 99 00 00 00 00 99 99 00 44 44 44
	>35f3	99 44 11 44 44 11 11 44 44 11 11 44 44 11 44 44
	>3603	44 44 44 44 44 44 44 44 99 99 00 00 44 44 99 00
	>3613	44 44 44 99 44 44 44 44 44 44 44 99 44 44 44 44
	>3623	44 44 44 99 44 44 99 44 44 44 44 44 44 44 44 44
	>3633	44 44 44 44 99 44 44 44 44 44 44 99 99 44 99 44
	>3643	00 99 00 99 00 00 99 99 44 44 44 99 44 44 99 99
	>3653	44 99 00 99 44 44 99 99 44 99 00 99 99 00 00 99
	>3663	00 00 99 00 99 99 00 00 44 44 44 44 44 44 44 44
	>3673	44 44 44 44 99 44 44 44 44 44 44 99 99 44 99 44
	>3683	00 99 00 99 99 99 99 99 44 44 44 99 44 44 99 99
	>3693	44 99 00 99 44 44 99 99 44 99 00 99 99 00 99 99
	>36a3	00 99 99 99 99 99 99 99 44 44 44 44 44 44 44 44
	>36b3	44 44 44 44 99 44 99 44 44 99 44 99 99 99 99 99
	>36c3	00 99 00 99 99 00 99 00 44 44 44 99 44 44 99 99
	>36d3	44 99 00 99 99 44 99 99 44 99 00 99 99 99 99 99
	>36e3	00 99 00 99 99 00 99 00 44 44 44 44 99 44 99 44
	>36f3	44 99 44 99 99 99 99 99 00 99 00 99 99 00 99 00
	>3703	00 00 00 00 00 00 00 00 44 44 44 99 99 44 99 99
	>3713	44 99 00 99 99 99 99 99 00 99 00 99 99 00 99 00
	>3723	00 00 00 00 00 00 00 00 44 99 44 99 99 99 99 99
	>3733	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>3743	00 00 00 00 00 00 00 00 44 99 44 99 99 99 99 99
	>3753	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>3763	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3773	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3783	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3793	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>37a3	00 00 00 00 00 00 00 00 00 00 99 99 00 44 44 44
	>37b3	99 44 11 44 44 11 11 44 44 11 11 44 44 11 44 44
	>37c3	44 44 44 44 99 44 99 44 99 99 00 00 44 44 99 00
	>37d3	44 44 44 99 44 44 44 44 44 44 44 99 44 44 44 44
	>37e3	44 44 44 99 99 44 99 44 00 00 99 99 00 44 44 44
	>37f3	99 44 11 44 44 11 11 44 44 11 11 44 99 11 99 44
	>3803	44 99 44 99 99 99 99 99 99 99 00 00 44 44 99 00
	>3813	44 44 44 99 44 44 44 44 44 44 44 99 99 44 99 44
	>3823	44 99 44 99 99 99 99 99 00 00 99 99 00 44 44 44
	>3833	99 44 11 44 99 11 99 44 44 99 11 99 99 99 99 99
	>3843	00 99 00 99 99 00 99 00 99 99 00 00 44 44 99 00
	>3853	44 44 44 99 99 44 99 44 44 99 44 99 99 99 99 99
	>3863	00 99 00 99 99 00 99 00 00 00 99 99 99 44 99 44
	>3873	99 99 11 99 99 99 99 99 00 99 00 99 99 00 99 00
	>3883	00 00 00 00 00 00 00 00 99 99 00 00 99 44 99 00
	>3893	44 99 44 99 99 99 99 99 00 99 00 99 99 00 99 00
	>38a3	00 00 00 00 00 00 00 00 00 99 99 99 99 99 99 99
	>38b3	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>38c3	00 00 00 00 00 00 00 00 99 99 00 99 99 99 99 99
	>38d3	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>38e3	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>38f3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3903	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3913	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3923	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3933	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3943	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3953	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3963	00 00 00 00 00 00 00 00 00 99 00 00 99 00 00 77
	>3973	00 00 11 77 99 00 11 77 00 00 77 77 99 00 77 77
	>3983	00 00 77 77 99 00 99 77 00 00 00 99 99 00 00 00
	>3993	77 99 00 99 77 99 00 00 77 99 00 99 77 99 00 00
	>39a3	77 99 00 99 99 99 00 00 00 00 99 99 99 00 00 99
	>39b3	00 99 00 00 99 00 00 99 00 99 00 77 99 00 00 11
	>39c3	00 99 00 77 99 00 99 00 99 99 00 99 99 00 99 00
	>39d3	00 00 00 99 00 00 99 00 99 00 00 99 77 00 99 00
	>39e3	99 00 00 99 00 00 99 00 99 99 00 90 99 99 00 90
	>39f3	99 90 00 90 99 00 09 00 00 00 90 09 00 09 00 99
	>3a03	99 90 09 99 00 00 99 99 09 99 99 99 09 99 99 99
	>3a13	09 99 99 99 00 90 99 99 90 09 00 00 99 00 90 00
	>3a23	90 90 09 99 99 09 00 00 00 00 99 99 99 90 09 09
	>3a33	99 99 00 90 99 90 90 09 99 99 09 00 99 99 00 90
	>3a43	99 99 00 90 99 99 00 90 90 09 00 00 00 90 09 99
	>3a53	09 00 99 99 90 09 99 99 00 99 99 99 09 99 99 99
	>3a63	09 99 99 99 09 99 99 99 90 90 00 00 09 09 00 00
	>3a73	90 90 00 00 09 00 00 00 00 00 90 00 00 09 00 09
	>3a83	99 90 00 90 00 00 09 09 00 00 00 00 00 00 00 00
	>3a93	00 00 00 00 00 00 00 00 90 00 00 00 09 00 00 00
	>3aa3	90 90 00 90 09 09 00 00 00 00 00 00 00 00 00 00
	>3ab3	00 00 00 00 00 00 00 00 00 00 90 00 00 00 00 09
	>3ac3	00 00 00 90 00 00 09 09 00 00 00 00 00 00 00 00
	>3ad3	00 00 00 00 00 00 00 00 00 00 90 00 00 09 00 09
	>3ae3	90 90 00 90 00 00 09 09 00 00 00 90 00 00 00 00
	>3af3	00 00 00 90 00 00 09 00 00 00 90 00 00 09 00 09
	>3b03	90 90 00 90 00 00 09 09 90 99 00 90 09 09 00 90
	>3b13	90 90 00 90 09 00 09 00 00 00 90 00 00 00 00 09
	>3b23	00 00 00 90 00 00 09 09 00 00 90 90 00 00 09 09
	>3b33	00 00 00 90 00 00 00 09 00 00 00 00 00 00 00 00
	>3b43	00 00 00 90 00 00 00 00 00 00 00 90 00 00 00 00
	>3b53	00 00 00 90 00 00 09 00 00 00 90 00 00 00 00 09
	>3b63	00 00 00 90 00 00 09 09 00 00 00 00 09 09 09 09
	>3b73	00 00 00 00 09 00 00 00 00 00 00 09 09 00 00 90
	>3b83	00 00 00 00 09 00 00 90 00 00 00 00 09 09 09 00
	>3b93	00 00 00 90 00 00 00 00 90 00 00 90 09 00 00 00
	>3ba3	00 00 00 90 09 00 00 00 00 00 90 00 09 00 09 00
	>3bb3	00 00 00 90 09 00 00 09 00 00 00 00 09 00 00 00
	>3bc3	00 90 90 90 00 00 00 00 00 09 00 90 00 90 00 00
	>3bd3	09 00 00 90 90 00 00 00 00 00 00 90 00 00 00 00
	>3be3	90 90 90 90 00 00 00 00 11 11 11 11 55 11 11 55
	>3bf3	55 11 11 55 55 11 11 55 55 11 11 55 55 11 11 55
	>3c03	55 11 11 55 99 55 55 99 11 55 99 55 55 99 00 99
	>3c13	55 99 00 99 55 99 00 99 55 99 00 99 55 99 00 99
	>3c23	55 99 00 99 99 00 00 00 11 11 11 11 55 11 11 55
	>3c33	55 11 11 55 55 11 11 55 55 11 11 55 55 11 11 55
	>3c43	55 11 11 55 99 55 55 99 11 55 99 55 55 99 00 99
	>3c53	55 99 00 99 55 99 00 99 55 99 00 99 55 99 00 99
	>3c63	55 99 00 99 99 00 00 00 11 11 11 11 55 11 11 55
	>3c73	55 11 11 55 55 11 11 55 55 11 11 55 55 11 11 55
	>3c83	55 11 11 55 99 55 55 99 11 55 99 55 55 99 00 99
	>3c93	55 99 00 99 55 99 00 99 55 99 00 99 55 99 00 99
	>3ca3	55 99 00 99 99 00 00 00 11 11 11 11 55 11 11 55
	>3cb3	55 11 11 55 55 11 11 55 55 11 11 55 99 11 99 55
	>3cc3	55 99 11 99 99 99 99 99 11 55 99 55 55 99 00 99
	>3cd3	55 99 00 99 55 99 00 99 55 99 00 99 99 99 99 99
	>3ce3	55 99 00 99 99 99 99 99 11 11 11 11 55 11 11 55
	>3cf3	55 11 11 55 99 11 99 55 55 99 11 99 99 99 99 99
	>3d03	00 99 00 99 99 00 99 00 11 55 99 55 55 99 00 99
	>3d13	55 99 00 99 99 99 99 99 55 99 00 99 99 99 99 99
	>3d23	00 99 00 99 99 00 99 00 11 11 11 11 99 11 99 55
	>3d33	55 99 11 99 99 99 99 99 00 99 00 99 99 00 99 00
	>3d43	00 00 00 00 00 00 00 00 11 55 99 55 99 99 99 99
	>3d53	55 99 00 99 99 99 99 99 00 99 00 99 99 00 99 00
	>3d63	00 00 00 00 00 00 00 00 11 99 11 99 99 99 99 99
	>3d73	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>3d83	00 00 00 00 00 00 00 00 11 99 99 99 99 99 99 99
	>3d93	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>3da3	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3db3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3dc3	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3dd3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3de3	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3df3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3e03	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3e13	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3e23	00 00 00 00 00 00 00 00 11 11 11 11 55 11 11 55
	>3e33	55 11 11 55 55 11 11 55 55 11 11 55 55 11 11 55
	>3e43	55 11 11 55 99 55 55 99 11 55 99 55 55 99 00 99
	>3e53	55 99 00 99 55 99 00 99 55 99 00 99 55 99 00 99
	>3e63	55 99 00 99 99 00 00 00 11 11 11 11 55 11 11 55
	>3e73	55 11 11 55 55 11 11 55 55 11 11 55 99 11 99 55
	>3e83	55 99 11 99 99 99 99 99 11 55 99 55 55 99 00 99
	>3e93	55 99 00 99 55 99 00 99 55 99 00 99 99 99 99 99
	>3ea3	55 99 00 99 99 99 99 99 11 11 11 11 55 11 11 55
	>3eb3	55 11 11 55 99 11 99 55 55 99 11 99 99 99 99 99
	>3ec3	00 99 00 99 99 00 99 00 11 55 99 55 55 99 00 99
	>3ed3	55 99 00 99 99 99 99 99 55 99 00 99 99 99 99 99
	>3ee3	00 99 00 99 99 00 99 00 11 11 11 11 99 11 99 55
	>3ef3	55 99 11 99 99 99 99 99 00 99 00 99 99 00 99 00
	>3f03	00 00 00 00 00 00 00 00 11 55 99 55 99 99 99 99
	>3f13	55 99 00 99 99 99 99 99 00 99 00 99 99 00 99 00
	>3f23	00 00 00 00 00 00 00 00 11 99 11 99 99 99 99 99
	>3f33	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>3f43	00 00 00 00 00 00 00 00 11 99 99 99 99 99 99 99
	>3f53	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>3f63	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3f73	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3f83	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3f93	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3fa3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3fb3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3fc3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3fd3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>3fe3	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>3ff3	00 99 00 00 99 00 00 55 00 99 00 55 99 00 00 99
	>4003	00 99 00 99 99 00 99 00 00 99 00 99 00 00 00 00
	>4013	55 55 99 00 99 55 00 00 55 99 00 99 55 00 99 00
	>4023	99 00 00 99 00 00 99 00 00 00 00 00 00 22 00 99
	>4033	11 22 22 00 22 22 22 00 22 22 99 00 00 99 00 00
	>4043	00 00 00 99 99 00 99 00 00 99 00 99 00 00 99 00
	>4053	00 22 00 99 11 22 22 00 22 22 22 00 22 22 99 00
	>4063	00 99 00 99 99 00 99 00 99 90 00 00 99 00 00 99
	>4073	90 00 99 99 00 09 99 00 00 99 00 00 00 99 00 99
	>4083	09 90 09 99 09 90 99 99 00 09 99 99 99 99 99 09
	>4093	99 99 00 99 00 00 99 99 99 99 99 99 99 99 99 99
	>40a3	99 99 09 99 99 99 99 90 09 99 99 99 99 90 99 99
	>40b3	99 99 99 99 99 99 99 99 99 99 00 00 99 00 99 99
	>40c3	90 99 99 99 99 99 90 00 99 99 09 90 99 90 09 90
	>40d3	99 00 99 00 00 00 99 00 00 99 90 00 99 99 00 09
	>40e3	99 00 00 99 00 00 09 99 90 90 00 00 09 00 00 00
	>40f3	90 00 00 00 00 00 00 00 00 09 00 00 00 90 00 90
	>4103	09 00 09 09 00 90 90 90 00 00 00 00 00 00 00 00
	>4113	00 00 00 00 00 00 00 00 09 09 09 09 90 90 90 90
	>4123	09 09 09 09 90 90 90 90 00 00 00 00 00 00 00 00
	>4133	00 00 00 00 00 00 00 00 00 09 00 00 00 90 00 90
	>4143	09 00 09 09 00 90 90 90 00 00 00 00 00 00 00 90
	>4153	00 00 09 09 00 00 90 00 00 09 00 00 00 90 00 90
	>4163	09 00 09 09 00 90 90 90 09 00 00 00 90 00 00 90
	>4173	00 00 09 09 00 00 90 00 00 00 00 00 00 00 00 90
	>4183	00 00 09 09 00 00 90 90 00 00 00 00 00 00 00 90
	>4193	00 00 09 09 00 00 90 00 00 00 00 00 00 00 00 90
	>41a3	00 00 09 09 00 00 90 90 00 00 00 00 00 00 00 00
	>41b3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 90
	>41c3	00 00 09 09 00 00 90 90 00 00 00 00 00 00 09 09
	>41d3	00 00 90 90 00 00 00 00 00 00 00 00 00 00 00 09
	>41e3	00 00 00 90 00 00 00 00 00 00 00 00 09 09 09 09
	>41f3	00 00 00 00 09 00 00 00 00 00 00 09 09 00 00 90
	>4203	00 00 00 00 09 00 00 90 00 00 00 00 09 09 09 00
	>4213	00 00 00 90 00 00 00 00 90 00 00 90 09 00 00 00
	>4223	00 00 00 90 09 00 00 00 00 00 90 00 09 00 09 00
	>4233	00 00 00 90 09 00 00 09 00 00 00 00 09 00 00 00
	>4243	00 90 90 90 00 00 00 00 00 09 00 90 00 90 00 00
	>4253	09 00 00 90 90 00 00 00 00 00 00 90 00 00 00 00
	>4263	90 90 90 90 00 00 00 00 99 99 77 77 77 11 11 11
	>4273	11 11 11 11 77 77 77 99 11 11 77 77 77 99 99 99
	>4283	99 99 99 99 99 99 99 77 77 77 99 99 11 77 77 77
	>4293	77 77 77 77 99 99 99 77 77 77 11 11 99 77 77 77
	>42a3	77 77 77 77 77 77 77 99 00 00 99 99 99 77 77 77
	>42b3	99 99 99 99 99 99 99 00 00 00 00 00 99 00 00 00
	>42c3	00 00 00 00 00 00 00 00 99 99 00 00 77 99 99 99
	>42d3	00 00 00 00 00 00 00 99 00 00 00 00 00 99 99 99
	>42e3	00 00 00 00 00 00 00 00 99 99 77 77 77 11 11 11
	>42f3	11 11 11 11 77 77 77 99 11 11 77 77 77 99 99 99
	>4303	99 99 99 99 99 99 99 77 77 77 99 99 11 77 77 77
	>4313	77 77 77 77 99 99 99 77 77 77 11 11 99 77 77 77
	>4323	77 77 77 77 77 77 77 99 00 00 99 99 99 77 77 77
	>4333	99 99 99 99 99 99 99 00 00 00 00 00 99 00 00 00
	>4343	00 00 00 00 00 00 00 00 99 99 00 00 77 99 99 99
	>4353	00 00 00 00 00 00 00 99 00 00 00 00 00 99 99 99
	>4363	00 00 00 00 00 00 00 00 00 00 99 99 99 77 77 77
	>4373	99 99 99 99 99 99 99 00 00 00 00 00 99 00 99 00
	>4383	00 99 00 99 99 99 99 99 99 99 00 00 77 99 99 99
	>4393	00 00 00 00 00 00 00 99 00 00 00 00 99 99 99 99
	>43a3	00 99 00 99 99 99 99 99 00 00 99 99 99 77 77 77
	>43b3	99 99 99 99 99 99 99 00 00 99 00 99 99 99 99 99
	>43c3	00 99 00 99 99 00 99 00 99 99 00 00 77 99 99 99
	>43d3	00 00 00 00 99 00 99 99 00 99 00 99 99 99 99 99
	>43e3	00 99 00 99 99 00 99 00 00 00 99 99 99 77 99 77
	>43f3	99 99 99 99 99 99 99 99 00 99 00 99 99 00 99 00
	>4403	00 00 00 00 00 00 00 00 99 99 00 00 99 99 99 99
	>4413	00 99 00 99 99 99 99 99 00 99 00 99 99 00 99 00
	>4423	00 00 00 00 00 00 00 00 00 99 99 99 99 99 99 99
	>4433	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>4443	00 00 00 00 00 00 00 00 00 99 99 99 99 99 99 99
	>4453	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>4463	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>4473	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>4483	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>4493	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>44a3	00 00 00 00 00 00 00 00 99 99 77 77 77 11 11 11
	>44b3	11 11 11 11 77 77 77 99 11 11 77 77 99 99 99 99
	>44c3	99 99 99 99 99 99 99 99 77 77 99 99 11 77 77 77
	>44d3	77 77 77 77 99 99 99 77 77 77 11 11 99 77 77 77
	>44e3	77 77 77 77 99 77 99 99 99 99 77 77 77 11 11 11
	>44f3	11 11 11 11 99 77 99 99 11 99 77 99 99 99 99 99
	>4503	00 99 00 99 99 00 99 00 77 77 99 99 11 77 77 77
	>4513	77 77 77 77 99 99 99 77 77 77 11 11 99 77 99 77
	>4523	77 99 77 99 99 99 99 99 99 99 77 77 99 11 99 11
	>4533	11 99 11 99 99 99 99 99 00 99 00 99 99 00 99 00
	>4543	00 00 00 00 00 00 00 00 77 77 99 99 99 77 99 77
	>4553	77 99 77 99 99 99 99 99 00 99 00 99 99 00 99 00
	>4563	00 00 00 00 00 00 00 00 99 99 77 99 99 99 99 99
	>4573	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>4583	00 00 00 00 00 00 00 00 77 99 99 99 99 99 99 99
	>4593	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>45a3	00 00 00 00 00 00 00 00 00 99 99 99 99 99 99 99
	>45b3	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>45c3	00 00 00 00 00 00 00 00 00 99 99 99 99 99 99 99
	>45d3	00 99 00 99 99 00 99 00 00 00 00 00 00 00 00 00
	>45e3	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>45f3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>4603	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>4613	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>4623	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>4633	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>4643	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>4653	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>4663	00 00 00 00 00 00 00 00 00 99 00 99 99 00 99 00
	>4673	00 99 00 33 99 00 33 11 00 00 33 11 00 33 33 33
	>4683	00 33 33 33 00 99 33 33 00 99 00 99 00 00 99 00
	>4693	33 00 00 99 33 33 00 00 33 33 00 99 33 33 33 00
	>46a3	33 33 99 00 33 99 00 00 00 99 99 99 00 99 99 99
	>46b3	00 00 99 00 99 00 00 00 00 00 00 00 99 00 00 44
	>46c3	00 99 00 00 99 00 99 00 99 99 99 00 99 99 00 00
	>46d3	99 00 00 00 00 00 00 00 00 44 00 99 44 00 99 00
	>46e3	00 99 00 99 99 00 99 00
5494							.struct
5495	>2ceb							BackChars1 .fill $680
5496	>336b							BackChars2 .fill $680
5497	>39eb							BackChars3 .fill $680
5498	>406b							BackChars4 .fill $680
5499							.ends
5500						.endu
5501	.46eb					WallCharLUT .block
5502	=512						_offset = 16*4*8
5503	=(12011,13675,15339,17003)			values = (BackChars1,BackChars2,BackChars3,BackChars4)+_offset
5504	>46eb	eb 6b eb 6b				lo .byte <(values)
5505	>46ef	2e 35 3b 42				hi .byte >(values)
5506						.bend

5508	>46f3	11 11 11 11 33 11 33 33		LowerFixedChars .binary "fixed_section_chars.ver"
	>46fb	11 11 11 33 33 11 33 33 11 11 11 33 33 11 33 33
	>470b	11 11 11 33 99 33 99 99 33 33 99 33 99 00 00 00
	>471b	99 99 00 99 99 00 00 00 99 99 00 99 99 00 00 00
	>472b	99 99 00 99 00 00 00 00 00 00 00 00 00 99 33 99
	>473b	00 33 11 33 00 33 11 33 00 33 11 33 00 33 11 33
	>474b	00 33 11 33 00 99 33 99 00 00 00 00 00 00 00 00
	>475b	99 00 99 00 99 00 99 00 99 00 99 00 99 00 99 00
	>476b	99 00 99 00 00 00 00 00 00 00 99 00 99 00 00 00
	>477b	00 11 00 44 99 00 44 44 00 00 11 44 00 44 11 44
	>478b	11 44 44 44 00 44 44 44 00 00 00 99 11 00 00 00
	>479b	44 00 00 99 44 99 00 00 44 44 00 11 44 99 00 00
	>47ab	99 44 99 00 44 99 00 00 00 44 99 44 00 99 44 99
	>47bb	00 99 99 99 11 00 00 99 00 00 99 00 00 99 00 00
	>47cb	00 00 00 11 99 00 00 00 99 00 00 00 99 99 00 11
	>47db	99 00 00 00 00 00 00 00 00 00 99 00 00 99 11 00
	>47eb	00 00 00 99 00 00 99 00 00 99 00 00 99 00 00 11
	>47fb	00 99 00 11 99 00 00 77 00 99 00 11 99 00 00 77
	>480b	00 99 00 11 99 00 11 77 00 99 00 99 77 00 99 00
	>481b	77 77 00 99 77 99 00 00 77 77 00 99 77 99 00 00
	>482b	77 00 00 99 77 11 00 00 00 11 77 99 00 77 99 00
	>483b	00 77 00 00 00 77 00 00 00 77 11 00 00 99 77 11
	>484b	00 00 99 77 99 00 00 00 99 77 11 00 00 99 77 00
	>485b	00 00 77 00 99 00 77 00 00 11 77 00 11 77 99 00
	>486b	77 99 00 99 00 00 99 00 00 00 00 22 99 00 22 22
	>487b	00 00 22 22 00 22 99 22 00 22 22 22 00 22 99 22
	>488b	00 22 22 22 00 22 22 22 22 00 00 00 99 22 00 00
	>489b	22 22 00 99 99 22 22 00 22 22 22 00 22 22 22 00
	>48ab	22 22 99 00 22 22 22 00 00 22 11 22 00 22 00 22
	>48bb	00 22 22 22 00 22 99 22 00 22 22 22 00 22 99 22
	>48cb	00 22 00 22 00 22 99 22 22 22 22 00 99 22 99 00
	>48db	22 22 22 00 22 22 99 00 99 22 00 00 22 22 99 00
	>48eb	99 22 00 00 00 22 00 00 00 99 00 00 99 00 00 11
	>48fb	00 11 00 00 99 00 00 77 00 00 77 11 11 00 99 77
	>490b	00 00 00 99 00 11 00 00 00 99 00 99 00 00 00 00
	>491b	00 00 11 00 77 00 00 00 77 77 00 11 77 99 00 00
	>492b	99 00 00 99 00 00 11 00 00 00 00 00 99 00 00 00
	>493b	00 99 00 99 99 00 00 55 00 00 55 55 99 00 00 55
	>494b	00 99 00 55 99 00 99 00 11 00 00 99 00 00 99 00
	>495b	00 00 00 99 99 00 99 00 99 00 00 99 99 55 00 00
	>496b	99 00 00 99 00 00 99 00 00 99 00 00 00 00 00 55
	>497b	00 55 11 55 00 55 11 55 00 55 11 55 00 55 55 55
	>498b	00 55 11 55 00 55 55 55 00 99 00 00 99 00 00 00
	>499b	99 99 00 00 99 99 99 00 99 99 00 00 99 99 99 00
	>49ab	99 99 00 00 99 99 99 00 00 99 99 99 99 00 99 99
	>49bb	00 00 55 99 99 00 99 99 00 00 99 99 99 00 00 99
	>49cb	00 99 00 99 99 00 99 00 55 55 00 00 55 00 00 00
	>49db	55 55 00 99 55 00 00 00 55 55 00 99 55 00 99 00
	>49eb	99 00 00 99 00 00 99 00 99 00 00 00 00 33 11 33
	>49fb	00 99 33 99 99 00 00 00 00 33 11 33 00 99 33 99
	>4a0b	99 00 00 00 00 33 11 33 00 00 00 99 44 00 44 00
	>4a1b	00 00 00 00 99 99 00 99 44 00 44 00 00 99 00 00
	>4a2b	99 00 00 99 44 00 44 00 00 99 33 99 99 00 00 00
	>4a3b	00 33 11 33 00 99 33 99 99 00 00 00 00 33 11 33
	>4a4b	00 99 33 99 99 00 00 00 00 00 00 00 99 99 00 99
	>4a5b	44 00 44 00 00 00 00 00 99 99 00 99 44 00 44 00
	>4a6b	00 00 00 00 00 00 00 99 00 99 00 00 99 00 00 11
	>4a7b	00 99 00 00 99 00 00 33 00 99 00 33 99 00 00 33
	>4a8b	00 99 00 33 99 00 33 33 00 99 00 99 33 00 99 00
	>4a9b	00 99 00 99 33 00 99 00 99 00 00 99 33 00 99 00
	>4aab	99 00 00 99 33 99 00 00 00 00 11 33 00 33 11 33
	>4abb	00 33 33 33 00 99 33 33 00 33 33 33 00 99 33 99
	>4acb	00 00 99 99 99 00 00 00 33 33 00 99 33 99 99 00
	>4adb	33 33 99 00 33 99 99 00 99 33 99 00 33 99 99 00
	>4aeb	99 99 00 99 00 00 99 00 00 99 00 00 99 00 00 22
	>4afb	00 99 00 22 99 00 22 11 00 00 22 11 99 00 22 22
	>4b0b	00 22 22 22 00 99 22 22 00 99 00 99 22 00 99 00
	>4b1b	22 00 00 99 22 99 00 00 22 22 00 99 22 99 00 00
	>4b2b	22 22 99 00 22 99 00 00 00 99 99 99 00 99 99 99
	>4b3b	00 00 99 00 00 99 00 99 00 00 00 00 99 00 00 00
	>4b4b	00 00 00 00 99 00 00 00 99 99 99 00 99 99 00 00
	>4b5b	99 00 00 00 00 00 99 00 00 00 22 00 00 22 99 00
	>4b6b	99 99 00 99 00 00 99 00 00 99 00 00 99 00 00 33
	>4b7b	00 00 11 33 99 00 11 33 00 00 33 33 99 00 33 33
	>4b8b	00 00 33 33 99 00 99 33 00 00 00 99 99 00 00 00
	>4b9b	33 99 00 99 33 99 00 00 33 99 00 99 33 99 00 00
	>4bab	33 99 00 99 99 99 00 00
5509	>4bb3	55 55 55 55 55 55 55 55		UpperFixedChars .binary "top_fixed_chars.ver"
	>4bbb	55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55
	>4bcb	55 55 55 55 55 55 55 55 00 00 00 99 99 00 99 00
	>4bdb	00 00 99 22 00 99 22 22 00 99 00 22 00 99 22 22
	>4beb	00 99 00 22 00 99 22 22 00 00 00 00 22 22 00 00
	>4bfb	22 22 00 99 99 22 22 00 22 22 22 00 99 22 22 00
	>4c0b	00 22 99 00 99 22 22 00 00 99 00 11 00 99 22 00
	>4c1b	00 99 00 22 00 99 99 22 00 99 00 22 00 99 99 22
	>4c2b	00 99 00 22 00 00 00 22 22 22 22 00 99 22 99 00
	>4c3b	00 22 22 00 99 22 99 00 00 22 00 00 00 22 99 00
	>4c4b	00 22 00 00 00 22 00 00 00 00 00 99 99 00 99 99
	>4c5b	00 00 99 22 00 99 22 99 00 99 99 22 00 99 22 11
	>4c6b	00 99 22 22 00 99 22 11 99 00 00 00 99 99 00 00
	>4c7b	99 00 00 99 99 22 99 00 00 99 22 00 99 22 99 00
	>4c8b	00 99 22 00 99 22 99 00 00 99 22 11 00 99 22 11
	>4c9b	00 99 22 22 00 99 22 11 00 99 99 22 00 99 22 99
	>4cab	00 99 99 22 00 00 99 99 11 22 22 00 99 22 22 00
	>4cbb	00 22 22 00 99 22 99 00 00 99 22 00 99 22 99 00
	>4ccb	00 99 22 00 99 22 99 00 99 00 00 00 99 99 00 00
	>4cdb	22 99 00 99 99 22 99 00 22 99 99 00 11 22 99 00
	>4ceb	22 22 99 00 11 22 99 00 11 22 11 00 11 22 99 00
	>4cfb	22 22 99 00 11 22 99 00 22 99 99 00 99 22 99 00
	>4d0b	22 99 99 00 99 99 00 00 11 22 99 00 11 22 99 00
	>4d1b	22 22 99 00 11 22 99 00 22 99 99 00 99 22 99 00
	>4d2b	22 99 99 00 99 99 00 00 99 99 99 99 99 09 99 09
	>4d3b	99 90 90 99 99 99 09 99 99 90 90 99 99 09 99 09
	>4d4b	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>4d5b	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>4d6b	99 99 99 99 99 99 99 99 77 99 77 99 99 77 99 77
	>4d7b	77 11 11 11 99 77 77 77 77 11 99 99 99 77 99 99
	>4d8b	77 11 99 99 99 77 99 99 77 99 77 99 99 77 99 77
	>4d9b	11 11 11 11 77 77 77 77 99 99 99 99 99 99 99 99
	>4dab	99 99 99 99 99 99 99 99 77 11 99 99 99 77 99 99
	>4dbb	77 11 99 99 99 77 99 99 77 11 99 99 99 77 99 99
	>4dcb	77 11 99 99 99 77 99 99 77 99 77 99 99 77 99 00
	>4ddb	11 11 11 99 77 77 99 00 99 99 00 99 99 99 00 00
	>4deb	99 99 00 99 99 99 00 00 99 99 00 99 99 99 00 00
	>4dfb	99 99 00 99 99 99 00 00 99 99 00 99 99 99 00 00
	>4e0b	99 99 00 99 99 99 00 00 99 99 99 99 99 99 99 99
	>4e1b	99 91 11 11 91 11 11 11 91 11 11 11 11 11 11 11
	>4e2b	11 11 19 91 11 11 99 99 99 99 99 99 99 99 99 99
	>4e3b	19 99 91 19 11 19 11 11 11 19 11 11 11 11 91 11
	>4e4b	11 11 91 11 11 11 91 11 99 99 99 99 99 99 99 99
	>4e5b	99 91 19 99 99 11 11 99 99 11 11 99 99 11 11 99
	>4e6b	99 11 11 99 99 11 11 99 99 99 99 99 99 99 99 99
	>4e7b	91 19 99 11 11 11 91 11 11 11 91 11 11 11 91 11
	>4e8b	11 11 91 11 11 11 91 11 99 99 99 99 99 99 99 99
	>4e9b	11 11 99 91 11 11 19 11 11 11 11 91 99 11 11 91
	>4eab	99 11 11 91 11 11 11 91 99 99 99 99 99 99 99 99
	>4ebb	19 99 91 19 11 99 11 11 11 99 11 11 11 91 11 11
	>4ecb	11 11 11 19 11 11 11 99 33 33 99 99 33 33 39 93
	>4edb	33 33 33 33 93 33 33 33 93 33 33 33 99 93 33 33
	>4eeb	99 99 99 99 99 99 99 99 33 33 93 33 33 99 93 33
	>4efb	39 33 93 33 93 33 39 33 93 33 39 33 39 33 99 33
	>4f0b	99 99 99 99 99 99 99 99 93 33 33 39 93 33 33 39
	>4f1b	33 33 33 33 33 33 33 33 33 39 93 33 33 99 99 33
	>4f2b	99 99 99 99 99 99 99 99 33 33 93 33 33 33 93 33
	>4f3b	33 33 93 33 33 33 93 33 33 39 33 33 33 99 93 39
	>4f4b	99 99 99 99 99 99 99 99 33 33 33 93 33 33 33 93
	>4f5b	99 33 33 93 99 33 33 93 99 33 33 93 99 93 39 93
	>4f6b	99 99 99 99 99 99 99 99 33 33 33 99 33 33 33 39
	>4f7b	33 93 33 33 33 99 33 33 33 99 33 33 39 99 93 39
	>4f8b	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 33
	>4f9b	99 99 93 39 99 99 99 33 99 99 93 99 99 99 99 33
	>4fab	99 99 99 99 99 99 99 99 99 99 99 99 33 99 99 33
	>4fbb	99 39 93 39 33 99 93 39 93 39 93 39 33 99 99 33
	>4fcb	99 99 99 99 99 99 99 99 99 99 99 99 33 99 99 33
	>4fdb	93 39 93 39 99 99 93 39 93 39 93 39 33 99 99 33
	>4feb	99 99 99 99 99 99 99 99 99 99 99 99 33 99 93 33
	>4ffb	93 39 93 39 93 39 93 33 93 39 93 39 33 99 93 39
	>500b	99 99 99 99 99 99 99 99 99 99 99 99 33 99 99 33
	>501b	93 39 93 39 33 99 93 33 93 39 93 39 93 39 99 33
	>502b	99 99 99 99 99 99 99 99 99 99 99 99 33 99 99 99
	>503b	93 39 99 99 99 99 99 99 93 39 99 99 33 99 99 99
	>504b	99 99 99 99 99 99 99 99 99 99 99 99 93 39 93 39
	>505b	93 39 93 39 93 33 33 39 93 39 93 39 93 39 93 39
	>506b	99 99 99 99 99 99 99 99 99 99 99 99 93 33 33 39
	>507b	99 93 39 99 99 93 39 99 99 93 39 99 93 33 33 39
	>508b	99 99 99 99 99 99 99 99 99 99 99 99 99 33 33 99
	>509b	93 39 93 39 93 39 99 99 93 39 93 39 99 33 33 39
	>50ab	99 99 93 39 99 99 99 99 99 99 99 99 99 99 99 00
	>50bb	99 99 00 77 99 99 00 77 99 99 00 77 99 99 00 77
	>50cb	99 99 00 99 99 00 99 77 00 00 00 99 77 77 77 00
	>50db	99 77 99 00 11 99 11 00 00 99 00 00 77 11 11 00
	>50eb	77 99 99 00 99 99 00 00 99 00 77 77 00 99 77 77
	>50fb	00 77 77 77 00 77 77 99 00 77 99 77 99 00 00 00
	>510b	99 99 00 77 99 00 11 11 77 77 77 00 77 77 99 00
	>511b	77 77 77 00 77 77 99 00 77 99 00 77 00 00 99 00
	>512b	00 99 00 99 00 77 77 00 99 99 99 00 99 00 00 11
	>513b	00 11 00 00 00 00 00 77 00 00 77 11 11 00 99 77
	>514b	00 00 00 99 00 11 00 00 99 99 99 99 00 00 00 99
	>515b	00 00 11 00 77 00 00 00 77 77 00 11 77 99 00 00
	>516b	99 00 00 00 00 00 11 00 99 00 00 00 99 99 00 00
	>517b	99 99 00 99 99 99 00 55 99 00 55 55 99 99 00 55
	>518b	99 99 00 55 99 99 99 00 11 00 00 99 00 00 99 99
	>519b	00 00 99 99 99 00 99 99 99 00 99 99 99 55 00 99
	>51ab	99 00 99 99 00 99 99 99 99 99 99 99 99 11 11 99
	>51bb	91 19 11 19 91 19 91 19 91 11 91 19 99 11 11 99
	>51cb	99 99 99 99 99 99 99 99 99 99 99 99 99 91 19 99
	>51db	99 11 19 99 99 91 19 99 99 91 19 99 99 11 11 99
	>51eb	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>51fb	91 99 91 19 99 11 11 99 91 19 99 99 91 11 11 19
	>520b	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>521b	91 19 91 19 99 99 11 99 91 19 91 19 99 11 11 99
	>522b	99 99 99 99 99 99 99 99 99 99 99 99 91 19 11 99
	>523b	91 19 11 99 91 11 11 19 99 99 11 99 99 99 11 99
	>524b	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 19
	>525b	91 19 99 99 91 11 11 99 99 99 91 19 91 11 11 99
	>526b	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>527b	91 19 99 19 91 11 11 99 91 19 91 19 99 11 11 99
	>528b	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 19
	>529b	91 19 91 19 99 99 11 99 99 91 19 99 99 91 19 99
	>52ab	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>52bb	91 19 91 19 99 11 11 99 91 19 91 19 99 11 11 99
	>52cb	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>52db	91 19 91 19 99 11 11 19 91 99 91 19 99 11 11 99
	>52eb	99 99 99 99 99 99 99 99 77 11 99 99 99 77 99 99
	>52fb	77 11 99 99 99 77 99 99 77 99 00 00 99 00 00 00
	>530b	00 99 00 99 99 00 99 00 99 99 99 99 99 99 99 99
	>531b	99 99 99 99 99 99 99 99 00 00 00 00 00 00 00 00
	>532b	00 99 00 99 99 00 99 00 99 99 00 99 99 99 00 00
	>533b	99 99 00 99 99 99 00 00 00 00 00 99 00 00 00 00
	>534b	00 99 00 99 99 00 99 00 99 99 99 99 99 99 99 99
	>535b	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>536b	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>537b	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>538b	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>539b	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>53ab	99 99 99 99 99 99 99 99
5510	.53b3					fileTiles ;
5511						;.binary "tiledefs.raw",0,32*4
5512						;.byte 84,85,86,87
5513						linerTile4 .macro
5515						.endm
5514	>53b3	00 01 02 03			    .byte 0*4+range(0,4)
5514	>53b7	10 11 12 13			    .byte 4*4+range(0,4)
5514	>53bb	38 39 3a 3b			    .byte 14*4+range(0,4)
5514	>53bf	44 45 46 47			    .byte 17*4+range(0,4)
5514	>53c3	30 31 32 33			    .byte 12*4+range(0,4)
5514	>53c7	3c 3d 3e 3f			    .byte 15*4+range(0,4)
5514	>53cb	48 49 4a 4b			    .byte 18*4+range(0,4)
5514	>53cf	4c 4d 4e 4f			    .byte 19*4+range(0,4)
5514	>53d3	50 51 52 53			    .byte 20*4+range(0,4)
5514	>53d7	54 55 56 57			    .byte 21*4+range(0,4)
5514	>53db	40 41 42 43			    .byte 16*4+range(0,4)
5527	>53df	c1 c2 c3 c4			.byte 193,194,195,196 ; exit open frame 1
5528	>53e3	c5 c6 c7 c8			.byte 197,198,199,200 ; exit open frame 2
5529	>53e7	c5 c9 c7 ca			.byte 197,201,199,202 ; exit open frame 3
5530	>53eb	c5 c9 c7 cb			.byte 197,201,199,203 ; exit open frame 4
5514	>53ef	40 41 42 43			    .byte 16*4+range(0,4)
5514	>53f3	34 35 36 37			    .byte 13*4+range(0,4)
5514	>53f7	14 15 16 17			    .byte 5*4+range(0,4)
5534	>53fb	14 15 18 19			.byte 20,21,24,25
5535	>53ff	14 15 1a 1b			.byte 20,21,26,27
5536	>5403	14 15 1c 1d			.byte 20,21,28,29
5537	>5407	14 15 1e 1f			.byte 20,21,30,31
5538	>540b	14 15 20 21			.byte 20,21,32,33
5539	>540f	14 15 0e 0f			.byte 20,21,14,15
5540	>5413	22 23 0e 0f			.byte 34,35,14,15
5541	>5417	24 25 0e 0f			.byte 36,37,14,15
5542	>541b	26 27 0e 0f			.byte 38,39,14,15
5543	>541f	28 29 0e 0f			.byte 40,41,14,15
5544	>5423	2a 2b 0e 0f			.byte 42,43,14,15
5545	>5427	2c 2d 0e 0f			.byte 44,45,14,15
5546	>542b	0c 0d 0e 0f			.byte 12,13,14,15 ; DISS End
5547	>542f	04 05 02 03			.byte 4,5,2,3 ; underhang start
5548	>5433	07 05 02 03			.byte 7,5,2,3 ; underhang
5549	>5437	08 01 02 03			.byte 8,1,2,3 ; shadow open corner
5550	>543b	09 01 0b 03			.byte 9,1,11,3 ; side shadow
5551	>543f	0a 01 0b 03			.byte 10,1,11,3 ; middlesideShadow
5552	>5443	06 05 0b 03			.byte 6,5,11,3 ; topLeftCorner
5553	>5447	7c 7d 7e 7f			.byte 124,125,126,127 ; old wall for intermission

5555	.544b					fileFont ;
5556	>544b	00 3c 66 6e 60 3c 00 00		.binary "font.raw"
	>5453	00 3c 66 7e 66 66 00 00 00 7c 66 7c 66 7c 00 00
	>5463	00 3c 66 60 66 3c 00 00 00 7c 66 66 66 7c 00 00
	>5473	00 3c 66 70 66 3c 00 00 00 3c 66 70 60 60 00 00
	>5483	00 3c 66 60 66 3e 06 00 00 66 66 7e 66 66 00 00
	>5493	00 7e 18 18 18 7e 00 00 00 7e 66 06 66 3c 00 00
	>54a3	00 66 66 7c 66 66 00 00 00 60 60 60 66 7e 00 00
	>54b3	00 66 7e 66 66 66 00 00 00 66 76 7e 6e 66 00 00
	>54c3	00 3c 66 66 66 3c 00 00 00 7c 66 7c 60 60 00 00
	>54d3	00 3c 66 66 6e 3c 06 00 00 7c 66 7c 66 66 00 00
	>54e3	00 3c 62 3c 46 3c 00 00 00 7e 5a 18 18 18 00 00
	>54f3	00 66 66 66 66 3e 00 00 00 66 66 66 3c 18 00 00
	>5503	00 66 66 66 7e 66 00 00 00 66 66 3c 66 66 00 00
	>5513	00 66 66 3e 06 7c 00 00 00 7e 0c 18 30 7e 00 00
	>5523	00 3c 30 30 30 3c 00 00 00 1c 32 78 30 7e 00 00
	>5533	00 3c 0c 0c 0c 3c 00 00 00 18 3c 7e 18 18 00 00
	>5543	00 08 0c 7e 0c 08 00 00 00 00 00 00 00 00 00 00
	>5553	00 18 18 18 00 18 00 00 00 66 66 00 00 00 00 00
	>5563	00 24 7e 24 7e 24 00 00 00 28 7c 7c 38 10 00 00
	>5573	00 66 6c 18 36 66 00 00 00 38 28 7e 6c 7e 00 00
	>5583	00 18 18 30 00 00 00 00 00 18 30 30 30 18 00 00
	>5593	00 18 0c 0c 0c 18 00 00 00 66 7e 18 7e 66 00 00
	>55a3	00 18 18 7e 18 18 00 00 00 00 00 00 18 18 30 00
	>55b3	00 00 00 7e 00 00 00 00 00 00 00 00 18 18 00 00
	>55c3	00 06 0c 18 30 60 00 00 00 3c 6e 66 76 3c 00 00
	>55d3	00 18 38 18 18 3c 00 00 00 3c 46 3c 60 7e 00 00
	>55e3	00 3c 66 0c 66 3c 00 00 00 6c 6c 7e 0c 0c 00 00
	>55f3	00 7e 60 7c 06 7c 00 00 00 3c 62 7c 66 3c 00 00
	>5603	00 7e 66 0c 18 18 00 00 00 3c 66 3c 66 3c 00 00
	>5613	00 3c 66 3e 46 3c 00 00 00 18 18 00 18 18 00 00
	>5623	00 18 18 00 18 18 30 00 00 1c 30 60 30 1c 00 00
	>5633	00 00 7e 00 7e 00 00 00 00 38 0c 06 0c 38 00 00
	>5643	00 3c 46 1c 00 18 00 00
5557	.564b					FILE_END
5558						.send sCharSprData
5559						.enc "none"
5560	>564b	53 50 52 49 54 45 53 2e		spriteFileName .text "sprites.ver"
	>5653	56 45 52
5561	>5656	99 99 99 99 99 11 11 99		font4bpp .binary "font4bpp.ver"
	>565e	91 19 91 19 91 19 11 19 91 19 99 99 99 11 11 99
	>566e	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>567e	91 19 91 19 91 11 11 19 91 19 91 19 91 19 91 19
	>568e	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 99
	>569e	91 19 91 19 91 11 11 99 91 19 91 19 91 11 11 99
	>56ae	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>56be	91 19 91 19 91 19 99 99 91 19 91 19 99 11 11 99
	>56ce	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 99
	>56de	91 19 91 19 91 19 91 19 91 19 91 19 91 11 11 99
	>56ee	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>56fe	91 19 91 19 91 11 99 99 91 19 91 19 99 11 11 99
	>570e	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>571e	91 19 91 19 91 11 99 99 91 19 99 99 91 19 99 99
	>572e	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>573e	91 19 91 19 91 19 99 99 91 19 91 19 99 11 11 19
	>574e	99 99 91 19 99 99 99 99 99 99 99 99 91 19 91 19
	>575e	91 19 91 19 91 11 11 19 91 19 91 19 91 19 91 19
	>576e	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 19
	>577e	99 91 19 99 99 91 19 99 99 91 19 99 91 11 11 19
	>578e	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 19
	>579e	91 19 91 19 99 99 91 19 91 19 91 19 99 11 11 99
	>57ae	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>57be	91 19 91 19 91 11 11 99 91 19 91 19 91 19 91 19
	>57ce	99 99 99 99 99 99 99 99 99 99 99 99 91 19 99 99
	>57de	91 19 99 99 91 19 99 99 91 19 91 19 91 11 11 19
	>57ee	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>57fe	91 11 11 19 91 19 91 19 91 19 91 19 91 19 91 19
	>580e	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>581e	91 11 91 19 91 11 11 19 91 19 11 19 91 19 91 19
	>582e	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>583e	91 19 91 19 91 19 91 19 91 19 91 19 99 11 11 99
	>584e	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 99
	>585e	91 19 91 19 91 11 11 99 91 19 99 99 91 19 99 99
	>586e	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>587e	91 19 91 19 91 19 91 19 91 19 11 19 99 11 11 99
	>588e	99 99 91 19 99 99 99 99 99 99 99 99 91 11 11 99
	>589e	91 19 91 19 91 11 11 99 91 19 91 19 91 19 91 19
	>58ae	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>58be	91 19 99 19 99 11 11 99 91 99 91 19 99 11 11 99
	>58ce	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 19
	>58de	91 91 19 19 99 91 19 99 99 91 19 99 99 91 19 99
	>58ee	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>58fe	91 19 91 19 91 19 91 19 91 19 91 19 99 11 11 19
	>590e	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>591e	91 19 91 19 91 19 91 19 99 11 11 99 99 91 19 99
	>592e	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>593e	91 19 91 19 91 19 91 19 91 11 11 19 91 19 91 19
	>594e	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>595e	91 19 91 19 99 11 11 99 91 19 91 19 91 19 91 19
	>596e	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>597e	91 19 91 19 99 11 11 19 99 99 91 19 91 11 11 99
	>598e	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 19
	>599e	99 99 11 99 99 91 19 99 99 11 99 99 91 11 11 19
	>59ae	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>59be	99 11 99 99 99 11 99 99 99 11 99 99 99 11 11 99
	>59ce	99 99 99 99 99 99 99 99 99 99 99 99 99 91 11 99
	>59de	99 11 99 19 91 11 19 99 99 11 99 99 91 11 11 19
	>59ee	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>59fe	99 99 11 99 99 99 11 99 99 99 11 99 99 11 11 99
	>5a0e	99 99 99 99 99 99 99 99 99 99 99 99 99 91 19 99
	>5a1e	99 11 11 99 91 11 11 19 99 91 19 99 99 91 19 99
	>5a2e	99 99 99 99 99 99 99 99 99 99 99 99 99 99 19 99
	>5a3e	99 99 11 99 91 11 11 19 99 99 11 99 99 99 19 99
	>5a4e	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>5a5e	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>5a6e	99 99 99 99 99 99 99 99 99 99 99 99 99 91 19 99
	>5a7e	99 91 19 99 99 91 19 99 99 99 99 99 99 91 19 99
	>5a8e	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>5a9e	91 19 91 19 99 99 99 99 99 99 99 99 99 99 99 99
	>5aae	99 99 99 99 99 99 99 99 99 99 99 99 99 19 91 99
	>5abe	91 11 11 19 99 19 91 99 91 11 11 19 99 19 91 99
	>5ace	99 99 99 99 99 99 99 99 99 99 99 99 99 19 19 99
	>5ade	91 11 11 99 91 11 11 99 99 11 19 99 99 91 99 99
	>5aee	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>5afe	91 19 11 99 99 91 19 99 99 11 91 19 91 19 91 19
	>5b0e	99 99 99 99 99 99 99 99 99 99 99 99 99 11 19 99
	>5b1e	99 19 19 99 91 11 11 19 91 19 11 99 91 11 11 19
	>5b2e	99 99 99 99 99 99 99 99 99 99 99 99 99 91 19 99
	>5b3e	99 91 19 99 99 11 99 99 99 99 99 99 99 99 99 99
	>5b4e	99 99 99 99 99 99 99 99 99 99 99 99 99 91 19 99
	>5b5e	99 11 99 99 99 11 99 99 99 11 99 99 99 91 19 99
	>5b6e	99 99 99 99 99 99 99 99 99 99 99 99 99 91 19 99
	>5b7e	99 99 11 99 99 99 11 99 99 99 11 99 99 91 19 99
	>5b8e	99 99 99 99 99 99 99 99 99 99 99 99 91 19 91 19
	>5b9e	91 11 11 19 99 91 19 99 91 11 11 19 91 19 91 19
	>5bae	99 99 99 99 99 99 99 99 99 99 99 99 99 91 19 99
	>5bbe	99 91 19 99 91 11 11 19 99 91 19 99 99 91 19 99
	>5bce	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>5bde	99 99 99 99 99 99 99 99 99 91 19 99 99 91 19 99
	>5bee	99 11 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>5bfe	99 99 99 99 91 11 11 19 99 99 99 99 99 99 99 99
	>5c0e	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>5c1e	99 99 99 99 99 99 99 99 99 91 19 99 99 91 19 99
	>5c2e	99 99 99 99 99 99 99 99 99 99 99 99 99 99 91 19
	>5c3e	99 99 11 99 99 91 19 99 99 11 99 99 91 19 99 99
	>5c4e	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>5c5e	91 19 11 19 91 19 91 19 91 11 91 19 99 11 11 99
	>5c6e	99 99 99 99 99 99 99 99 99 99 99 99 99 91 19 99
	>5c7e	99 11 19 99 99 91 19 99 99 91 19 99 99 11 11 99
	>5c8e	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>5c9e	91 99 91 19 99 11 11 99 91 19 99 99 91 11 11 19
	>5cae	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>5cbe	91 19 91 19 99 99 11 99 91 19 91 19 99 11 11 99
	>5cce	99 99 99 99 99 99 99 99 99 99 99 99 91 19 11 99
	>5cde	91 19 11 99 91 11 11 19 99 99 11 99 99 99 11 99
	>5cee	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 19
	>5cfe	91 19 99 99 91 11 11 99 99 99 91 19 91 11 11 99
	>5d0e	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>5d1e	91 19 99 19 91 11 11 99 91 19 91 19 99 11 11 99
	>5d2e	99 99 99 99 99 99 99 99 99 99 99 99 91 11 11 19
	>5d3e	91 19 91 19 99 99 11 99 99 91 19 99 99 91 19 99
	>5d4e	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>5d5e	91 19 91 19 99 11 11 99 91 19 91 19 99 11 11 99
	>5d6e	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>5d7e	91 19 91 19 99 11 11 19 91 99 91 19 99 11 11 99
	>5d8e	99 99 99 99 99 99 99 99 99 99 99 99 99 91 19 99
	>5d9e	99 91 19 99 99 99 99 99 99 91 19 99 99 91 19 99
	>5dae	99 99 99 99 99 99 99 99 99 99 99 99 99 91 19 99
	>5dbe	99 91 19 99 99 99 99 99 99 91 19 99 99 91 19 99
	>5dce	99 11 99 99 99 99 99 99 99 99 99 99 99 91 11 99
	>5dde	99 11 99 99 91 19 99 99 99 11 99 99 99 91 11 99
	>5dee	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
	>5dfe	91 11 11 19 99 99 99 99 91 11 11 19 99 99 99 99
	>5e0e	99 99 99 99 99 99 99 99 99 99 99 99 99 11 19 99
	>5e1e	99 99 11 99 99 99 91 19 99 99 11 99 99 11 19 99
	>5e2e	99 99 99 99 99 99 99 99 99 99 99 99 99 11 11 99
	>5e3e	91 99 91 19 99 91 11 99 99 99 99 99 99 91 19 99
	>5e4e	99 99 99 99 99 99 99 99

5563	.5e56					CopyDataFields .block
5564	.5e56					  src .block
5565	>5e56	4b f3 b3 56			    lo .byte <(values[:,0])
5566	>5e5a	54 46 4b 56			    hi .byte >(values[:,0])
5567						  .bend
5568	.5e5e					  dest .block
5569	>5e5e	00 80 00 00			    lo   .byte <(values[:,1])
5570	>5e62	24 2c 3e 36			    hi   .byte >(values[:,1])
5571	>5e66	10 10 10 10			    bank .byte `(values[:,1] | kVERA.inc_1) ; set increment to 1
5572						  .bend
5573	>5e6a	02 05 08 08			  pages .byte (values[:,2])
5574						.bend

5576						.enc "qwak"

5578						.dsection sLEVEL_TABLE
5579						.section sLEVEL_TABLE
5580	.5e6e					LevelTableLo
5581	>5e6e	ac 79 46 11 e0 a7 78 4b		.byte <fileTileMap,<Level02,<Level03,<Level04,<Level05,<Level06,<Level07,<Level08,<Level09,<Level10,<Level11,<Level12,<Level13,<Level14,<Level15,<Level16,<Level17,<Level18,<Level19,<Level20,<Level21,<Level22,<Level23,<Level24,<Level25,<Level26,<Level27,<Level28,<Level29,<Level30,<Level31
	>5e76	14 e5 ac 7b 4a 1b ee b7 86 57 28 f7 c0 91 5c 27
	>5e86	fa c5 96 69 36 07 d2
5582	.5e8d					LevelTableHi
5583	>5e8d	5e 5f 60 61 61 62 63 64		.byte >fileTileMap,>Level02,>Level03,>Level04,>Level05,>Level06,>Level07,>Level08,>Level09,>Level10,>Level11,>Level12,>Level13,>Level14,>Level15,>Level16,>Level17,>Level18,>Level19,>Level20,>Level21,>Level22,>Level23,>Level24,>Level25,>Level26,>Level27,>Level28,>Level29,>Level30,>Level31
	>5e95	65 65 66 67 68 69 69 6a 6b 6c 6d 6d 6e 6f 70 71
	>5ea5	71 72 73 74 75 76 76
5584						.send sLEVEL_TABLE

5586						.dsection sLEVEL_MAP
5587						.section sLEVEL_MAP
5588	.5eac					fileTileMap
5589	>5eac	c4 00 c4 00 00 00 00 00		.binary "levels/01.bin"
	>5eb4	00 08 08 08 08 08 00 00 00 00 00 00 00 00 00 00
	>5ec4	00 01 01 01 01 01 00 00 00 00 00 00 08 08 08 08
	>5ed4	08 09 00 00 00 09 08 08 00 00 00 00 01 01 01 01
	>5ee4	01 01 00 00 00 01 01 01 00 00 00 00 07 07 07 01
	>5ef4	00 00 00 00 00 00 00 01 08 08 00 00 07 07 07 01
	>5f04	00 00 00 00 00 00 00 01 01 01 00 00 08 08 08 03
	>5f14	00 0a 00 00 00 00 00 02 07 02 09 12 14 14 14 01
	>5f24	01 01 00 00 00 01 01 01 14 01 01 01 06 06 06 06
	>5f34	06 01 00 00 00 01 00 00 00 00 00 01 00 00 00 00
	>5f44	00 01 01 00 01 01 00 00 00 00 00 01 00 00 00 00
	>5f54	00 00 00 00 00 00 00 00 10 00 00 11 01 01 01 01
	>5f64	01 01 01 01 01 01 01 01 01 01 01 01 04 a7 30 47
	>5f74	20 8a 03 6a 01
5590	>5f79	c4 00 c4 00 00 00 00 00		Level02 .binary "levels/02.bin"
	>5f81	00 00 08 08 08 08 00 00 00 00 00 00 00 00 00 00
	>5f91	00 08 08 08 08 08 08 00 00 00 00 00 12 00 09 00
	>5fa1	00 08 08 08 08 08 08 00 00 09 00 00 01 01 01 00
	>5fb1	00 08 08 08 08 08 08 00 00 01 01 11 00 00 00 00
	>5fc1	00 08 08 08 08 08 08 00 00 00 00 00 00 00 00 00
	>5fd1	00 08 08 08 08 08 08 00 00 00 00 00 00 00 00 09
	>5fe1	00 00 08 08 08 08 00 00 09 00 00 00 01 01 01 01
	>5ff1	00 00 00 01 01 00 00 00 01 01 01 01 00 00 00 00
	>6001	00 00 00 08 08 00 00 00 00 00 00 00 00 00 00 00
	>6011	00 00 00 08 08 00 00 00 00 00 00 00 00 00 00 00
	>6021	09 00 00 08 08 00 00 09 00 00 00 00 00 01 01 01
	>6031	01 00 00 08 08 00 00 01 01 01 01 00 04 2f 10 60
	>6041	10 a2 03 ad 03
5591	>6046	c4 00 c4 00 00 00 00 00		Level03 .binary "levels/03.bin"
	>604e	00 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00
	>605e	00 00 00 00 00 00 00 00 00 00 00 07 08 00 00 00
	>606e	00 00 00 00 00 00 00 00 00 00 00 07 01 00 01 01
	>607e	01 00 09 00 00 09 00 01 01 01 14 14 00 00 01 00
	>608e	00 00 00 00 00 00 00 00 00 01 08 08 00 01 01 00
	>609e	00 00 00 00 00 00 00 00 00 01 00 00 00 00 01 00
	>60ae	00 00 00 00 00 00 00 00 00 06 00 00 00 00 01 00
	>60be	00 00 00 00 00 00 00 00 00 06 00 00 00 00 01 00
	>60ce	00 00 00 00 00 00 00 00 00 06 00 00 00 00 01 00
	>60de	00 00 00 00 00 00 00 00 00 06 00 00 07 12 01 00
	>60ee	00 00 00 00 00 00 00 00 0f 06 06 06 13 01 01 01
	>60fe	01 01 13 01 01 13 01 01 01 01 01 11 03 94 10 9b
	>610e	12 23 20
5592	>6111	c4 00 c4 00 09 00 00 00		Level04 .binary "levels/04.bin"
	>6119	00 00 00 00 00 00 00 00 00 00 00 09 00 00 00 00
	>6129	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08
	>6139	08 08 00 00 00 00 08 08 08 00 12 00 00 01 01 01
	>6149	01 01 00 00 00 00 01 01 01 01 01 00 09 00 00 00
	>6159	00 00 00 00 00 00 00 00 00 00 00 09 01 00 00 00
	>6169	00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 07
	>6179	00 00 00 00 00 00 00 00 07 00 00 00 02 02 01 01
	>6189	00 00 00 00 00 00 00 00 01 01 02 02 00 00 00 01
	>6199	01 14 01 07 07 01 14 01 01 00 00 00 11 00 00 00
	>61a9	03 00 06 00 00 06 00 03 00 00 00 11 01 00 0a 00
	>61b9	03 00 0b 00 00 0b 00 03 00 0a 00 01 01 01 01 01
	>61c9	01 01 01 01 01 01 01 01 01 01 01 01 05 67 22 1b
	>61d9	22 14 20 81 03 8e 03
5593	>61e0	c4 00 c4 00 00 00 00 00		Level05 .binary "levels/04boss01.bin"
	>61e8	00 00 00 00 00 00 00 00 00 00 00 00 09 00 10 00
	>61f8	00 00 00 09 09 00 00 00 00 10 00 09 01 01 01 00
	>6208	00 00 00 01 01 00 00 00 00 01 01 01 00 00 00 00
	>6218	00 00 00 00 00 00 00 00 00 00 00 00 09 00 0d 00
	>6228	00 00 00 09 09 00 00 00 00 0e 00 09 01 01 01 00
	>6238	00 00 00 01 01 00 00 00 00 01 01 01 00 00 00 00
	>6248	00 00 00 00 00 00 00 00 00 00 00 00 09 00 10 00
	>6258	00 00 00 09 09 00 00 00 00 10 00 09 01 01 01 00
	>6268	00 00 00 01 01 00 00 00 00 01 01 01 00 00 00 00
	>6278	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>6288	00 00 00 09 09 00 00 00 00 00 00 11 01 01 01 01
	>6298	00 00 01 01 01 01 00 00 01 01 01 01 01 67 82
5594	>62a7	c4 00 c4 00 00 00 00 00		Level06 .binary "levels/05.bin"
	>62af	00 00 00 00 00 00 00 00 00 00 08 08 00 00 00 00
	>62bf	00 00 00 00 00 00 00 00 00 00 08 08 12 09 00 00
	>62cf	00 00 00 00 00 00 00 00 00 09 08 08 01 01 00 00
	>62df	00 01 07 07 07 01 00 00 00 01 01 01 00 00 00 09
	>62ef	00 00 00 00 00 00 00 09 00 00 00 00 0f 00 00 01
	>62ff	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00
	>630f	00 09 00 00 00 09 00 00 00 00 00 00 00 00 00 00
	>631f	00 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00
	>632f	00 00 00 09 00 00 00 00 00 00 00 00 14 14 14 01
	>633f	00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 01
	>634f	00 00 00 00 00 00 00 00 00 00 00 11 06 06 06 01
	>635f	01 01 01 01 01 01 01 01 01 01 01 01 06 22 20 4c
	>636f	20 6b 20 8a 23 71 02 ad 40
5595	>6378	c4 00 c4 00 00 00 00 00		Level07 .binary "levels/06.bin"
	>6380	00 09 00 00 00 00 0a 00 00 00 00 00 00 00 00 00
	>6390	00 00 00 00 00 00 00 00 00 00 00 00 12 00 00 00
	>63a0	00 08 08 08 08 08 08 00 00 00 00 00 01 02 02 02
	>63b0	02 01 01 01 01 01 01 03 03 03 03 01 00 00 00 00
	>63c0	00 00 00 00 00 00 00 00 00 00 00 00 0b 01 00 00
	>63d0	00 00 0b 00 00 0b 00 00 00 00 01 0b 00 00 00 00
	>63e0	00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
	>63f0	00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
	>6400	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
	>6410	00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
	>6420	00 00 08 08 08 08 00 00 00 00 00 00 00 01 01 01
	>6430	01 01 01 01 01 01 01 01 01 01 11 00 07 b0 61 bf
	>6440	62 2d 22 87 20 4b 73 75 01 7a 03
5596	>644b	c4 00 c4 00 09 00 00 09		Level08 .binary "levels/07.bin"
	>6453	00 00 09 00 00 09 00 00 09 00 00 09 00 00 00 00
	>6463	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>6473	00 00 00 00 00 00 00 00 00 00 00 12 00 00 00 00
	>6483	00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00
	>6493	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>64a3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>64b3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>64c3	00 00 00 00 00 00 00 00 00 00 00 00 00 06 06 00
	>64d3	06 06 00 06 06 00 06 06 00 06 06 00 00 00 00 00
	>64e3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>64f3	00 00 00 00 00 00 00 00 00 00 11 00 13 01 01 13
	>6503	01 01 13 01 01 13 01 01 13 01 01 01 02 a0 22 3e
	>6513	20
5597	>6514	c4 00 c4 00 06 00 00 00		Level09 .binary "levels/08.bin"
	>651c	00 06 00 00 00 00 06 00 00 00 00 09 00 00 00 00
	>652c	00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00
	>653c	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
	>654c	01 01 01 01 01 01 01 01 01 00 00 00 09 00 00 00
	>655c	08 00 00 00 00 00 00 01 00 00 00 00 01 00 00 00
	>656c	01 00 00 00 00 00 00 01 00 00 00 00 00 00 00 12
	>657c	01 11 00 00 00 00 00 00 00 00 00 00 00 00 00 01
	>658c	01 01 01 14 14 01 01 01 01 00 00 00 09 00 00 00
	>659c	00 00 00 00 00 00 07 01 00 00 00 09 01 00 00 00
	>65ac	00 00 00 00 00 00 00 01 00 00 00 01 08 00 00 00
	>65bc	00 00 00 00 00 00 0f 01 00 00 00 00 01 01 01 01
	>65cc	01 01 01 14 14 01 01 01 06 06 06 06 06 a3 03 a6
	>65dc	03 a9 03 5f 02 2f 22 4a 22
5598	>65e5	c4 00 c4 00 00 00 00 00		Level10 .binary "levels/08boss02.bin"
	>65ed	09 00 06 06 06 06 00 09 00 00 00 00 09 0d 10 00
	>65fd	00 00 00 00 00 00 00 00 00 10 0e 09 01 01 01 00
	>660d	00 00 00 00 00 00 00 00 00 01 01 01 06 06 00 00
	>661d	00 00 00 00 00 00 00 00 00 00 06 06 00 00 00 09
	>662d	00 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00
	>663d	00 01 14 14 14 14 01 00 00 00 00 00 00 00 00 00
	>664d	00 00 06 06 06 06 00 00 00 00 00 00 09 10 10 00
	>665d	00 00 00 00 00 00 00 00 00 10 10 09 01 01 01 00
	>666d	00 00 00 00 00 00 00 00 00 01 01 01 00 00 00 00
	>667d	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>668d	00 00 00 00 00 00 00 00 00 0f 00 11 01 01 01 00
	>669d	01 01 01 00 00 01 01 01 00 01 01 01 01 87 90
5599	>66ac	c4 00 c4 00 12 00 00 00		Level11 .binary "levels/09.bin"
	>66b4	00 00 00 00 00 00 00 00 00 00 00 00 11 00 00 00
	>66c4	00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
	>66d4	01 01 01 00 00 01 01 01 01 01 01 01 09 00 00 00
	>66e4	00 00 06 00 00 06 00 00 00 00 00 0f 00 00 00 00
	>66f4	00 00 01 00 00 01 00 00 00 00 00 00 00 00 00 00
	>6704	00 00 07 00 00 07 00 00 00 00 00 00 00 00 01 00
	>6714	00 00 07 00 00 07 00 00 00 01 00 00 00 00 00 00
	>6724	00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
	>6734	01 01 01 08 08 01 01 01 01 01 00 00 00 00 00 00
	>6744	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00
	>6754	00 00 00 00 00 00 00 00 00 00 00 09 01 01 01 01
	>6764	00 01 01 06 06 01 01 00 01 01 01 01 05 1f 30 a1
	>6774	40 97 20 52 20 6e 03
5600	>677b	c4 00 c4 00 00 11 00 00		Level12 .binary "levels/10.bin"
	>6783	00 00 00 00 00 00 00 00 00 00 12 00 00 01 00 00
	>6793	00 00 09 00 00 09 00 00 00 00 01 00 00 00 00 00
	>67a3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
	>67b3	00 00 08 08 08 08 00 00 00 01 00 00 00 00 00 00
	>67c3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
	>67d3	00 00 01 00 00 01 00 00 01 00 00 00 00 00 00 00
	>67e3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
	>67f3	00 00 08 00 00 08 00 00 00 01 00 00 00 00 00 00
	>6803	00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
	>6813	00 00 07 07 07 07 00 00 00 00 01 00 09 00 00 00
	>6823	00 00 00 00 00 00 00 00 00 00 00 09 01 01 01 01
	>6833	01 01 01 06 06 01 01 01 01 01 01 01 05 2e 20 6e
	>6843	22 41 20 81 22 7c 40
5601	>684a	c4 00 c4 00 00 00 00 00		Level13 .binary "levels/11.bin"
	>6852	00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 08
	>6862	00 00 01 00 00 09 00 00 01 00 00 07 00 00 00 00
	>6872	00 00 00 00 00 00 00 00 00 00 00 00 08 00 00 01
	>6882	00 00 09 00 00 01 00 00 06 00 00 01 12 00 00 00
	>6892	00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 09
	>68a2	00 00 01 00 00 0a 00 00 01 00 00 0b 00 00 00 00
	>68b2	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 01
	>68c2	00 00 0a 00 00 01 00 00 0b 00 00 01 00 00 00 00
	>68d2	00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 06
	>68e2	00 00 01 00 00 0b 00 00 01 00 00 08 00 00 00 00
	>68f2	00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 01
	>6902	00 00 0b 00 00 01 00 00 08 00 00 11 06 09 22 49
	>6912	22 89 22 a6 20 66 20 26 20
5602	>691b	c4 00 c4 00 00 00 00 00		Level14 .binary "levels/12.bin"
	>6923	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00
	>6933	00 00 00 00 00 00 00 00 00 00 00 09 01 01 01 00
	>6943	00 00 01 01 01 01 00 00 00 01 01 01 00 00 00 00
	>6953	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>6963	0a 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 01
	>6973	01 01 00 00 00 00 01 01 01 00 00 00 00 00 00 00
	>6983	00 00 00 00 00 00 00 00 00 00 00 12 0b 00 00 00
	>6993	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 00
	>69a3	00 00 06 06 06 06 00 00 00 01 01 01 00 00 00 00
	>69b3	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>69c3	0c 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 01
	>69d3	01 01 00 00 00 00 01 01 01 00 00 00 07 b6 61 b9
	>69e3	61 94 03 9b 02 1d 30 12 32 58 40
5603	>69ee	c4 00 c4 00 00 00 00 00		Level15 .binary "levels/12boss03.bin"
	>69f6	06 00 06 00 00 06 00 06 00 00 00 00 09 0d 10 00
	>6a06	00 00 00 00 00 00 00 00 00 10 0e 09 01 01 01 00
	>6a16	00 00 00 00 00 00 00 00 00 01 01 01 00 00 00 00
	>6a26	09 00 00 00 00 00 00 09 00 00 00 00 00 00 00 00
	>6a36	01 00 00 09 09 00 00 01 00 00 00 00 00 00 00 00
	>6a46	00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
	>6a56	09 00 00 00 00 00 00 09 00 00 00 00 09 10 10 00
	>6a66	01 00 00 00 00 00 00 01 00 10 10 09 01 01 01 00
	>6a76	00 00 06 00 00 06 00 00 00 01 01 01 00 00 00 00
	>6a86	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>6a96	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 01
	>6aa6	01 00 01 01 01 01 00 01 01 01 01 01 02 87 80 27
	>6ab6	82
5604	>6ab7	c4 00 c4 00 09 00 00 00		Level16 .binary "levels/13.bin"
	>6abf	00 00 00 00 01 01 01 06 06 06 00 06 01 00 00 00
	>6acf	00 00 00 00 01 07 01 00 00 00 00 0a 00 00 00 00
	>6adf	00 00 00 00 02 07 02 00 00 00 00 00 00 00 14 00
	>6aef	00 00 00 00 02 07 02 00 00 00 0a 00 00 00 00 00
	>6aff	00 00 00 00 01 07 01 00 00 00 00 00 01 00 00 00
	>6b0f	01 01 01 00 01 01 01 00 00 0a 00 06 09 08 08 08
	>6b1f	01 00 00 00 00 00 01 00 00 00 00 00 01 01 01 00
	>6b2f	01 00 00 00 00 00 01 00 0a 00 00 00 07 07 01 00
	>6b3f	01 00 00 14 00 00 01 00 00 00 00 00 00 00 01 00
	>6b4f	01 00 00 00 00 00 01 0a 00 00 00 00 12 00 00 00
	>6b5f	11 00 00 00 00 00 00 08 08 08 08 00 01 01 01 13
	>6b6f	01 01 01 06 01 01 01 13 13 13 13 00 05 24 22 42
	>6b7f	20 86 01 88 03 1d 32
5605	>6b86	c4 00 c4 00 00 00 06 00		Level17 .binary "levels/14.bin"
	>6b8e	00 00 06 00 00 00 06 00 00 00 00 00 09 00 00 00
	>6b9e	07 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00
	>6bae	00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00
	>6bbe	01 00 00 00 01 00 00 00 01 01 00 00 00 00 00 00
	>6bce	00 00 00 00 00 00 00 00 00 06 12 00 01 01 06 01
	>6bde	01 01 06 01 01 01 06 01 00 01 01 01 00 00 00 00
	>6bee	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00
	>6bfe	09 00 00 00 09 00 00 00 09 11 00 00 00 00 00 00
	>6c0e	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>6c1e	00 00 00 00 00 00 00 00 00 00 00 00 14 14 14 14
	>6c2e	14 14 14 14 14 14 14 14 14 01 00 0f 06 06 06 06
	>6c3e	06 06 06 06 06 06 06 06 06 01 00 01 06 21 20 41
	>6c4e	20 72 03 76 03 7a 03 6d 22
5606	>6c57	c4 00 c4 00 01 06 06 06		Level18 .binary "levels/15.bin"
	>6c5f	01 01 01 00 01 01 01 01 01 01 01 00 01 09 00 00
	>6c6f	08 00 08 00 00 00 00 00 00 0a 01 00 01 00 00 00
	>6c7f	08 00 08 00 00 00 00 00 00 00 01 00 01 00 00 00
	>6c8f	08 00 08 00 00 00 00 00 00 00 01 00 01 00 00 00
	>6c9f	08 12 08 00 00 00 00 00 00 00 01 00 01 08 01 01
	>6caf	01 01 01 01 01 08 01 01 01 01 01 00 01 08 01 00
	>6cbf	00 00 00 00 06 00 06 11 00 00 00 00 01 08 01 00
	>6ccf	00 00 00 00 06 00 06 00 00 00 00 00 01 08 01 00
	>6cdf	00 00 00 00 06 00 06 00 00 00 00 00 01 08 01 08
	>6cef	01 01 01 0a 01 00 06 01 01 01 01 01 01 08 08 08
	>6cff	01 0f 03 00 01 00 06 06 06 06 06 06 01 01 01 01
	>6d0f	01 00 01 01 01 00 00 00 00 00 00 00 06 2a 10 22
	>6d1f	20 76 03 74 01 7c 03 7e 01
5607	>6d28	c4 00 c4 00 09 00 09 00		Level19 .binary "levels/16.bin"
	>6d30	09 00 00 07 07 00 00 09 00 09 00 09 00 00 00 00
	>6d40	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>6d50	00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 06
	>6d60	00 06 00 00 00 00 06 00 06 00 06 00 00 00 00 00
	>6d70	00 00 00 00 00 00 00 00 00 00 00 00 13 00 13 00
	>6d80	13 00 00 00 00 00 00 13 00 13 00 13 01 00 01 00
	>6d90	01 00 00 00 00 00 00 01 00 01 00 01 08 00 00 00
	>6da0	00 00 00 00 00 00 00 00 00 00 00 08 08 00 00 00
	>6db0	00 00 00 00 00 00 00 00 00 00 00 08 08 00 00 00
	>6dc0	00 00 00 00 00 00 12 00 00 00 00 08 09 00 00 00
	>6dd0	00 00 13 00 00 13 11 00 00 00 00 09 01 01 01 00
	>6de0	01 01 01 08 08 01 01 01 01 01 01 01 05 9d 71 92
	>6df0	71 a4 01 ae 42 42 20
5608	>6df7	c4 00 c4 00 00 00 00 00		Level20 .binary "levels/16boss04.bin"
	>6dff	00 00 00 00 00 00 00 00 00 00 00 00 09 10 10 00
	>6e0f	00 00 00 00 00 00 00 00 00 10 10 09 01 01 01 00
	>6e1f	00 06 00 01 01 00 06 00 00 01 01 01 00 00 00 00
	>6e2f	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>6e3f	00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 00
	>6e4f	06 00 00 01 01 00 00 06 00 01 01 01 00 00 00 00
	>6e5f	00 00 00 00 00 00 00 00 00 00 00 00 09 10 10 00
	>6e6f	00 00 00 00 00 00 00 00 00 10 10 09 01 01 01 00
	>6e7f	00 06 00 01 01 00 06 00 00 01 01 01 00 00 00 00
	>6e8f	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>6e9f	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 00
	>6eaf	14 14 00 01 01 00 14 14 00 01 01 01 02 67 90 07
	>6ebf	92
5609	>6ec0	c4 00 c4 00 00 00 00 00		Level21 .binary "levels/17.bin"
	>6ec8	00 0a 00 00 00 00 0a 00 00 00 00 00 00 00 00 00
	>6ed8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>6ee8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>6ef8	00 00 00 01 01 00 00 00 00 00 00 00 09 06 00 0f
	>6f08	00 00 00 00 00 00 00 00 07 00 06 09 00 06 00 01
	>6f18	01 00 00 00 00 00 00 01 01 00 06 00 00 06 00 00
	>6f28	00 00 00 00 00 00 00 00 00 00 06 00 00 06 00 00
	>6f38	01 01 00 00 00 00 01 01 00 00 06 00 00 06 00 00
	>6f48	00 0b 00 00 00 00 0b 00 00 00 06 00 00 06 00 00
	>6f58	00 01 01 08 08 01 01 00 00 00 06 00 00 00 00 00
	>6f68	00 00 00 00 00 00 00 00 00 00 00 12 01 01 01 01
	>6f78	01 01 01 01 01 01 01 01 01 01 01 11 06 63 53 6c
	>6f88	53 a8 22 67 20 01 10 2c 42
5610	>6f91	c4 00 c4 00 09 00 00 09		Level22 .binary "levels/18.bin"
	>6f99	00 00 09 00 00 09 00 00 09 00 00 09 00 00 00 00
	>6fa9	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>6fb9	00 00 00 00 00 00 00 00 00 00 00 12 00 00 00 00
	>6fc9	00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00
	>6fd9	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>6fe9	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>6ff9	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>7009	00 00 00 00 00 00 00 00 00 00 00 00 00 06 06 00
	>7019	06 06 00 06 06 00 06 06 00 06 06 00 00 00 00 00
	>7029	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>7039	00 00 00 00 00 00 00 00 00 00 11 00 13 01 01 13
	>7049	01 01 13 01 01 13 01 01 13 01 01 01 03 ad 22 4d
	>7059	22 52 20
5611	>705c	c4 00 c4 00 09 00 00 00		Level23 .binary "levels/19.bin"
	>7064	00 09 00 00 00 00 09 00 00 00 00 09 12 00 00 00
	>7074	00 00 00 00 00 00 00 00 00 00 00 00 01 00 08 08
	>7084	00 01 00 07 07 00 01 00 08 08 00 01 0a 00 00 00
	>7094	00 0a 00 00 00 00 0a 00 00 00 00 0a 00 00 00 00
	>70a4	00 00 00 00 00 00 00 00 00 00 00 00 01 00 08 08
	>70b4	00 01 00 07 07 00 01 00 08 08 00 01 0b 00 00 00
	>70c4	00 0b 00 00 00 00 0b 00 00 00 00 0b 00 00 00 00
	>70d4	00 00 00 00 00 00 00 00 00 00 00 00 11 00 08 08
	>70e4	00 01 00 07 07 00 01 00 08 08 00 01 0c 00 00 00
	>70f4	00 0c 00 00 00 00 0c 00 00 00 00 0c 00 00 00 00
	>7104	00 00 00 00 00 00 00 00 00 00 00 00 01 13 01 01
	>7114	13 01 13 01 01 13 01 13 01 01 13 01 03 4f 22 af
	>7124	22 70 20
5612	>7127	c4 00 c4 00 00 00 00 00		Level24 .binary "levels/20.bin"
	>712f	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>713f	00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00
	>714f	00 01 01 01 01 01 01 01 01 01 00 00 01 01 01 14
	>715f	14 01 00 00 00 00 00 00 00 01 00 0a 00 00 00 00
	>716f	00 00 00 00 00 00 00 00 00 01 14 01 00 00 00 00
	>717f	00 00 00 00 04 04 04 00 00 00 00 01 00 00 08 08
	>718f	08 08 00 00 02 0f 03 00 00 12 00 01 00 00 01 06
	>719f	06 01 00 00 01 01 01 00 00 01 14 01 00 00 01 00
	>71af	00 01 00 00 00 00 00 00 00 00 00 0c 00 01 01 00
	>71bf	00 01 01 01 00 00 00 05 00 00 00 00 00 08 08 00
	>71cf	00 07 0b 11 00 00 00 05 00 00 00 00 01 01 01 01
	>71df	01 01 01 01 01 00 01 01 01 01 06 06 07 37 53 3b
	>71ef	53 10 20 40 20 89 20 9d 70 94 03
5613	>71fa	c4 00 c4 00 00 00 00 00		Level25 .binary "levels/20boss05.bin"
	>7202	00 00 00 00 00 00 00 00 00 00 00 00 09 00 10 00
	>7212	00 09 00 00 00 00 09 00 00 10 00 09 01 00 01 00
	>7222	00 01 00 06 06 00 01 00 00 01 00 01 00 00 00 00
	>7232	00 00 00 00 00 00 00 00 00 00 00 00 10 00 09 00
	>7242	00 0d 00 00 00 00 0e 00 00 09 00 10 01 00 01 00
	>7252	00 01 00 06 06 00 01 00 00 01 00 01 00 00 00 00
	>7262	00 00 00 00 00 00 00 00 00 00 00 00 09 00 10 00
	>7272	00 09 00 00 00 00 09 00 00 10 00 09 01 00 01 00
	>7282	00 01 00 06 06 00 01 00 00 01 00 01 00 00 00 00
	>7292	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>72a2	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 00
	>72b2	00 01 00 00 00 00 01 00 00 01 01 01 03 97 80 67
	>72c2	82 37 80
5614	>72c5	c4 00 c4 00 0b 00 00 0a		Level26 .binary "levels/21.bin"
	>72cd	00 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00
	>72dd	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>72ed	00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 04
	>72fd	06 06 06 02 00 00 00 03 03 03 03 00 00 00 00 00
	>730d	00 00 00 00 00 00 00 0c 00 00 00 00 14 14 14 14
	>731d	14 14 02 14 14 14 14 14 05 01 05 00 00 00 00 00
	>732d	00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
	>733d	00 00 00 00 00 00 00 00 00 01 00 00 09 00 00 00
	>734d	00 00 00 00 00 00 00 00 00 0a 00 00 14 00 00 14
	>735d	00 00 14 00 00 14 00 00 05 05 11 00 00 00 00 00
	>736d	00 00 00 00 00 00 00 00 00 00 12 00 06 06 06 06
	>737d	06 06 00 06 06 06 06 06 05 00 01 05 06 26 22 65
	>738d	22 86 20 a5 20 7f 03 46 30
5615	>7396	c4 00 c4 00 00 00 00 00		Level27 .binary "levels/22.bin"
	>739e	00 00 00 00 00 00 00 00 00 00 00 00 00 12 00 00
	>73ae	00 00 00 00 00 00 00 00 00 00 00 0f 01 01 00 09
	>73be	00 00 00 00 00 09 00 00 00 00 01 01 00 00 00 14
	>73ce	00 00 00 00 00 14 00 00 00 00 00 00 00 00 00 00
	>73de	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>73ee	00 00 09 00 00 00 00 00 09 00 00 00 00 00 00 00
	>73fe	00 00 14 08 08 00 00 00 14 00 00 00 00 00 00 00
	>740e	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 09
	>741e	00 00 00 00 00 09 00 00 00 00 00 00 00 00 00 14
	>742e	00 00 00 00 00 14 00 00 00 00 00 00 07 07 00 00
	>743e	00 00 00 00 00 00 00 00 00 00 00 11 01 01 06 06
	>744e	06 00 06 06 06 06 00 06 06 06 01 01 07 b5 61 ba
	>745e	61 04 53 0b 53 4f 22 70 20 1e 10
5616	>7469	c4 00 c4 00 00 00 00 00		Level28 .binary "levels/23.bin"
	>7471	00 00 00 00 00 00 00 00 00 00 00 00 12 00 00 00
	>7481	00 00 00 00 00 00 00 00 00 00 00 11 01 00 00 00
	>7491	00 00 00 00 00 00 00 00 00 00 00 01 00 09 00 00
	>74a1	00 0a 00 00 00 0b 00 00 00 0c 00 00 00 00 00 00
	>74b1	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>74c1	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>74d1	00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00
	>74e1	00 06 00 00 00 06 00 00 00 06 00 00 00 00 00 00
	>74f1	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	>7501	00 00 00 00 00 00 00 00 00 00 00 00 07 06 07 00
	>7511	08 06 08 00 08 06 08 00 07 06 07 07 01 01 01 13
	>7521	01 01 01 13 01 01 01 13 01 01 01 01 04 50 10 55
	>7531	13 59 11 5e 12
5617	>7536	c4 00 c4 00 00 00 00 00		Level29 .binary "levels/24.bin"
	>753e	00 00 02 03 04 05 02 03 04 05 00 11 00 12 00 00
	>754e	14 14 14 14 14 14 14 14 14 14 14 01 01 01 00 00
	>755e	06 06 06 06 06 06 06 06 06 06 06 01 01 00 00 00
	>756e	00 00 00 00 00 00 00 00 0b 00 00 01 01 00 00 14
	>757e	14 00 00 00 00 00 00 14 14 00 00 01 01 00 00 00
	>758e	00 00 00 09 00 00 00 00 00 00 00 01 01 00 00 00
	>759e	00 00 00 14 14 00 00 00 0c 00 00 01 01 00 00 14
	>75ae	14 00 00 00 00 00 00 14 14 00 00 01 01 00 00 00
	>75be	00 00 00 0a 00 00 00 00 00 00 00 01 01 00 00 00
	>75ce	00 00 00 14 14 00 00 00 00 00 00 01 01 00 00 00
	>75de	00 00 00 00 00 00 00 00 00 00 00 01 01 01 13 01
	>75ee	01 01 01 01 01 01 01 01 01 01 01 01 06 04 20 45
	>75fe	10 7a 10 75 10 4a 10 aa 32
5618	>7607	c4 00 c4 00 00 00 00 00		Level30 .binary "levels/24boss06.bin"
	>760f	00 00 00 00 00 00 00 00 00 00 00 00 0c 0d 10 00
	>761f	00 00 00 14 14 00 00 00 00 10 0e 0b 05 05 05 00
	>762f	00 00 00 00 00 00 00 00 00 04 04 04 00 00 00 00
	>763f	0a 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 00
	>764f	14 00 00 0c 0c 00 00 14 00 00 00 00 00 00 00 00
	>765f	00 00 00 14 14 00 00 00 00 00 00 00 00 00 00 00
	>766f	0a 00 00 00 00 00 00 0b 00 00 00 00 09 10 10 00
	>767f	14 00 00 00 00 00 00 14 00 10 10 0a 02 02 02 00
	>768f	00 00 00 00 00 00 00 00 00 03 03 03 00 00 00 00
	>769f	00 00 00 00 00 00 00 00 00 00 00 00 11 00 12 00
	>76af	00 00 00 00 00 00 00 00 00 00 00 11 01 01 01 01
	>76bf	00 01 01 06 06 01 01 00 01 01 01 01 03 97 90 67
	>76cf	92 27 90
5619	>76d2	c4 00 c4 00 12 00 00 00		Level31 .binary "levels/end.bin"
	>76da	00 00 00 00 00 00 00 00 00 00 00 01 01 00 00 00
	>76ea	07 00 07 07 00 07 00 00 00 07 01 00 07 00 00 00
	>76fa	07 00 07 00 00 07 00 00 00 07 00 01 07 00 00 00
	>770a	07 00 07 07 00 07 00 00 00 07 00 00 07 00 07 00
	>771a	07 00 07 00 00 07 00 00 00 07 00 00 00 07 00 07
	>772a	00 00 07 07 00 07 07 07 00 07 07 07 00 00 00 00
	>773a	00 00 00 00 00 00 00 00 00 00 00 00 08 08 00 00
	>774a	00 08 00 00 08 00 08 00 08 08 08 00 08 00 08 00
	>775a	08 00 08 00 08 08 08 00 08 00 00 00 08 00 08 00
	>776a	08 00 08 00 08 08 08 00 08 08 00 09 08 00 08 00
	>777a	08 00 08 00 08 08 08 00 08 00 00 11 08 08 00 00
	>778a	00 08 00 00 08 00 08 00 08 08 08 01 01 1f 03
5620						.send sLEVEL_MAP
5621						* = $a000
5622						.dsection sAUDIO
5623						.section sAUDIO
5624	.a000					SID ;.binary "QWAK.sid",126
5625						; SFX
5626	.a000					SND_FLOWER	;	.binary "qwak_flower.snd"
5627	.a000					SND_DOOR		;.binary "qwak_door.snd"
5628	.a000					SND_COLLECT	;	.binary "qwak_collect.snd"
5629	.a000					SND_BUBBLE	;	.binary "qwak_bubble.snd"
5630	.a000					SND_EBUBBLE	;	.binary "enemy_bubble.snd"
5631	.a000					SND_POWER_UP;	.binary "qwak_power_up.snd"
5632	.a000					SND_JUMP		;.binary "qwak_jump.snd"
5633	.a000					SND_HURT		;.binary "qwak_hurt.snd"
5634						.send sAUDIO


;******  End of listing
